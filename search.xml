<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop-HDFS</title>
    <url>/2022/04/16/Hadoop-HDFS/</url>
    <content><![CDATA[<h3 id="HDFS-的-Shell-操作"><a href="#HDFS-的-Shell-操作" class="headerlink" title="HDFS 的 Shell 操作"></a>HDFS 的 Shell 操作</h3><h4 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h4><p><code>hadoop fs ...</code>，或 <code>hdfs dfs ...</code>。<br>后面的命令用法和Linux命令操作用法基本差不多。</p>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>hadoop fs -mkdir 文件名</code></td>
<td>创建文件夹</td>
<td><code>hadoop fs -mkdir /xiyou/bajie</code></td>
<td>创建<code>/xiyou/bajie</code>的文件夹</td>
</tr>
<tr>
<td><code>hadoop fs -moveFromLocal</code></td>
<td>剪切本地文件上传倒hdfs流经</td>
<td><code>hadoop fs -moveFromLocal a.txt /xiyou</code></td>
<td>将本地的a.txt剪切掉，上传到<code>/xiyou</code>目录下</td>
</tr>
<tr>
<td><code>hadoop fs -copyFromLocal</code></td>
<td>拷贝本地文件上传倒hdfs流经</td>
<td><code>hadoop fs -copyFromLocal b.txt /xiyou</code></td>
<td>将本地的b.txt上传到<code>/xiyou</code>目录下，本地文件还在</td>
</tr>
<tr>
<td><code>hadoop fs -put</code></td>
<td>同<code>-copyFromLocal</code></td>
<td><code>hadoop fs -put wukong.txt /xiyou</code></td>
<td>将本地的wukong.txt上传到<code>/xiyou</code>目录下，本地文件还在</td>
</tr>
<tr>
<td><code>hadoop fs -appendToFile</code></td>
<td>追加一个文件到已经存在的文件末尾</td>
<td><code>hadoop fs -appendToFile jingubnag.txt /xiyou/wukong.txt</code></td>
<td>将jingubang.txt里的内容追加到wukong.txt末尾</td>
</tr>
<tr>
<td><code>hadoop fs -copyToLocal</code></td>
<td>从HDFS拷贝到本地</td>
<td><code>hadoop fs -copyToLocal /xiyou/a.txt  ./</code></td>
<td>把a.txt下载到本地</td>
</tr>
<tr>
<td><code>hadoop fs -get</code></td>
<td>同<code>-CopyToLocal</code></td>
<td>略</td>
<td>略</td>
</tr>
</tbody>
</table>
</div>
<h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><ol>
<li>-ls: 显示目录信息</li>
<li>-cat：显示文件内容</li>
<li>-chgrp、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</li>
<li>-cp：从HDFS的一个路径拷贝到HDFS的另一个路径</li>
<li>-mv：在HDFS目录中移动文件</li>
<li>-tail：显示一个文件的末尾1kb的数据、</li>
<li>-rm：删除文件或文件夹</li>
<li>-rm -r：递归删除目录及目录里面内容</li>
<li>-du统计文件夹的大小信息</li>
<li>-setrep：设置HDFS中文件的副本数量</li>
</ol>
<h3 id="HDFS-的-API-操作"><a href="#HDFS-的-API-操作" class="headerlink" title="HDFS  的 API 操作"></a>HDFS  的 API 操作</h3><h4 id="Maven-和-idea-的安装与配置"><a href="#Maven-和-idea-的安装与配置" class="headerlink" title="Maven 和 idea 的安装与配置"></a>Maven 和 idea 的安装与配置</h4><ol>
<li>下载maven，防灾一个没有中文没有空格的路径下；</li>
<li>配置maven环境变量；</li>
<li>修改本地仓库路径和镜像（要进入setting.xml去修改！！）；</li>
<li>安装idea，并修改maven配置，在<code>File-New Projects Setup-Settings for New Projects...</code>里进行全局修改。</li>
</ol>
<h4 id="客户端代码操作常用套路"><a href="#客户端代码操作常用套路" class="headerlink" title="客户端代码操作常用套路"></a>客户端代码操作常用套路</h4><ol>
<li>获取客户端对象</li>
<li>执行操作命令</li>
<li>关闭资源</li>
</ol>
<h4 id="以创建文件夹为例"><a href="#以创建文件夹为例" class="headerlink" title="以创建文件夹为例"></a>以创建文件夹为例</h4><ol>
<li>先创建一个maven项目；</li>
<li>添加相关依赖坐标：<dependencies>
    <dependency>
        <groupId>org.apache.hadoop</groupId>
        <artifactId>hadoop-client</artifactId>
        <version>3.1.3</version>
    </dependency>
    <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.12</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-log4j12</artifactId>
        <version>1.7.30</version>
    </dependency>
</dependencies></li>
<li>日志添加。在项目的src/main/resources目录下，新建一个文件，命名为“log4j.properties”，在文件中填入<br>log4j.rootLogger=INFO, stdout<br>log4j.appender.stdout=org.apache.log4j.ConsoleAppender<br>log4j.appender.stdout.layout=org.apache.log4j.PatternLayout<br>log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - %m%n<br>log4j.appender.logfile=org.apache.log4j.FileAppender<br>log4j.appender.logfile.File=target/spring.log<br>log4j.appender.logfile.layout=org.apache.log4j.PatternLayout<br>log4j.appender.logfile.layout.ConversionPattern=%d %p [%c] - %m%n</li>
<li>在 <code>/src/man/java</code>下创建一个 com.shengrihui.hdfs  包；</li>
<li>创建 HDFSC列宁他 文件</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.shengrihui.hdfs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端代码操作常用套路</span></span><br><span class="line"><span class="comment"> * 1.获取客户端对象</span></span><br><span class="line"><span class="comment"> * 2.执行操作命令</span></span><br><span class="line"><span class="comment"> * 3.关闭资源</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HdfsClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FileSystem fs;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 链接集群的nn地址</span></span><br><span class="line">        <span class="type">URI</span> <span class="variable">uri</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URI</span>(<span class="string">&quot;hdfs://hadoop102:8020&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个配置文件</span></span><br><span class="line">        <span class="type">Configuration</span> <span class="variable">configuration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Configuration</span>();</span><br><span class="line">        <span class="comment">// 用户</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;shengrihui&quot;</span>;</span><br><span class="line">        <span class="comment">// 1.获取到了客户端对象</span></span><br><span class="line">        fs = FileSystem.get(uri, configuration, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 3.关闭资源</span></span><br><span class="line">        fs.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMkdirs</span><span class="params">()</span> <span class="keyword">throws</span> URISyntaxException, IOException, InterruptedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.创建一个文件夹</span></span><br><span class="line">        fs.mkdirs(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/xiyou/wukong&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>close()</code>,<code>init()</code>是为了封装代码。<br>运行后结果：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220412/创建文件夹.4ytaphns1eo0.webp" alt="创建文件夹"></p>
<h4 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPut</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数：</span></span><br><span class="line"><span class="comment">     * 参数1：是否删除源文件</span></span><br><span class="line"><span class="comment">     * 参数2：是否覆盖目标文件（如果已经有了）</span></span><br><span class="line"><span class="comment">     * 参数3：源数据路径</span></span><br><span class="line"><span class="comment">     * 参数4：目的地路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fs.copyFromLocalFile(<span class="literal">false</span>, <span class="literal">true</span>, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\CS\\BigData\\hadoop\\笔记（word版本）\\笔记（word版本）&quot;</span>), <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220412/上传代码运行结果.78jw6wcrta80.webp" alt="上传代码运行结果"><br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220412/上传结果.2b5iohrzlv8k.webp" alt="上传结果"></p>
<h5 id="参数优先级"><a href="#参数优先级" class="headerlink" title="参数优先级"></a>参数优先级</h5><p>参数优先级排序：<br>（1）客户端代码中设置的值 &gt;<br>    在<code>init</code>里<code>configuration.set(&quot;dfs.replication&quot;,&quot;3&quot;);</code><br>（2）ClassPath下的用户自定义配置文件 &gt;<br>    在resource目录下新建文件hdfs-site.xml，写入内容；<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;configuration.xsl&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">	&lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;1&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><br>（3）然后是服务器的自义配置（xxx-site.xml） &gt;<br>（4）服务器的默认配置（xxx-default.xml）</p>
<h4 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数1：源文件是否删除；参数2：源文件的路径（hdfs路径）；参数3：目标地址路径（Windows）</span></span><br><span class="line"><span class="comment">     * 参数4：是否文件校验，从hdfs下载来的数据可能会丢一些数据或错误，会带一个crc的校验码，</span></span><br><span class="line"><span class="comment">     * 再用crc算法算一个值，如果算出来的crc和传过来crc一样，就说明传来的一样</span></span><br><span class="line"><span class="comment">     * false是进行校验，一般不用这个参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fs.copyToLocalFile(<span class="literal">false</span>, <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://hadoop102/xiyouji&quot;</span>), <span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;E:\\&quot;</span>), <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：略</p>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRm</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//参数1：要删除的路径；参数2：是否递归删除</span></span><br><span class="line">    <span class="comment">//删除文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除空目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除非空目录（必须递归）</span></span><br><span class="line">    <span class="comment">//fs.delete(new Path(&quot;hdfs://hadoop102/jinguo&quot;), true);</span></span><br><span class="line">    fs.delete(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;hdfs://hadoop102/xiyou&quot;</span>),<span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：略</p>
<h4 id="文件的更名和移动"><a href="#文件的更名和移动" class="headerlink" title="文件的更名和移动"></a>文件的更名和移动</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件的更名和移动</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testmv</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//参数解读：参数1，原文件路径；参数2，目标文件路径</span></span><br><span class="line">        <span class="comment">//文件名称修改</span></span><br><span class="line">        <span class="comment">//fs.rename(new Path(&quot;hdfs://hadoop102/笔记（word版本）&quot;),new Path(&quot;hdfs://hadoop102/note&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件更名移动</span></span><br><span class="line">        <span class="comment">//fs.rename(new Path(&quot;/wcinput/word.txt&quot;),new Path(&quot;/sanguo/a.txt&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//目录更名</span></span><br><span class="line">        fs.rename(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/sanguo&quot;</span>),<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/shuihu&quot;</span>));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="获取文件详细信息"><a href="#获取文件详细信息" class="headerlink" title="获取文件详细信息"></a>获取文件详细信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取文件详细信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileDetail</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 获取所有文件信息</span></span><br><span class="line">    RemoteIterator&lt;LocatedFileStatus&gt; listFiles = fs.listFiles(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>), <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历文件</span></span><br><span class="line">    <span class="keyword">while</span> (listFiles.hasNext()) &#123;</span><br><span class="line">        <span class="type">LocatedFileStatus</span> <span class="variable">fileStatus</span> <span class="operator">=</span> listFiles.next();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=======&quot;</span> + fileStatus.getPath() + <span class="string">&quot;=======&quot;</span>);</span><br><span class="line">        System.out.println(fileStatus.getPermission());<span class="comment">// 权限</span></span><br><span class="line">        System.out.println(fileStatus.getOwner());</span><br><span class="line">        System.out.println(fileStatus.getGroup());</span><br><span class="line">        System.out.println(fileStatus.getLen());</span><br><span class="line">        System.out.println(fileStatus.getModificationTime());<span class="comment">// 上次修改的时间</span></span><br><span class="line">        System.out.println(fileStatus.getReplication());</span><br><span class="line">        System.out.println(fileStatus.getBlockSize());</span><br><span class="line">        System.out.println(fileStatus.getPath().getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取块信息</span></span><br><span class="line">        BlockLocation[] blockLocations = fileStatus.getBlockLocations();</span><br><span class="line">        System.out.println(Arrays.toString(blockLocations));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220412/hdfs获取文件信息.3qy8actzeaw0.webp" alt="hdfs获取文件信息"><br>其中，大文件会按快大小128M分成好几个块；<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220412/hdfs大文件块信息.2cxiqknp7jvo.webp" alt="hdfs大文件块信息"></p>
<h4 id="判断是文件夹还是文件"><a href="#判断是文件夹还是文件" class="headerlink" title="判断是文件夹还是文件"></a>判断是文件夹还是文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断是文件夹还是文件</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    FileStatus[] listStatus = fs.listStatus(<span class="keyword">new</span> <span class="title class_">Path</span>(<span class="string">&quot;/&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (FileStatus status : listStatus) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isFile()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;文件 &quot;</span> + status.getPath().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;目录 &quot;</span> + status.getPath().getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HDFS读写流程"><a href="#HDFS读写流程" class="headerlink" title="HDFS读写流程"></a>HDFS读写流程</h3><h4 id="HDFS-写流程"><a href="#HDFS-写流程" class="headerlink" title="HDFS 写流程"></a>HDFS 写流程</h4><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/HDFS读写流程-总2.7ieye7u3oek0.webp" alt="HDFS读写流程-总"><br>（1）客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。<br>    还有是否有权限上传<br>（2）NameNode返回是否可以上传。<br>（3）客户端请求第一个 Block上传到哪几个DataNode服务器上。<br>（4）NameNode返回3个DataNode节点，分别为dn1、dn2、dn3。<br>    节点的选择涉及到节点距离最近、负载均衡（如果多个客户端都在写，那就pass这个节点）<br>（5）客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。<br>（6）dn1、dn2、dn3逐级应答客户端。<br>（7）客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。<br>（8）当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。<br>    为什么不是多个节点同时连接客户端？防止因为有任何一个节点没有完成而一直在等；<br>    到dn1的时候同时就往后倒dn2；<br>    最小单位是516字节（4个校验位），攒倒64kB的packet发送；<br>    ACK队列，接受下一端是否接受成功，用于备份。</p>
<h5 id="网络拓扑-节点距离计算"><a href="#网络拓扑-节点距离计算" class="headerlink" title="网络拓扑-节点距离计算"></a>网络拓扑-节点距离计算</h5><p>节点距离：两个节点到达最近的共同祖先的距离总和。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/HDFS读写数据-节点距离.137zn4lyrwa8.webp" alt="HDFS读写数据-节点距离"></p>
<h5 id="机架感知（副本存储节点选择）"><a href="#机架感知（副本存储节点选择）" class="headerlink" title="机架感知（副本存储节点选择）"></a>机架感知（副本存储节点选择）</h5><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/HDFS读写流程-机架感知.8o1r32pms5s.webp" alt="HDFS读写流程-机架感知"><br>第一个副本：本地（如果客户端不在集群，随机算一个）<br>    本地是为了上传的速度<br>第二个副本：另一个机架里随机<br>    另一个机架是为了数据的可靠性<br>第三个副本：和第二个同一个机架随机<br>    兼顾可靠性和速度</p>
<h4 id="HDFS读数据流程"><a href="#HDFS读数据流程" class="headerlink" title="HDFS读数据流程"></a>HDFS读数据流程</h4><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/HDFS读写流程-读数据.5k5bef6075s0.webp" alt="HDFS读写流程-读数据"><br>（1）客户端通过DistributedFileSystem向NameNode请求下载文件，NameNode通过查询元数据，找到文件块所在的DataNode地址。<br>（2）挑选一台DataNode（就近原则，然后随机）服务器，请求读取数据。<br>    节点距离最近，也考虑负载<br>（3）DataNode开始传输数据给客户端（从磁盘里面读取数据输入流，以Packet为单位来做校验）。<br>（4）客户端以Packet为单位接收，先在本地缓存，然后写入目标文件。<br>    串行读，先读第一块，再读第二块</p>
<h3 id="其他（了解和理解）"><a href="#其他（了解和理解）" class="headerlink" title="其他（了解和理解）"></a>其他（了解和理解）</h3><ul>
<li>NameNode和SecondaryNameNode<ul>
<li>NN和2NN工作机制</li>
<li>Fsimage和Edits解析</li>
<li>CheckPoint时间设置</li>
</ul>
</li>
<li>DataNode<ul>
<li>DataNode工作机制</li>
<li>数据完整性</li>
<li>掉线时限参数设置</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_1583. 统计不开心的朋友</title>
    <url>/2021/08/20/Leetcode-1583-%E7%BB%9F%E8%AE%A1%E4%B8%8D%E5%BC%80%E5%BF%83%E7%9A%84%E6%9C%8B%E5%8F%8B/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1583. 统计不开心的朋友<br>难度：中等</p>
<p>给你一份 <code>n</code> 位朋友的亲近程度列表，其中 <code>n</code> 总是 <strong>偶数</strong> 。</p>

<p>对每位朋友 <code>i</code>，<code>preferences[i]</code> 包含一份 <strong>按亲近程度从高</strong><strong>到低排列</strong> 的朋友列表。换句话说，排在列表前面的朋友与 <code>i</code> 的亲近程度比排在列表后面的朋友更高。每个列表中的朋友均以 <code>0</code> 到 <code>n-1</code> 之间的整数表示。</p>

<p>所有的朋友被分成几对，配对情况以列表 <code>pairs</code> 给出，其中 <code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code> 表示 <code>x<sub>i</sub></code> 与 <code>y<sub>i</sub></code> 配对，且 <code>y<sub>i</sub></code> 与 <code>x<sub>i</sub></code> 配对。</p>

<p>但是，这样的配对情况可能会使其中部分朋友感到不开心。在 <code>x</code> 与 <code>y</code> 配对且 <code>u</code> 与 <code>v</code> 配对的情况下，如果同时满足下述两个条件，<code>x</code> 就会不开心：</p>

<ul>
    <li><code>x</code> 与 <code>u</code> 的亲近程度胜过 <code>x</code> 与 <code>y</code>，且</li>
    <li><code>u</code> 与 <code>x</code> 的亲近程度胜过 <code>u</code> 与 <code>v</code></li>
</ul>

<p>返回 <strong>不开心的朋友的数目</strong> 。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]
<strong>输出：</strong>2
<strong>解释：</strong>
朋友 1 不开心，因为：
- <strong>1 与 0 </strong>配对，但 <strong>1 与 3</strong> 的亲近程度比 <strong>1 与 0</strong> 高，且
- <strong>3 与 1</strong> 的亲近程度比 <strong>3 与 2</strong> 高。
朋友 3 不开心，因为：
- 3 与 2 配对，但 <strong>3 与 1</strong> 的亲近程度比 <strong>3 与 2</strong> 高，且
- <strong>1 与 3</strong> 的亲近程度比 <strong>1 与 0</strong> 高。
朋友 0 和 2 都是开心的。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>n = 2, preferences = [[1], [0]], pairs = [[1, 0]]
<strong>输出：</strong>0
<strong>解释：</strong>朋友 0 和 1 都开心。
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]
<strong>输出：</strong>4
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>2 &lt;= n &lt;= 500</code></li>
    <li><code>n</code> 是偶数</li>
    <li><code>preferences.length&nbsp;== n</code></li>
    <li><code>preferences[i].length&nbsp;== n - 1</code></li>
    <li><code>0 &lt;= preferences[i][j] &lt;= n - 1</code></li>
    <li><code>preferences[i]</code> 不包含 <code>i</code></li>
    <li><code>preferences[i]</code> 中的所有值都是独一无二的</li>
    <li><code>pairs.length&nbsp;== n/2</code></li>
    <li><code>pairs[i].length&nbsp;== 2</code></li>
    <li><code>x<sub>i</sub> != y<sub>i</sub></code></li>
    <li><code>0 &lt;= x<sub>i</sub>, y<sub>i</sub>&nbsp;&lt;= n - 1</code></li>

<li>每位朋友都 <strong>恰好</strong> 被包含在一对中</li>
</ul>

<h3 id="方法一：-模拟"><a href="#方法一：-模拟" class="headerlink" title="方法一： 模拟"></a>方法一： 模拟</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这道题看起来非常非常非常复杂，但其实重点再那两个且的条件：</p>
<blockquote>
<ul>
<li><code>x</code> 与 <code>u</code> 的亲近程度胜过 <code>x</code> 与 <code>y</code>，且</li>
<li><code>u</code> 与 <code>x</code> 的亲近程度胜过 <code>u</code> 与 <code>v</code></li>
</ul>

</blockquote>
<p>因此我们的做法就是：</p>
<ol>
<li>找到一个<code>x</code>，以及和他配对的<code>y</code>;</li>
<li>在<code>x</code>的<code>preferences</code>里遍历，在没有遇到<code>y</code>之前，每一个都是可能的<code>u</code>;（这时满足了第一个条件）</li>
<li>在找到与这个<code>u</code>配对的<code>v</code>，然后在<code>u</code>的<code>preferences</code>里找<code>x</code>和<code>v</code>的下标关系是否满足第二个条件，即如果在<code>u</code>的<code>preferences</code>里<code>x</code>的下标小于<code>v</code>的下标，那么，<code>x</code>就是不开心的。<br>为了找所有不开心的<code>x</code>，那么，就是要遍历所有人，同时还要方便找到与它配对的<code>y</code>，所以再开始的时候先创建一个字典，用于记录每个人和谁配对。<br>具体代码实现的时候，还有一个<code>x_isunhappy</code>用于标记<code>x</code>是不是不开心的，如果是，就可以去下一个<code>x</code>了。<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">unhappyFriends</span>(<span class="params">n, preferences, pairs</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    unhappy = <span class="number">0</span></span><br><span class="line">    pairs_dict = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">        pairs_dict[x] = y</span><br><span class="line">        pairs_dict[y] = x</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        y = pairs_dict[x]</span><br><span class="line">        x_isunhappy = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> u <span class="keyword">in</span> preferences[x]:</span><br><span class="line">            <span class="keyword">if</span> u == y <span class="keyword">or</span> x_isunhappy == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            v = pairs_dict[u]</span><br><span class="line">            <span class="keyword">if</span> preferences[u].index(x) &lt; preferences[u].index(v):</span><br><span class="line">                x_isunhappy = <span class="literal">True</span></span><br><span class="line">                unhappy += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> unhappy</span><br></pre></td></tr></table></figure>
官方的方法和我的几乎一样。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def unhappyFriends(self, n: int, preferences: List[List[int]], pairs: List[List[int]]) -&gt; int:</span><br><span class="line">        order = [[0] * n for _ in range(n)]</span><br><span class="line">        for i in range(n):</span><br><span class="line">            for j in range(n - 1):</span><br><span class="line">                order[i][preferences[i][j]] = j</span><br><span class="line">        </span><br><span class="line">        match = [0] * n</span><br><span class="line">        for x, y in pairs:</span><br><span class="line">            match[x] = y</span><br><span class="line">            match[y] = x</span><br><span class="line"></span><br><span class="line">        unhappyCount = 0</span><br><span class="line">        for x in range(n):</span><br><span class="line">            y = match[x]</span><br><span class="line">            index = order[x][y]</span><br><span class="line">            for i in range(index):</span><br><span class="line">                u = preferences[x][i]</span><br><span class="line">                v = match[u]</span><br><span class="line">                if order[u][x] &lt; order[u][v]:</span><br><span class="line">                    unhappyCount += 1</span><br><span class="line">                    break</span><br><span class="line">        </span><br><span class="line">        return unhappyCount</span><br><span class="line"></span><br><span class="line"># 作者：LeetCode-Solution</span><br><span class="line"># 链接：https://leetcode-cn.com/problems/count-unhappy-friends/solution/tong-ji-bu-kai-xin-de-peng-you-by-leetcode-solutio/</span><br><span class="line"># 来源：力扣（LeetCode）</span><br><span class="line"># 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/fXcVKK"><img src="https://z3.ax1x.com/2021/08/20/fXcVKK.jpg" alt="提交记录.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Leetcode中等</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_1221. 分割平衡字符串</title>
    <url>/2021/09/07/Leetcode-1221-%E5%88%86%E5%89%B2%E5%B9%B3%E8%A1%A1%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1221. 分割平衡字符串<br>难度：简单</p>
<p>在一个 <strong>平衡字符串</strong> 中，<code>'L'</code> 和 <code>'R'</code> 字符的数量是相同的。</p>

<p>给你一个平衡字符串&nbsp;<code>s</code>，请你将它分割成尽可能多的平衡字符串。</p>

<p><strong>注意：</strong>分割得到的每个字符串都必须是平衡字符串。</p>

<p>返回可以通过分割得到的平衡字符串的 <strong>最大数量</strong> <strong>。</strong></p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>s = "RLRRLLRLRL"
<strong>输出：</strong>4
<strong>解释：</strong>s 可以分割为 "RL"、"RRLL"、"RL"、"RL" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>s = "RLLLLRRRLR"
<strong>输出：</strong>3
<strong>解释：</strong>s 可以分割为 "RL"、"LLLRRR"、"LR" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>s = "LLLLRRRR"
<strong>输出：</strong>1
<strong>解释：</strong>s 只能保持原样 "LLLLRRRR".
</pre>

<p><strong>示例 4：</strong></p>

<pre><strong>输入：</strong>s = "RLRRRLLRLL"
<strong>输出：</strong>2
<strong>解释：</strong>s 可以分割为 "RL"、"RRRLLRLL" ，每个子字符串中都包含相同数量的 'L' 和 'R' 。
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= s.length &lt;= 1000</code></li>
    <li><code>s[i] = 'L' 或 'R'</code></li>
    <li><code>s</code> 是一个 <strong>平衡</strong> 字符串</li>
</ul>


<h3 id="方法一：-贪心"><a href="#方法一：-贪心" class="headerlink" title="方法一： 贪心"></a>方法一： 贪心</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balancedStringSplit</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        l, r, ans = <span class="number">0</span> ,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                l += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;R&#x27;</span>:</span><br><span class="line">                r += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l == r:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balancedStringSplit</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans, d = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> ch == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                d += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                d -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> d == <span class="number">0</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https://leetcode-cn.com/problems/split-a-string-<span class="keyword">in</span>-balanced-strings/solution/fen-ge-ping-heng-zi-fu-chuan-by-leetcode-7y8u/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/hoq3tI"><img src="https://z3.ax1x.com/2021/09/07/hoq3tI.jpg" alt="平衡字符串提交记录.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode简单</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>Cpp OpenMP</title>
    <url>/2022/04/28/Cpp-OpenMP/</url>
    <content><![CDATA[<p>很少截图，因为懒。</p>
<h3 id="hello-world"><a href="#hello-world" class="headerlink" title="hello world"></a>hello world</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel</span></span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译：<br><code>g++ -o2 -std=c++14 -fopenmp hellp_world.cpp -o hello_world</code><br><code>-02</code>   哦二不是零二：<br>    -O0<br>    -O1<br>    -O2<br>    -O3<br>    编译器的优化选项的4个级别，-O0表示没有优化,-O1为缺省值，-O3优化级别最高<br>运行：</p>
<ul>
<li>`./hello_world’</li>
<li><code>OPM_NUM_THREADS=2 ./hellp_world</code>设置环境变量，控制可以使用的线程数。<br>结果：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220428/Parallel_omp_helloworld.1u4hcpa3c280.webp" alt="Parallel_omp_helloworld"></li>
</ul>
<h3 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h3><p>需要<code>#include &lt;omp.h&gt;</code></p>
<p><code>#pragma omp parallel  num_threads(4)</code>设置生成的线程数量，这个应该不算库函数。<br>| 函数 |功能和作用  | 示例 |<br>| ——- | ——- | —— |<br>|<code>omp_get_thread_num()</code> | 获得当前这个线程的编号id | <code>int i = omp_get_thread_num();</code> |<br>|<code>omp_get_num_threads()</code> | 获得当前线程总数 | <code>int n = omp_get_num_threads();</code>|<br>| <code>omp_set_num_threads();</code>  | 在串行部分设置线程个数，优先级比环境变量高  |<code>omp_set_num_threads(6);</code> |<br>|<code>omp_get_max_threads()</code>   | 这是什么东西？？  | .. |</p>
<p>线程数设置的优先级：指导语句的num_threads(),库函数omp_set_num_threads();环境变量；编译器默认。</p>
<h3 id="parallel-for"><a href="#parallel-for" class="headerlink" title="parallel for"></a>parallel for</h3><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/parallel_for.1hx1c6guutkw.webp" alt="parallel_for"></p>
<h3 id="隐含同步"><a href="#隐含同步" class="headerlink" title="隐含同步"></a>隐含同步</h3><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/隐含同步.1cq1y0wi7iu8.webp" alt="隐含同步"><br>将<code>#pragra omp parallel for</code>写成<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#pragra omp parallel</span></span><br><span class="line">&#123;</span><br><span class="line">	#<span class="meta">#pragra omp for</span></span><br><span class="line">	...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前后数据、工作有关系的情况下。比如锁，数据的运算一定是在初始化之后，那之前参与初始化的线程肯定要同时结束才行。<br>在一些不需要隐含同步的地方，可以用<code>nowait</code>，即<code>#pragma omp for nowait</code>。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/nowait.67awv6v73100.webp" alt="nowait"></p>
<h3 id="变量共享和私有化"><a href="#变量共享和私有化" class="headerlink" title="变量共享和私有化"></a>变量共享和私有化</h3><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*变量共享和私有化*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for num_threads(4)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;id:%d %d %d\n&quot;</span>, <span class="built_in">omp_get_thread_num</span>(), i, j);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/共享变量和私有化1.65ux9gcq7i80.webp" alt="共享变量和私有化1"></p>
<p>将i和j放在外面<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for num_threads(4)</span></span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;id:%d %d %d\n&quot;</span>, <span class="built_in">omp_get_thread_num</span>(), i, j);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>结果：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/共享变量和私有化2.zuz7962rsio.webp" alt="共享变量和私有化2"></p>
<p>加入<code>private</code><br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel for  private(j)  num_threads(4)</span></span><br><span class="line">	<span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		<span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;id:%d %d %d\n&quot;</span>, <span class="built_in">omp_get_thread_num</span>(), i, j);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>之前在循环外先声明，那不同线程循环变量就会访问同一块内存，这样就会冲突。加入<code>private(j)</code>之后就会在每个线程生成一个副本，这样就正常了。</p>
<h4 id="firstprivate"><a href="#firstprivate" class="headerlink" title="firstprivate"></a>firstprivate</h4><p>使用<code>firstprivate(j)</code>不仅有全局变量的副本，而且有他的值，在并行部分里对他进行修改不会影响全局变量的值。</p>
<h4 id="捕捉私有变量"><a href="#捕捉私有变量" class="headerlink" title="捕捉私有变量"></a>捕捉私有变量</h4><p>用数组的方式<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> num = <span class="built_in">omp_get_max_threads</span>();</span><br><span class="line">	<span class="type">int</span>* aux = <span class="keyword">new</span> <span class="type">int</span>[num];</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">	<span class="meta">#<span class="keyword">pragma</span> omp parallel firstprivate(i) </span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">const</span> <span class="type">int</span> j = <span class="built_in">omp_get_thread_num</span>();</span><br><span class="line">		i += j;</span><br><span class="line">		aux[j] = i;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;aux[% d] = % d\n&quot;</span>, i, aux[i]);</span><br><span class="line">	<span class="keyword">delete</span>[] aux;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>运行结果<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/捕捉私有变量1.16ct3ecyuee.webp" alt="捕捉私有变量1"></p>
<h4 id="lastprivate"><a href="#lastprivate" class="headerlink" title="lastprivate"></a>lastprivate</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for  lastprivate(i)  num_threads(4) </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		i = j;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以返回变量的值。<br>输出结果是3.</p>
<p>改为：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for  lastprivate(i)  num_threads(4) </span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		i = j + <span class="built_in">omp_get_thread_num</span>();</span><br></pre></td></tr></table></figure><br>输出结果是6.</p>
<h4 id="DMV"><a href="#DMV" class="headerlink" title="DMV"></a>DMV</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hpc_helpers contains the TIMERSTART and TIMERSTOP macros</span></span><br><span class="line"><span class="comment">// and the no_init_t template that disables implicit type</span></span><br><span class="line"><span class="comment">// initialization</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../include/hpc_helpers.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> <span class="type">value_t</span>,</span><br><span class="line">          <span class="keyword">typename</span> <span class="type">index_t</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(std::vector&lt;<span class="type">value_t</span>&gt;&amp; A,</span></span></span><br><span class="line"><span class="params"><span class="function">          std::vector&lt;<span class="type">value_t</span>&gt;&amp; x,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">index_t</span> m,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">index_t</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">index_t</span> row = <span class="number">0</span>; row &lt; m; row++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">index_t</span> col = <span class="number">0</span>; col &lt; n; col++)</span><br><span class="line">            A[row*n+col] = row &gt;= col ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">index_t</span> col = <span class="number">0</span>; col &lt; m; col++)</span><br><span class="line">        x[col] = col;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> <span class="type">value_t</span>,</span><br><span class="line">          <span class="keyword">typename</span> <span class="type">index_t</span>&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mult</span><span class="params">(std::vector&lt;<span class="type">value_t</span>&gt;&amp; A,</span></span></span><br><span class="line"><span class="params"><span class="function">          std::vector&lt;<span class="type">value_t</span>&gt;&amp; x,</span></span></span><br><span class="line"><span class="params"><span class="function">          std::vector&lt;<span class="type">value_t</span>&gt;&amp; b,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">index_t</span> m,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">index_t</span> n,</span></span></span><br><span class="line"><span class="params"><span class="function">          <span class="type">bool</span> parallel)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">pragma</span> omp parallel for <span class="keyword">if</span>(parallel)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">index_t</span> row = <span class="number">0</span>; row &lt; m; row++) &#123;</span><br><span class="line">        <span class="type">value_t</span> accum = <span class="built_in">value_t</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">index_t</span> col = <span class="number">0</span>; col &lt; n; col++)</span><br><span class="line">            accum += A[row*n+col]*x[col];</span><br><span class="line">        b[row] = accum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> n = <span class="number">1UL</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">uint64_t</span> m = <span class="number">1UL</span> &lt;&lt; <span class="number">15</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TIMERSTART</span>(overall)</span><br><span class="line">    <span class="comment">// memory allocation for the three vectors x, y, and z</span></span><br><span class="line">    <span class="comment">// with the no_init_t template as a wrapper for the actual type</span></span><br><span class="line">    <span class="built_in">TIMERSTART</span>(alloc)</span><br><span class="line">    std::vector&lt;<span class="type">no_init_t</span>&lt;<span class="type">uint64_t</span>&gt;&gt; <span class="built_in">A</span>(m*n);</span><br><span class="line">    std::vector&lt;<span class="type">no_init_t</span>&lt;<span class="type">uint64_t</span>&gt;&gt; <span class="built_in">x</span>(n);</span><br><span class="line">    std::vector&lt;<span class="type">no_init_t</span>&lt;<span class="type">uint64_t</span>&gt;&gt; <span class="built_in">b</span>(m);</span><br><span class="line">    <span class="built_in">TIMERSTOP</span>(alloc)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// manually initialize the input matrix A and vector x</span></span><br><span class="line">    <span class="built_in">TIMERSTART</span>(init)</span><br><span class="line">    <span class="built_in">init</span>(A, x, m, n);</span><br><span class="line">    <span class="built_in">TIMERSTOP</span>(init)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// compute A * x = b sequentially three times</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint64_t</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">        <span class="built_in">TIMERSTART</span>(mult_seq)</span><br><span class="line">        <span class="built_in">mult</span>(A, x, b, m, n, <span class="literal">false</span>);</span><br><span class="line">        <span class="built_in">TIMERSTOP</span>(mult_seq)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// compute A * x = b in parallel three times</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint64_t</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; k++) &#123;</span><br><span class="line">        <span class="built_in">TIMERSTART</span>(mult_par)</span><br><span class="line">        <span class="built_in">mult</span>(A, x, b, m, n, <span class="literal">true</span>);</span><br><span class="line">        <span class="built_in">TIMERSTOP</span>(mult_par)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">TIMERSTOP</span>(overall)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if (last) result is correct</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">uint64_t</span> index = <span class="number">0</span>; index &lt; m; index++)</span><br><span class="line">        <span class="keyword">if</span> (b[index] != index*(index+<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line">            std::cout &lt;&lt; <span class="string">&quot;error at position &quot;</span> &lt;&lt; index </span><br><span class="line">                      &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; b[index] &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：<br>自己电脑：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/捕捉私有变量1.16ct3ecyuee.webp" alt="捕捉私有变量1"><br>学校服务器：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/omp_DMV_学校服务器.7a3buzg96us0.webp" alt="omp_DMV_学校服务器"><br>看来是x64不行。我改回了x86，然后量改成了13次方，结果是这样：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/omp_DMV_自己电脑x86.18b18xc1glek.webp" alt="omp_DMV_自己电脑x86"></p>
<h4 id="collapse"><a href="#collapse" class="headerlink" title="collapse"></a>collapse</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for collapse(2) <span class="keyword">if</span>(parallel)</span></span><br><span class="line">   <span class="keyword">for</span> (<span class="type">index_t</span> i = <span class="number">0</span>; i &lt; num_test; i++)</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">index_t</span> j = <span class="number">0</span>; j &lt; num_train; j++) &#123;</span><br><span class="line">           <span class="type">value_t</span> accum = <span class="built_in">value_t</span>(<span class="number">0</span>);</span><br><span class="line">           <span class="comment">// fine-grained parallelism</span></span><br><span class="line">           <span class="comment">// #pragma omp parallel for reduction(+:accum) </span></span><br><span class="line">           <span class="keyword">for</span> (<span class="type">index_t</span> k = <span class="number">0</span>; k &lt; num_features; k++) &#123;</span><br><span class="line">               <span class="type">const</span> <span class="type">value_t</span> residue = test [i*num_features+k]</span><br><span class="line">                                     - train[j*num_features+k];</span><br><span class="line">               accum += residue*residue;</span><br><span class="line">           &#125;</span><br><span class="line">           delta[i*num_train+j] = accum;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<p>collapse折叠。因为这里钱两层循环紧挨着，所以可以“折叠起来”，超索引地给不同的线程分配任务。<br>有的时候，外层循环不多，但可用的线程非常你多的时候，可以用这种方法提高资源利用率。（解决负载不均衡。）</p>
<h4 id="critical"><a href="#critical" class="headerlink" title="critical"></a>critical</h4><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220502/omp_critical.2j60nwrehwi0.webp" alt="omp_critical"></p>
<p>就相当于锁。</p>
<h4 id="1NN（最近邻）"><a href="#1NN（最近邻）" class="headerlink" title="1NN（最近邻）"></a>1NN（最近邻）</h4><h3 id="不平衡调度"><a href="#不平衡调度" class="headerlink" title="不平衡调度"></a>不平衡调度</h3><p>是来研究<code>parallel for</code>怎么调度的。<br>格式：<code>schedule(type[,size])</code>，<code>type</code>可选有<code>static , dynamic , guided ,runtime</code>，<code>size</code>是个整数，前三种的时候，可写可不写，<code>rumtime</code>无需写很具环境变量来。</p>
<h4 id="static"><a href="#static" class="headerlink" title="static"></a>static</h4><p>没有<code>schedule</code>，默认是<code>static</code>。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;omp.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel  for schedule(static) num_threads(4)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;i=%d,thread_id=%d\n&quot;</span>, i, <span class="built_in">omp_get_thread_num</span>());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果带了参数<code>size</code>，那它就会按线程编号0、1、2..的顺序，每个线程分配size个任务，一轮不够重头再来。如果不带参数，那它会让每个线程的数量均衡，比如10个循环4个线程的情况，4个县城依次是3、3、2、2。感觉它是算好怎样分配每个线程任务均衡，然后分配那么多连续的任务。<br>如果size为1，那就像之前的循环调度；不设参数有点类似于区块分发；参数大于1，就有点类似于块循环了。</p>
<h4 id="dynamic"><a href="#dynamic" class="headerlink" title="dynamic"></a>dynamic</h4><p>这种方式运行多次后给我的感觉是：</p>
<ul>
<li>不带参数和参数为1效果一样；</li>
<li>带了参数之后，按任意编号顺序给每个线程分配<code>size</code>多;</li>
<li>如果一次之后还有没分配完的，那就都给0号线程。</li>
<li>但看mnist的运行结果和老师讲解，可能是谁闲下来谁上。<h4 id="guided"><a href="#guided" class="headerlink" title="guided"></a>guided</h4><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220503/omp_guided.yhg7r4qu768.webp" alt="omp_guided"><h4 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h4><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220503/omp_runtime.70mqq8vlqv80.webp" alt="omp_runtime"><h4 id="auto"><a href="#auto" class="headerlink" title="auto"></a>auto</h4>还有一种auto，由编译器和系统一起决定的。</li>
</ul>
<h3 id="归约"><a href="#归约" class="headerlink" title="归约"></a>归约</h3><p>竞争条件。容易理解。不同的线程访问在并行区域外声明的变量并修改。<br>解决方案一：critical<br>前面有提到，就相当于锁。<br>解决方案二：归约reduction<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220503/omp_reduction_1_min.40t3eh1ejl80.webp" alt="omp_reduction_1_min"><br>x结果是4。<br>分析：</p>
<ol>
<li>首先给每个线程分配任务，在这里因为没有schedule子句，所以按静态调度分，0号线程分前5个，1号线程分后五个；</li>
<li>每个线程声明一个私有化变量，叫中性变量，并赋予初值，因为这里是求最小值，所以赋值为无符号整型的最大值（64个1）；</li>
<li>对中性变量做5次加1，得到4；</li>
<li>两个线程的结果和x的初始值取最小值返回给x。</li>
</ol>
<p>reduction的基本操作：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220503/omp_redution_基本操作.3d3etew2wac0.webp" alt="omp_redution_基本操作"></p>
<h4 id="归约的数学性质或自定义归约的要求："><a href="#归约的数学性质或自定义归约的要求：" class="headerlink" title="归约的数学性质或自定义归约的要求："></a>归约的数学性质或自定义归约的要求：</h4><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220503/omp_reduction_性质或要求.37br1an6qhc0.webp" alt="omp_reduction_性质或要求"><br>结合律、交换律、与中性元素运算后还是副本的值。（a，b，c是副本的值）</p>
<h4 id="自定义归约"><a href="#自定义归约" class="headerlink" title="自定义归约"></a>自定义归约</h4><p>结构：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp declare reduction</span></span><br><span class="line">	(indentifier:typelist:combiner)</span><br><span class="line">		[<span class="built_in">initializer</span>(initializer-expression)]</span><br></pre></td></tr></table></figure><br>可以理解为：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp declare（自定义的） reduction</span></span><br><span class="line">	(自定义归约名字:类型:参数（或简单的表达式）)</span><br><span class="line">		[初始化初值]</span><br></pre></td></tr></table></figure></p>
<p>一个例子：<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最大值返回函数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mymax</span><span class="params">(<span class="type">int</span> r, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> r &gt; n ? r : n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> num = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span> data[num];</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">		data[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp declare reduction \</span></span><br><span class="line"><span class="meta">(rwz:int:omp_out=mymax(omp_out,omp_in))\</span></span><br><span class="line"><span class="meta">initializer(omp_priv=INT_MIN)</span></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> m = INT_MIN;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for reduction(rwz:m)</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		m = <span class="built_in">mymax</span>(m, data[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	std::cout &lt;&lt; <span class="string">&quot;max=&quot;</span> &lt;&lt; m &lt;&lt; std::endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><br>结果是99</p>
<p>绝对值最大<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220503/omp_自定义归约绝对值最大.4vocxlaacja0.webp" alt="omp_自定义归约绝对值最大"></p>
<h3 id="SIMD向量化"><a href="#SIMD向量化" class="headerlink" title="SIMD向量化"></a>SIMD向量化</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp simd</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> omp parallel for simd</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>parallel</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-1706-球会落何处</title>
    <url>/2022/02/24/Leetcode-1706-%E7%90%83%E4%BC%9A%E8%90%BD%E4%BD%95%E5%A4%84/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1706. 球会落何处<br>难诉：中等</p>
<p>用一个大小为 <code>m x n</code> 的二维网格 <code>grid</code> 表示一个箱子。你有 <code>n</code> 颗球。箱子的顶部和底部都是开着的。</p>

<p>箱子中的每个单元格都有一个对角线挡板，跨过单元格的两个角，可以将球导向左侧或者右侧。</p>

<ul>
    <li>将球导向右侧的挡板跨过左上角和右下角，在网格中用 <code>1</code> 表示。</li>
    <li>将球导向左侧的挡板跨过右上角和左下角，在网格中用 <code>-1</code> 表示。</li>
</ul>

<p>在箱子每一列的顶端各放一颗球。每颗球都可能卡在箱子里或从底部掉出来。如果球恰好卡在两块挡板之间的 "V" 形图案，或者被一块挡导向到箱子的任意一侧边上，就会卡住。</p>

<p>返回一个大小为 <code>n</code> 的数组 <code>answer</code> ，其中 <code>answer[i]</code> 是球放在顶部的第 <code>i</code> 列后从底部掉出来的那一列对应的下标，如果球卡在盒子里，则返回 <code>-1</code> 。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<p><strong><img style="width: 500px; height: 385px;" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/12/26/ball.jpg" alt></strong></p>

<pre><strong>输入：</strong>grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
<strong>输出：</strong>[1,-1,-1,-1,-1]
<strong>解释：</strong>示例如图：
b0 球开始放在第 0 列上，最终从箱子底部第 1 列掉出。
b1 球开始放在第 1 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
b2 球开始放在第 2 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
b3 球开始放在第 3 列上，会卡在第 2、3 列和第 0 行之间的 "V" 形里。
b4 球开始放在第 4 列上，会卡在第 2、3 列和第 1 行之间的 "V" 形里。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>grid = [[-1]]
<strong>输出：</strong>[-1]
<strong>解释：</strong>球被卡在箱子左侧边上。
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
<strong>输出：</strong>[0,1,2,3,4,-1]
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>m == grid.length</code></li>
    <li><code>n == grid[i].length</code></li>
    <li><code>1 &lt;= m, n &lt;= 100</code></li>
    <li><code>grid[i][j]</code> 为 <code>1</code> 或 <code>-1</code></li>
</ul>

<h3 id="方法一：-模拟"><a href="#方法一：-模拟" class="headerlink" title="方法一： 模拟"></a>方法一： 模拟</h3><p>虽然是中等难度的题，但看完题后就马上想到了可以用DFS，不过再想想发现不是DFS而是模拟！<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBall</span>(<span class="params">self, grid</span>):</span><br><span class="line">        m, n = <span class="built_in">len</span>(grid), <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">DFS</span>(<span class="params">row, col</span>):</span><br><span class="line">            <span class="keyword">if</span> row == m :</span><br><span class="line">                <span class="keyword">return</span> col</span><br><span class="line">            <span class="keyword">if</span> grid[row][col] == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> col == n - <span class="number">1</span> <span class="keyword">or</span> grid[row][col + <span class="number">1</span>] == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid[row][col + <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> DFS(row + <span class="number">1</span>, col + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> grid[row][col] == -<span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> col == <span class="number">0</span> <span class="keyword">or</span> grid[row][col - <span class="number">1</span>] == <span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> grid[row][col - <span class="number">1</span>] == -<span class="number">1</span>:</span><br><span class="line">                    <span class="keyword">return</span> DFS(row + <span class="number">1</span>, col - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> [DFS(<span class="number">0</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br></pre></td></tr></table></figure></p>
<p>官解更简洁一些：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">findBall</span>(<span class="params">self, grid: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        n = <span class="built_in">len</span>(grid[<span class="number">0</span>])</span><br><span class="line">        ans = [-<span class="number">1</span>] * n</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            col = j  <span class="comment"># 球的初始列</span></span><br><span class="line">            <span class="keyword">for</span> row <span class="keyword">in</span> grid:</span><br><span class="line">                <span class="built_in">dir</span> = row[col]</span><br><span class="line">                col += <span class="built_in">dir</span>  <span class="comment"># 移动球</span></span><br><span class="line">                <span class="keyword">if</span> col &lt; <span class="number">0</span> <span class="keyword">or</span> col == n <span class="keyword">or</span> row[col] != <span class="built_in">dir</span>:  <span class="comment"># 到达侧边或 V 形</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:  <span class="comment"># 成功到达底部</span></span><br><span class="line">                ans[j] = col</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者：LeetCode-Solution</span></span><br><span class="line"><span class="comment"># 链接：https://leetcode-cn.com/problems/where-will-the-ball-fall/solution/qiu-hui-luo-he-chu-by-leetcode-solution-xqop/</span></span><br><span class="line"><span class="comment"># 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"># 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Leetcode中等</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_1646. 获取生成数组中的最大值</title>
    <url>/2021/08/23/Leetcode-1646-%E8%8E%B7%E5%8F%96%E7%94%9F%E6%88%90%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1646. 获取生成数组中的最大值<br>难度：简单</p>
<p>给你一个整数 <code>n</code> 。按下述规则生成一个长度为 <code>n + 1</code> 的数组 <code>nums</code> ：</p>

<ul>
    <li><code>nums[0] = 0</code></li>
    <li><code>nums[1] = 1</code></li>
    <li>当 <code>2 &lt;= 2 * i &lt;= n</code> 时，<code>nums[2 * i] = nums[i]</code></li>
    <li>当 <code>2 &lt;= 2 * i + 1 &lt;= n</code> 时，<code>nums[2 * i + 1] = nums[i] + nums[i + 1]</code></li>
</ul>

<p>返回生成数组 <code>nums</code> 中的 <strong>最大</strong> 值。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>n = 7
<strong>输出：</strong>3
<strong>解释：</strong>根据规则：
  nums[0] = 0
  nums[1] = 1
  nums[(1 * 2) = 2] = nums[1] = 1
  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
  nums[(2 * 2) = 4] = nums[2] = 1
  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
  nums[(3 * 2) = 6] = nums[3] = 2
  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
因此，nums = [0,1,1,2,1,3,2,3]，最大值 3
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>n = 2
<strong>输出：</strong>1
<strong>解释：</strong>根据规则，nums[0]、nums[1] 和 nums[2] 之中的最大值是 1
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>n = 3
<strong>输出：</strong>2
<strong>解释：</strong>根据规则，nums[0]、nums[1]、nums[2] 和 nums[3] 之中的最大值是 2
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>0 &lt;= n &lt;= 100</code></li>
</ul>
<div class="notranslate"><p>给你一个整数 <code>n</code> 。按下述规则生成一个长度为 <code>n + 1</code> 的数组 <code>nums</code> ：</p>

<ul>
    <li><code>nums[0] = 0</code></li>
    <li><code>nums[1] = 1</code></li>
    <li>当 <code>2 &lt;= 2 * i &lt;= n</code> 时，<code>nums[2 * i] = nums[i]</code></li>
    <li>当 <code>2 &lt;= 2 * i + 1 &lt;= n</code> 时，<code>nums[2 * i + 1] = nums[i] + nums[i + 1]</code></li>
</ul>

<p>返回生成数组 <code>nums</code> 中的 <strong>最大</strong> 值。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>n = 7
<strong>输出：</strong>3
<strong>解释：</strong>根据规则：
  nums[0] = 0
  nums[1] = 1
  nums[(1 * 2) = 2] = nums[1] = 1
  nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2
  nums[(2 * 2) = 4] = nums[2] = 1
  nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3
  nums[(3 * 2) = 6] = nums[3] = 2
  nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3
因此，nums = [0,1,1,2,1,3,2,3]，最大值 3
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>n = 2
<strong>输出：</strong>1
<strong>解释：</strong>根据规则，nums[0]、nums[1] 和 nums[2] 之中的最大值是 1
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>n = 3
<strong>输出：</strong>2
<strong>解释：</strong>根据规则，nums[0]、nums[1]、nums[2] 和 nums[3] 之中的最大值是 2
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>0 &lt;= n &lt;= 100</code></li>
</ul>


<h3 id="方法：-模拟"><a href="#方法：-模拟" class="headerlink" title="方法： 模拟"></a>方法： 模拟</h3><p>代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">getMaximumGenerated</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    nums = [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    nums[<span class="number">0</span>], nums[<span class="number">1</span>] = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> i*<span class="number">2</span>+<span class="number">1</span> &lt;= n:</span><br><span class="line">        nums[i*<span class="number">2</span>] = nums[i]</span><br><span class="line">        nums[i*<span class="number">2</span>+<span class="number">1</span>] = nums[i]+nums[i+<span class="number">1</span>]</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br></pre></td></tr></table></figure><br>官方处理奇偶两种情况的方法挺好的。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getMaximumGenerated</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">if</span> n == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        nums = [<span class="number">0</span>] * (n + <span class="number">1</span>)</span><br><span class="line">        nums[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>):</span><br><span class="line">            nums[i] = nums[i // <span class="number">2</span>] + i % <span class="number">2</span> * nums[i // <span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者：LeetCode-Solution</span></span><br><span class="line"><span class="comment"># 链接：https://leetcode-cn.com/problems/get-maximum-in-generated-array/solution/huo-qu-sheng-cheng-shu-zu-zhong-de-zui-d-0z2l/</span></span><br><span class="line"><span class="comment"># 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"># 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/h95spt"><img src="https://z3.ax1x.com/2021/08/23/h95spt.jpg" alt="获取生成数组中的最大值提交记录.jpg"></a></p>
</div>]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Leetcode简单</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-1719-重构一棵树的方案数</title>
    <url>/2022/02/20/Leetcode-1719-%E9%87%8D%E6%9E%84%E4%B8%80%E6%A3%B5%E6%A0%91%E7%9A%84%E6%96%B9%E6%A1%88%E6%95%B0/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>1719. 重构一棵树的方案数<br>难度：困难</p>
<p>给你一个数组&nbsp;<code>pairs</code> ，其中&nbsp;<code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;，并且满足：</p>

<ul>
    <li><code>pairs</code>&nbsp;中没有重复元素</li>
    <li><code>x<sub>i</sub> &lt; y<sub>i</sub></code></li>
</ul>


<p>令&nbsp;<code>ways</code>&nbsp;为满足下面条件的有根树的方案数：</p>

<ul>
    <li>树所包含的所有节点值都在 <code>pairs</code>&nbsp;中。</li>
    <li>一个数对&nbsp;<code>[x<sub>i</sub>, y<sub>i</sub>]</code> 出现在&nbsp;<code>pairs</code>&nbsp;中&nbsp;<strong>当且仅当</strong><strong>&nbsp;</strong><code>x<sub>i</sub></code>&nbsp;是&nbsp;<code>y<sub>i</sub></code>&nbsp;的祖先或者&nbsp;<code>y<sub>i</sub></code>&nbsp;是&nbsp;<code>x<sub>i</sub></code><sub>&nbsp;</sub>的祖先。</li>
    <li><strong>注意：</strong>构造出来的树不一定是二叉树。</li>
</ul>


<p>两棵树被视为不同的方案当存在至少一个节点在两棵树中有不同的父节点。</p>

<p>请你返回：</p>

<ul>
    <li>如果&nbsp;<code>ways == 0</code>&nbsp;，返回&nbsp;<code>0</code>&nbsp;。</li>
    <li>如果&nbsp;<code>ways == 1</code>&nbsp;，返回 <code>1</code>&nbsp;。</li>
    <li>如果&nbsp;<code>ways &gt; 1</code>&nbsp;，返回&nbsp;<code>2</code>&nbsp;。</li>
</ul>


<p>一棵 <strong>有根树</strong>&nbsp;指的是只有一个根节点的树，所有边都是从根往外的方向。</p>

<p>我们称从根到一个节点路径上的任意一个节点（除去节点本身）都是该节点的 <strong>祖先</strong>&nbsp;。根节点没有祖先。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<p><img style="width: 208px; height: 221px;" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/09/trees2.png"></p>
<pre><b>输入：</b>pairs = [[1,2],[2,3]]
<b>输出：</b>1
<b>解释：</b>如上图所示，有且只有一个符合规定的有根树。
</pre>


<p><strong>示例 2：</strong></p>

<p><img style="width: 234px; height: 241px;" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/09/tree.png" alt></p>
<pre><b>输入：</b>pairs = [[1,2],[2,3],[1,3]]
<b>输出：</b>2
<b>解释：</b>有多个符合规定的有根树，其中三个如上图所示。
</pre>


<p><strong>示例 3：</strong></p>

<pre><b>输入：</b>pairs = [[1,2],[2,3],[2,4],[1,5]]
<b>输出：</b>0
<b>解释：</b>没有符合规定的有根树。</pre>


<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= pairs.length &lt;= 10<sup>5</sup></code></li>
    <li><code>1 &lt;= x<sub>i </sub>&lt; y<sub>i</sub> &lt;= 500</code></li>
    <li><code>pairs</code>&nbsp;中的元素互不相同。</li>
</ul>



<h3 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h3><p>一开始一直看不懂题目，不明白示例三为什么不行，认为示例三很容易就能画出一棵树来。反复读题之后才意识到题目中“树所包含的所有节点值都在 <code>pairs</code>&nbsp;中。”的意思，就是说构造出来的树的所有信息都要再<code>pairs</code>中体现，也明白了为什么要那样输出，只要找到符合条件的2个就能输出了。<br>于是看示例三就能想到：如果一个节点在一个数对中做了孩子节点，那它在其他数对中只能作为双亲节点，比如示例三中的<code>2</code>节点。<br>不对不对，;<code>pairs[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&amp;nbsp中，<code>x<sub>i</sub></code>和<code>y<sub>i</sub></code>之间的关系是祖先和后代的关系，而不是双亲孩子的关系，所以这不能用来解题。<br>那也就是说所有祖先后代的关系在<code>pairs</code>当中都有体现，那如果存在根节点的话，每一组数对当中都会有这个根节点咯？——找到根节点了！<br>呀，不是在每个数对中都出现，就是：    </p>
<pre><code>d = defaultdict(set)
for x,y in pairs:
    d[x].add(y)
    d[y].add(x)
</code></pre><p>这样<code>d[根节点]</code>就包含了除自己以外所有的节点，而<code>d[x]</code>就是包含<code>x</code>的所有祖先和后代了。<br>然 后呢？官解是直接模拟，模拟啥呀？<br><code>x<sub>i</sub> &lt; y<sub>i</sub></code>这个条件有什么用吗？应该没有吧，只是一种表示而已吧。<br>能不能再统计一下<code>d[x]</code>的个数，然后用集合的相关运算划分出不同的子树，然后……<br>哎，大约只能想到这了，看官解吧。<br>哎，官解前面设的东西和我的想法好像哦。<br>看了一圈题解，字面上的也基本上都懂了，但离理解还是差点。<br>自己写了一个。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def checkWays(self, pairs) -&gt; int:</span><br><span class="line">        adj = defaultdict(set)</span><br><span class="line"></span><br><span class="line">        for x, y in pairs:</span><br><span class="line">            adj[x].add(y)</span><br><span class="line">            adj[y].add(x)</span><br><span class="line">        for x in adj:</span><br><span class="line">            adj[x].add(x)</span><br><span class="line">        for i in adj:</span><br><span class="line">            print(i,adj[i])</span><br><span class="line">        adj = sorted(adj.values(), key=lambda item: len(item))</span><br><span class="line">        n = len(adj)</span><br><span class="line">        if len(adj[-1]) &lt; n:</span><br><span class="line">            return 0</span><br><span class="line">        ans = 1</span><br><span class="line">        print(adj)</span><br><span class="line">        for i in range(n - 1):</span><br><span class="line">            for j in range(i + 1, n):</span><br><span class="line">                if adj[i].issubset(adj[j]):</span><br><span class="line">                    if ans != 2 and adj[i] == adj[j]:</span><br><span class="line">                        ans = 2</span><br><span class="line">                    break</span><br><span class="line">            else:</span><br><span class="line">                return 0</span><br><span class="line">        return ans</span><br></pre></td></tr></table></figure>
<p>将某个节点的所有祖先和所有后代还有它自己装进一个集合里，然后以集合大小为排序依据进行排序。从小的开始，找到包含这个小集合的最小的大集合，那个就是小集合对应的节点的父节点了。然后判断如果这两集合一样大，那就说明可以交换。<br>这样是错误的，问题在于，所有集合都是根节点的那个集合的子集，那所有节点都能认根节点作为它的直接父节点。完了。<br>看官解代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> maxsize</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkWays</span>(<span class="params">self, pairs</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        adj = defaultdict(<span class="built_in">set</span>)</span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> pairs:</span><br><span class="line">            adj[x].add(y)</span><br><span class="line">            adj[y].add(x)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 检测是否存在根节点</span></span><br><span class="line">        root = <span class="built_in">next</span>((node <span class="keyword">for</span> node, neighbours <span class="keyword">in</span> adj.items() <span class="keyword">if</span> <span class="built_in">len</span>(neighbours) == <span class="built_in">len</span>(adj) - <span class="number">1</span>), -<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># # 没有根节点</span></span><br><span class="line">        <span class="keyword">if</span> root == -<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        ans = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> node, neighbours <span class="keyword">in</span> adj.items():</span><br><span class="line">            <span class="keyword">if</span> node == root:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># # 遍历过程当中当前节点的Degree</span></span><br><span class="line">            currDegree = <span class="built_in">len</span>(neighbours)</span><br><span class="line">            parent = -<span class="number">1</span></span><br><span class="line">            parentDegree = maxsize</span><br><span class="line">            <span class="comment"># 根据 degree 的大小找到 node 的父节点 parent</span></span><br><span class="line">            <span class="comment"># # 遍历 adj[node] ,就是和 node 有关系的所有节点</span></span><br><span class="line">            <span class="keyword">for</span> neighbour <span class="keyword">in</span> neighbours:</span><br><span class="line">                <span class="comment"># # 找到 node 的可能父节点—— parentDegree &gt;= currDegree</span></span><br><span class="line">                <span class="keyword">if</span> currDegree &lt;= <span class="built_in">len</span>(adj[neighbour]) &lt; parentDegree:</span><br><span class="line">                    parent = neighbour</span><br><span class="line">                    parentDegree = <span class="built_in">len</span>(adj[neighbour])</span><br><span class="line">            <span class="comment"># 检测 neighbours 是否为 adj[parent] 的子集</span></span><br><span class="line">            <span class="comment"># # if parent == -1 or not neighbours.issubset(adj[parent]):</span></span><br><span class="line">            <span class="comment"># # ??</span></span><br><span class="line">            <span class="keyword">if</span> parent == -<span class="number">1</span> <span class="keyword">or</span> <span class="built_in">any</span>(neighbour != parent <span class="keyword">and</span> neighbour <span class="keyword">not</span> <span class="keyword">in</span> adj[parent] <span class="keyword">for</span> neighbour <span class="keyword">in</span> neighbours):</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> parentDegree == currDegree:</span><br><span class="line">                ans = <span class="number">2</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>其中<code># #</code>是我的注释。<br>现在问题就是，</p>
<pre><code># 检测 neighbours 是否为 adj[parent] 的子集
# # if parent == -1 or not neighbours.issubset(adj[parent]):
if parent == -1 or any(neighbour != parent and neighbour not in adj[parent] for neighbour in neighbours):
return 0
</code></pre><p>我用集合本身的判断是否为另一个集合的子集的函数，结果是错误的。<br>现在就是要重点理解<code>any(neighbour != parent and neighbour not in adj[parent] for neighbour in neighbours)</code>了。还有，<code>parent</code>什么时候会是<code>-1</code>呀？<br>不，在这里<code>parent</code>都不可能是<code>-1</code>，经代码提交确认也是这样。<br>    any(neighbour != parent and neighbour not in adj[parent] for neighbour in neighbours)</p>
<ul>
<li><code>any()</code>只要有一个是True，结果就是True。</li>
<li>遍历当前<code>node</code>的<code>neighbours</code>，若出现一个节点不属于<code>parent</code>那个集合时，就可以证明这个<code>parent</code>不是这个<code>node</code>的父节点：<ul>
<li>当遍历的<code>neighbour</code>不是<code>parent</code>(<code>neighbour != parent</code>为<code>True</code>)时,<code>neighbour</code>又不在<code>parent</code>的集合里，整体值为<code>True</code>，即<code>parent</code>不是当前<code>node</code>的父节点，<code>return 0</code>；</li>
<li>当遍历的<code>neighbour</code>恰好时<code>parent</code>(<code>neighbour != parent</code>为<code>False</code>)时，<code>neighbour</code>也一定不在’parent<code>的集合里，因此整体值为</code>False`;</li>
</ul>
</li>
</ul>
<p>好家伙，总算是理清了。</p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Leetcode困难</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-2029-石子游戏 IX</title>
    <url>/2022/02/14/Leetcode-2029-%E7%9F%B3%E5%AD%90%E6%B8%B8%E6%88%8F-IX/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>2029.石子游戏 IX 难度：中等</p>
<p>Alice 和 Bob 再次设计了一款新的石子游戏。现有一行 n 个石子，每个石子都有一个关联的数字表示它的价值。给你一个整数数组 <code>stones</code> ，其中 <code>stones[i]</code> 是第 <code>i</code> 个石子的价值。</p>

<p>Alice 和 Bob 轮流进行自己的回合，<strong>Alice</strong> 先手。每一回合，玩家需要从 <code>stones</code>&nbsp;中移除任一石子。</p>

<ul>
    <li>如果玩家移除石子后，导致 <strong>所有已移除石子</strong> 的价值&nbsp;<strong>总和</strong> 可以被 3 整除，那么该玩家就 <strong>输掉游戏</strong> 。</li>
    <li>如果不满足上一条，且移除后没有任何剩余的石子，那么 Bob 将会直接获胜（即便是在 Alice 的回合）。</li>
</ul>


<p>假设两位玩家均采用&nbsp;<strong>最佳</strong> 决策。如果 Alice 获胜，返回 <code>true</code> ；如果 Bob 获胜，返回 <code>false</code> 。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>stones = [2,1]
<strong>输出：</strong>true
<strong>解释：</strong>游戏进行如下：
- 回合 1：Alice 可以移除任意一个石子。
- 回合 2：Bob 移除剩下的石子。 
已移除的石子的值总和为 1 + 2 = 3 且可以被 3 整除。因此，Bob 输，Alice 获胜。
</pre>


<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>stones = [2]
<strong>输出：</strong>false
<strong>解释：</strong>Alice 会移除唯一一个石子，已移除石子的值总和为 2 。 
由于所有石子都已移除，且值总和无法被 3 整除，Bob 获胜。
</pre>


<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>stones = [5,1,2,4,3]
<strong>输出：</strong>false
<strong>解释：</strong>Bob 总会获胜。其中一种可能的游戏进行方式如下：
- 回合 1：Alice 可以移除值为 1 的第 2 个石子。已移除石子值总和为 1 。
- 回合 2：Bob 可以移除值为 3 的第 5 个石子。已移除石子值总和为 = 1 + 3 = 4 。
- 回合 3：Alices 可以移除值为 4 的第 4 个石子。已移除石子值总和为 = 1 + 3 + 4 = 8 。
- 回合 4：Bob 可以移除值为 2 的第 3 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 = 10.
- 回合 5：Alice 可以移除值为 5 的第 1 个石子。已移除石子值总和为 = 1 + 3 + 4 + 2 + 5 = 15.
Alice 输掉游戏，因为已移除石子值总和（15）可以被 3 整除，Bob 获胜。
</pre>


<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= stones.length &lt;= 10<sup>5</sup></code></li>
    <li><code>1 &lt;= stones[i] &lt;= 10<sup>4</sup></code></li>
</ul>


<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>根据规则和题目，可以有这些小结论：</p>
<ol>
<li>所谓石子的价值真正有用的是对3取模后的值，我们将移除石子价值总数记为<code>x</code>，每个石子的价值记为<code>s=0,1,2</code>；</li>
<li>Alice想要赢，只有一种情况，就是让Bob移除石子后使得移除石子总数是3的倍数；</li>
<li>为了保证自己不输，自己要移除的石子<code>s</code>不能等于<code>3-x</code>，也就是如果现在<code>x=1</code>，“我”现在能选的石子<code>s</code>只能是1或0；</li>
<li>偶数个<code>s=0</code>相当于没有<code>x=0</code>，因为都是最优走法；</li>
<li>没有<code>s=0</code>，大致情况是：</li>
<li>1,1,2,1,2,1…或2,2,1,2,1,2,1…;</li>
</ol>
<p>讨论<code>s=0</code>偶数个的情况：</p>
<ul>
<li>如果全是<code>s=1</code>,Alice必败；</li>
<li>如果全是<code>s=2</code>,Alice也必败；</li>
<li><p>如果既有<code>s=1</code>，也有<code>s=2</code>， 因为A第一手之后，1和2交替进行，所以，</p>
<ol>
<li>两个数量相等。无论Alice选哪个，Bob最后选的和Alice一开始选的构成三的倍数，所以Alice都赢；</li>
<li><p><code>s=1</code>和<code>s=2</code>不一样多。</p>
<ol>
<li>Alice第一步选少的那个，这样，Bob就会一路选和Alice第一次一样的，直到没了Bob只好选另一个，这时候就构成了三的倍数，Bob输掉，Alice必胜；</li>
<li><p>但如果Alice选较多的那一个（假设是<code>s=2</code>），一顿交替之后，较少的<code>s=1</code>没了，</p>
<ol>
<li><p>如果<code>s=2</code>比<code>s=1</code>只多一个，Alice是最后一个，Alice输掉；</p>
</li>
<li><p>如果<code>s=2</code>比<code>s=1</code>多两个，Bob最后是<code>s=1</code>，根据规则，依然是Bob胜利；</p>
</li>
<li><p>如果<code>s=2</code>比<code>s=1</code>多超过两个，当<code>s=1</code>没了，Bob选<code>s=2</code>，Alice只能再选<code>s=2</code>，构成3的倍数，Alice输掉—就相当于前面全是<code>s=2</code>的情况。</p>
</li>
</ol>
</li>
</ol>
</li>
</ol>
</li>
<li><p>所以，Alice要选少的那个，一样多就都行。</p>
</li>
<li>综合一下：</li>
<li>如果相同，只有一种，Alice完了；</li>
<li>两种都有，选少的，一样就都可以选；</li>
<li>也就是说，只要<code>s=1</code>或<code>s=2</code>有一个没有，就完了。</li>
</ul>
<p>讨论<code>s=0</code>奇数的情况：</p>
<ul>
<li>Alice第一步肯定不拿<code>s=0</code>;</li>
<li>奇数个<code>s=0</code>有起到转换先手的作用；</li>
<li>那Bob第一步也就是整个的第二回合用不用这个<code>s=0</code>呢？</li>
<li>也先考虑全是<code>s=1</code>或<code>s=2</code>的情况，因为这两其实等价，所以假设全是<code>s=1</code>：<ol>
<li>如果数量只有1个或2个，那Alice必输<br>她都没机会让Bob取了之后构成3的倍数啊。</li>
<li>如果数量大于2个<ol>
<li>Bob首先就选了<code>s=0</code>，那现在的Alice就相当于之前讨论的<code>s=0</code>个数是偶数且全是<code>s=1</code>这种情况下的Bob，Alice赢；</li>
<li>Bob先不选<code>s=0</code>，那Alice不选<code>s=0</code>就输了，所以肯定会选<code>s=0</code>。。。Bob输了。</li>
</ol>
</li>
</ol>
</li>
<li>所以，如果这数量超过2，Alice必胜，不然就必败</li>
<li>现在考虑既有<code>s=1</code>也有<code>s=2</code>：</li>
<li>非常多的<code>s=2</code>或<code>s=1</code>意义不大，就用三个以内的数量来代表；</li>
<li><code>s=1</code>和<code>s=1</code>各一个（代表一样多）：Alice必输啊；</li>
<li><code>s=1</code>1个，<code>s=2</code>2个（代表两个数量相差1）：<ol>
<li>Alice选<code>s=1</code>，Bob选<code>s=0</code>，Alice最后回选到<code>s=2</code>而输掉，Bob为了赢那肯定会选<code>s=0</code>：</li>
<li>Alice选<code>s=2</code>，<ol>
<li>Bob不选<code>s=0</code>,而是选了和Alice一样的<code>s=2</code>，那Alice接下来选<code>s=1</code>输，选<code>s=0</code>，也是输；</li>
<li>Bob选<code>s=0</code>,那Alice接下来只能接着选<code>s=2</code>，最终还是输。</li>
</ol>
</li>
</ol>
</li>
<li>所以这种情况Alice必输。</li>
<li>换个角度理解这种Alice必输的情况，因为总的数量是个偶数（1个<code>s=1</code>，2个<code>s=2</code>，奇数个<code>s=0</code>），而Alice要赢就要让Bob自己构成3的倍数，他俩又都是高手，能撑到最后，而最后走完，总和不可能是3的倍数，所以Alice必输。</li>
<li>其实不用接着讨论数量差更大的情况了，对之前讨论的只有一种的情况，往里加一对<code>s=1</code>和<code>s=2</code>就好了，效果是一样的。</li>
<li>所以综合一下：</li>
<li>其中一个没有，得相差超过2，能赢；</li>
<li>两个都有，相差两个之内，Alice输；</li>
<li>所以，只要两个数量相差超过2Alice就能赢。</li>
</ul>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def stoneGameIX(self, stones) -&gt; bool:</span><br><span class="line">        a = [0, 0, 0]</span><br><span class="line">        for i in stones:</span><br><span class="line">            a[i % 3] += 1</span><br><span class="line">        if a[0] % 2 == 0:</span><br><span class="line">            # if a[1]*a[2]==0:</span><br><span class="line">            #     return False</span><br><span class="line">            return a[1] * a[2] != 0</span><br><span class="line">        else:</span><br><span class="line">            return abs(a[1] - a[2]) &gt; 2</span><br></pre></td></tr></table></figure>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/7hd2IU"><img src="https://s4.ax1x.com/2022/01/22/7hd2IU.png" alt="本题提交记录"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_233. 数字 1 的个数</title>
    <url>/2021/08/23/Leetcode-233-%E6%95%B0%E5%AD%97-1-%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Leetcode_345. 反转字符串中的元音字母</title>
    <url>/2021/08/19/Leetcode-345-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>345. 反转字符串中的元音字母<br>难度：简单<br>编写一个函数，以字符串作为输入，反转该字符串中的元音字母。</p>
<p>示例 1：</p>
<p>输入：”hello”<br>输出：”holle”<br>示例 2：</p>
<p>输入：”leetcode”<br>输出：”leotcede”</p>
<p>提示：</p>
<p>元音字母不包含字母 “y” 。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-vowels-of-a-string">https://leetcode-cn.com/problems/reverse-vowels-of-a-string</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h3 id="方法一：双指针"><a href="#方法一：双指针" class="headerlink" title="方法一：双指针"></a>方法一：双指针</h3><p>这提不难。<br>弄两个指针<code>i</code>和<code>j</code>，<code>i</code>从前往后走，<code>j</code>从后往前走，当遇到原因字母的时候，就停下来。当两个指针都停下来的时候，交换两个字母。使用<code>while</code>循环，退出条件是<code>i</code>和<code>j</code>重合。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><ul>
<li>python<pre><code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def reverseVowels(s):</span><br><span class="line">l = list(s)</span><br><span class="line">i, j = 0, len(s)-1</span><br><span class="line">Vowels = [&#x27;a&#x27;, &#x27;e&#x27;, &#x27;i&#x27;, &#x27;o&#x27;, &#x27;u&#x27;, &#x27;A&#x27;, &#x27;E&#x27;, &#x27;I&#x27;, &#x27;O&#x27;, &#x27;U&#x27;]</span><br><span class="line"># vowels = &quot;aeiouAEIOU&quot;</span><br><span class="line">i_step = 1</span><br><span class="line">j_step = -1</span><br><span class="line">while i &lt; j:</span><br><span class="line">    if l[i] in Vowels:</span><br><span class="line">        i_step = 0</span><br><span class="line">    if l[j] in Vowels:</span><br><span class="line">        j_step = 0</span><br><span class="line"></span><br><span class="line">    if i_step == j_step == 0:</span><br><span class="line">        l[i], l[j] = l[j], l[i]</span><br><span class="line">        i_step = 1</span><br><span class="line">        j_step = -1</span><br><span class="line">    i += i_step</span><br><span class="line">    j += j_step</span><br><span class="line">return &#x27;&#x27;.join(l)</span><br></pre></td></tr></table></figure>
</code></pre>  和官方题解几乎一样。</li>
<li>C<pre><code> <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">   	<span class="type">int</span> <span class="title function_">isVowel</span><span class="params">(<span class="type">char</span> ch)</span></span><br><span class="line">   &#123;</span><br><span class="line">	<span class="type">char</span> vowels[] = <span class="string">&quot;aeiouAEIOU&quot;</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; vowels[i]; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (ch == vowels[i])<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">reverseVowels</span><span class="params">(<span class="type">char</span>* s)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, j = <span class="built_in">strlen</span>(s)<span class="number">-1</span>;</span><br><span class="line">	<span class="type">char</span> tmp = s[<span class="number">0</span>];</span><br><span class="line">	<span class="type">int</span> i_step = <span class="number">1</span>, j_step = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">1</span> == isVowel(s[i]))</span><br><span class="line">			i_step = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (<span class="number">1</span> == isVowel(s[j]))</span><br><span class="line">			j_step = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">if</span> (i_step == <span class="number">0</span> &amp;&amp; j_step == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c %c %s\n&quot;</span>, s[i], s[j], s);</span><br><span class="line">			tmp = s[i];</span><br><span class="line">			s[i] = s[j];</span><br><span class="line">			s[j] = tmp;</span><br><span class="line">			i_step = <span class="number">1</span>;</span><br><span class="line">			j_step = <span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		i += i_step;</span><br><span class="line">		j += j_step;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre></li>
</ul>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/fHEmKP"><img src="https://z3.ax1x.com/2021/08/19/fHEmKP.jpg" alt="python提交记录"></a><br><a href="https://imgtu.com/i/fHEZvt"><img src="https://z3.ax1x.com/2021/08/19/fHEZvt.jpg" alt="C语言提交记录"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode简单</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_443. 压缩字符串</title>
    <url>/2021/08/22/Leetcode-443-%E5%8E%8B%E7%BC%A9%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>443. 压缩字符串<br>难度：中等</p>
<p>给你一个字符数组 <code>chars</code> ，请使用下述算法压缩：</p>

<p>从一个空字符串 <code>s</code> 开始。对于 <code>chars</code> 中的每组 <strong>连续重复字符</strong> ：</p>

<ul>
    <li>如果这一组长度为 <code>1</code> ，则将字符追加到 <code>s</code> 中。</li>
    <li>否则，需要向 <code>s</code> 追加字符，后跟这一组的长度。</li>
</ul>

<p>压缩后得到的字符串 <code>s</code> <strong>不应该直接返回</strong> ，需要转储到字符数组 <code>chars</code> 中。需要注意的是，如果组长度为 <code>10</code> 或 <code>10</code> 以上，则在 <code>chars</code> 数组中会被拆分为多个字符。</p>

<p>请在 <strong>修改完输入数组后</strong> ，返回该数组的新长度。</p>

<p>你必须设计并实现一个只使用常量额外空间的算法来解决此问题。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>chars = ["a","a","b","b","c","c","c"]
<strong>输出：</strong>返回 6 ，输入数组的前 6 个字符应该是：["a","2","b","2","c","3"]
<strong>解释：</strong>
"aa" 被 "a2" 替代。"bb" 被 "b2" 替代。"ccc" 被 "c3" 替代。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>chars = ["a"]
<strong>输出：</strong>返回 1 ，输入数组的前 1 个字符应该是：["a"]
<strong>解释：</strong>
没有任何字符串被替代。
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>chars = ["a","b","b","b","b","b","b","b","b","b","b","b","b"]
<strong>输出：</strong>返回 4 ，输入数组的前 4 个字符应该是：["a","b","1","2"]。
<strong>解释：</strong>
由于字符 "a" 不重复，所以不会被压缩。"bbbbbbbbbbbb" 被 “b12” 替代。
注意每个数字在数组中都有它自己的位置。
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= chars.length &lt;= 2000</code></li>
    <li><code>chars[i]</code> 可以是小写英文字母、大写英文字母、数字或符号</li>
</ul>

<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>要注意理解题目中确实是要将<code>chars</code>里的内容给改掉的。<br>我的第一个方法是另外创建一个<code>s</code>，初始就为<code>chars[0]</code>，然后遍历<code>chars</code>，用一个变量<code>c</code>来记相同的个数，直到遇到的字符与<code>s[-1]</code>不一样或者到了最后一个，就将计数器<code>s</code>强制转换乘字符串并一个一个加到<code>s</code>里去。最后再将<code>chars</code>里的字符一个个改掉。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">chars</span>):</span><br><span class="line">    s = [chars[<span class="number">0</span>]]</span><br><span class="line">    c = <span class="number">1</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    n = <span class="built_in">len</span>(chars)</span><br><span class="line">    <span class="keyword">while</span> i &lt; n:</span><br><span class="line">        <span class="keyword">if</span> s[-<span class="number">1</span>] != chars[i]:</span><br><span class="line">            <span class="keyword">if</span> c != <span class="number">1</span>:</span><br><span class="line">                s.extend(<span class="built_in">list</span>(<span class="built_in">str</span>(c)))</span><br><span class="line">            s.append(chars[i])</span><br><span class="line">            c = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            c += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i == n-<span class="number">1</span>:</span><br><span class="line">                s.extend(<span class="built_in">list</span>(<span class="built_in">str</span>(c)))</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(s):</span><br><span class="line">        chars[i] = x</span><br><span class="line">    <span class="comment"># print(chars)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(s)</span><br></pre></td></tr></table></figure></p>
<h3 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h3><p>不创建新的列表或字符串，在原有的列表上直接修改。<br>（其实是三指针）设一个写指针，两个读指针。大思路并不难，主要是具体实现上需要有些注意。比如，<code>if right == n-1 or chars[right] != chars[right+1]:</code>这句，①将是不是到了最后一个位置的判断放在<code>or</code>前面，②判断两个字符是否相等，是判断指针和它的下一个是不是一样，而不是往前判断，这样就可以解决好多最后一个字符的情况（往后判断的话，需要考虑最后一个是否与前一个相等的情况，会麻烦一些）。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">chars</span>):</span><br><span class="line">    write = left = <span class="number">0</span></span><br><span class="line">    n = <span class="built_in">len</span>(chars)</span><br><span class="line">    <span class="keyword">for</span> right <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> right == n-<span class="number">1</span> <span class="keyword">or</span> chars[right] != chars[right+<span class="number">1</span>]:</span><br><span class="line">            l = right-left+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> l != <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(l):</span><br><span class="line">                    write += <span class="number">1</span></span><br><span class="line">                    chars[write] = i</span><br><span class="line">            left = right+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> right != n-<span class="number">1</span>:</span><br><span class="line">                write += <span class="number">1</span></span><br><span class="line">                chars[write] = chars[right+<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># print(chars[:write+1])</span></span><br><span class="line">    <span class="keyword">return</span> write+<span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/hSKTDP"><img src="https://z3.ax1x.com/2021/08/22/hSKTDP.jpg" alt="压缩字符串提交记录jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_502. IPO</title>
    <url>/2021/09/08/Leetcode-502-IPO/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Leetcode_526. 优美的排列</title>
    <url>/2021/08/18/Leetcode-526-%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>526. 优美的排列<br>难度：中等<br>假设有从 1 到 N 的 N 个整数，如果从这 N 个数字中成功构造出一个数组，使得数组的第 i 位 (1 &lt;= i &lt;= N) 满足如下两个条件中的一个，我们就称这个数组为一个优美的排列。条件：</p>
<p>第 i 位的数字能被 i 整除<br>i 能被第 i 位上的数字整除<br>现在给定一个整数 N，请问可以构造多少个优美的排列？</p>
<p>示例1:</p>
<p>输入: 2<br>输出: 2<br>解释: </p>
<p>第 1 个优美的排列是 [1, 2]:<br>  第 1 个位置（i=1）上的数字是1，1能被 i（i=1）整除<br>  第 2 个位置（i=2）上的数字是2，2能被 i（i=2）整除</p>
<p>第 2 个优美的排列是 [2, 1]:<br>  第 1 个位置（i=1）上的数字是2，2能被 i（i=1）整除<br>  第 2 个位置（i=2）上的数字是1，i（i=2）能被 1 整除<br>说明:</p>
<p>N 是一个正整数，并且不会超过15。</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/beautiful-arrangement">https://leetcode-cn.com/problems/beautiful-arrangement</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h3 id="方法零：流氓方法"><a href="#方法零：流氓方法" class="headerlink" title="方法零：流氓方法"></a>方法零：流氓方法</h3><p>因为题目说明了N不会超过15，那就用例测试所有的数得到答案，然后用列表或者一串<code>if</code>语句就可以通过了。</p>
<h3 id="方法一：回溯"><a href="#方法一：回溯" class="headerlink" title="方法一：回溯"></a>方法一：回溯</h3><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><p>本来就隐约觉得会用到回溯算法，但还是想先用排列组合的方法试一下，但太太困难了，最后还是用了回溯算法。<br>先创建一个字典<code>d</code>，可以理解成键是第几个位置，对应的值是该位置上能放哪些数。<br>接下来是回溯函数，设置两个参数，第一个是用于记录当前状态的列表，第二个是 现在要填的是哪一个位置<code>pos</code>，返回当前状态下的优美排列数<code>c</code>。<br><code>c</code>初始设为0，<code>i</code>遍历可以在<code>pos</code>位置上的所有数，即<code>d[pos]</code>，如果<code>i</code>不在列表之内，就将它填到列表的对应位置上，并<code>c += func(s, pos+1)</code>，递归到下一个<code>pos</code>中，直到<code>pos==n</code>时，<code>c += 1</code>。<br>可能还是直接看代码清楚一些吧。</p>
<h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def countArrangement(n):</span><br><span class="line">    d = defaultdict(list)</span><br><span class="line">    # 第num个位置上可以放哪些数</span><br><span class="line">    for num in range(1, n+1):</span><br><span class="line">        for i in range(1, num+1):</span><br><span class="line">            if num % i == 0:</span><br><span class="line">                d[num].append(i)</span><br><span class="line">                if num != i:</span><br><span class="line">                    d[i].append(num)</span><br><span class="line"></span><br><span class="line">    def func(s, pos):</span><br><span class="line">        c = 0</span><br><span class="line">        for i in d[pos]:</span><br><span class="line">            if i not in s:</span><br><span class="line">                s[pos-1] = i</span><br><span class="line">                if pos == n:</span><br><span class="line">                    c += 1</span><br><span class="line">                else:</span><br><span class="line">                    c += func(s, pos+1)</span><br><span class="line">                s[pos-1] = 0</span><br><span class="line">        return c</span><br><span class="line">    return func([0]*n, 1)</span><br></pre></td></tr></table></figure>
<p>官方的回溯算法和我写得几乎一样，只是他用的是集合。我一开始也是想用集合的，但不知道集合的<code>disturb</code>方法，才改成了列表。<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def countArrangement(self, n: int) -&gt; int:</span><br><span class="line">        match = defaultdict(list)</span><br><span class="line">        for i in range(1, n + 1):</span><br><span class="line">            for j in range(1, n + 1):</span><br><span class="line">                if i % j == 0 or j % i == 0:</span><br><span class="line">                    match[i].append(j)</span><br><span class="line">        </span><br><span class="line">        num = 0</span><br><span class="line">        vis = set()</span><br><span class="line"></span><br><span class="line">        def backtrack(index: int) -&gt; None:</span><br><span class="line">            if index == n + 1:</span><br><span class="line">                nonlocal num</span><br><span class="line">                num += 1</span><br><span class="line">                return</span><br><span class="line">            </span><br><span class="line">            for x in match[index]:</span><br><span class="line">                if x not in vis:</span><br><span class="line">                    vis.add(x)</span><br><span class="line">                    backtrack(index + 1)</span><br><span class="line">                    vis.discard(x)</span><br><span class="line">                   </span><br><span class="line">        backtrack(1)</span><br><span class="line">        return num</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https://leetcode-cn.com/problems/beautiful-arrangement/solution/you-mei-de-pai-lie-by-leetcode-solution-vea2/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p>
<h3 id="方法二：状态压缩-动态规划"><a href="#方法二：状态压缩-动态规划" class="headerlink" title="方法二：状态压缩+动态规划"></a>方法二：状态压缩+动态规划</h3><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><p>这个方法实在难理解，借助官方题解下的评论才勉强看懂。也不知道什么叫状态压缩。<br>首先，是动态规划的状态表示。这里用二进制数表示，从右往左数，第<code>i</code>位上的数字是1，就表示<code>i</code>这个数字被选取了。创建长度为<code>1&lt;&lt;n</code>的数组<code>f</code>，表示某一状态下的优美排列数。<br>以<code>n=6</code>举例。<code>f[000110]</code>的意思是（这里下标里的数都是二进制数）：数字2和3能够组成的优美排列数。<br>所以，最后返回的结果就是<code>f[1&lt;&lt;n -1]</code>，即<code>f[111111]</code>。<br>然后是转移方程。<code>f[111111] = f[011111] + f[101111] + f[110111] + f[111011] + f[111101] + f[111110]</code>，也就是说，要算取了6个数的优美排列，就算上所有任意去掉这已经取了的6个数中的一个的状态的优美排列数。当然，事实上并不是所有的数都要相加，因为还需要判断，去掉的那个数能否放在第6个位置上。比如<code>f[101111]</code>这时数字<code>5</code>还没有取，而<code>5</code>并不能放在第6个位置上。<br>再举个例子。<code>f[100110]</code>是要算数字<code>2</code>、<code>3</code>和<code>6</code>这3个数的优美排列，那就看哪个数可以放在第3个位置上，这里<code>6</code>和<code>3</code>可以放在第3个位置上，而这时候已经取了的数字分别是<code>2</code>、<code>3</code>和<code>2</code>、<code>6</code>所以<code>f[100110] = f[000110] + f[100010]</code>。<br>因此，设计双重循环，外层<code>mask</code>循环遍历所有状态，内存<code>i</code>循环做的事情是从0（最右边）开始遍历<code>mask</code>的每一位，如果第<code>i+1</code>位上是<code>1</code>，并且这个<code>1</code>对应的数<code>i+1</code>能放在这个位置上（这句话的意思是：假装还没有取<code>i+1</code>这个数，此时已经取了<code>num - 1</code>个数，那 <code>i+1</code>能否放在<code>num</code>这个位置上，所以，<code>num</code>的意思就是要求的<code>mask</code>当中已经取了的数的数量，所以，<code>num</code>可以通过统计<code>mask</code>中有几个<code>1</code>来获得），那么<code>f[mask]</code>就可以加上这种状态下的优美排列数了。<br>还是结合代码进行理解吧。</p>
<h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def countArrangement(n):</span><br><span class="line">    # f[X] X是一个二进制数，</span><br><span class="line">    # 例：f[000110]，表示数字2和3被选取后排在前面的优美排列数</span><br><span class="line">    # 从右往左数，1表示被选</span><br><span class="line">    f = [0]*(1 &lt;&lt; n)</span><br><span class="line">    f[0] = 1</span><br><span class="line"></span><br><span class="line">    # 动态规划，mask 遍历1到 1&lt;&lt;n</span><br><span class="line">    for mask in range(1, 1 &lt;&lt; n):</span><br><span class="line">        # 计mask有多少个1</span><br><span class="line">        # 以100110举例例，mum=3</span><br><span class="line">        # 也就是说，2、3、6被选取了，要放在前三个求他们呢的优美排列数</span><br><span class="line">        # 那需要判断第3个位置（也就是第 num个位置）可以放谁，</span><br><span class="line">        # 这里可以放3和6，</span><br><span class="line">        # 前两个位置是2，6，f[100110] += f[100010]</span><br><span class="line">        # 前两个位置是2，3，f[100110] += f[000110]</span><br><span class="line">        num = bin(mask).count(&quot;1&quot;)</span><br><span class="line">        for i in range(n):</span><br><span class="line">            # mask &amp; (1 &lt;&lt; i  mask的第i+1位是不是1</span><br><span class="line">            # 如果是，</span><br><span class="line">            # i+1这个数能不能放在 num 这个位置上</span><br><span class="line">            # 如果可以，</span><br><span class="line">            # mask ^ (1 &lt;&lt; i) mask的第i+1位改为0</span><br><span class="line">            # f[mask] += f[mask ^ (1 &lt;&lt; i)]</span><br><span class="line">            # 注意i与i+1，i-1的区别含义</span><br><span class="line">            if (mask &amp; (1 &lt;&lt; i) and (num % (i+1) == 0 or (i+1) % num == 0)):</span><br><span class="line">                f[mask] += f[mask ^ (1 &lt;&lt; i)]</span><br><span class="line">        # for i in range(1,n+1):</span><br><span class="line">        #     if (mask &amp; (1 &lt;&lt; (i-1)) and (num % i == 0 or i % num == 0)):</span><br><span class="line">        #         f[mask] += f[mask ^ (1 &lt;&lt; (i-1))]</span><br><span class="line">    return f[(1 &lt;&lt; n)-1]</span><br></pre></td></tr></table></figure>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><img src="https://z3.ax1x.com/2021/08/18/fI1buR.jpg" alt="526. 优美的排列提交记录"></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>回溯</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_541. 反转字符串 II</title>
    <url>/2021/08/20/Leetcode-541-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2-II/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>541. 反转字符串 II<br>难度：简单</p>
<p>给定一个字符串 <code>s</code> 和一个整数 <code>k</code>，从字符串开头算起，每 <code>2k</code> 个字符反转前 <code>k</code> 个字符。</p>

<ul>
    <li>如果剩余字符少于 <code>k</code> 个，则将剩余字符全部反转。</li>
    <li>如果剩余字符小于 <code>2k</code> 但大于或等于 <code>k</code> 个，则反转前 <code>k</code> 个字符，其余字符保持原样。</li>
</ul>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>s = "abcdefg", k = 2
<strong>输出：</strong>"bacdfeg"
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>s = "abcd", k = 2
<strong>输出：</strong>"bacd"
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>
    <li><code>s</code> 仅由小写英文组成</li>
    <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>
</ul>


<h3 id="方法一：模拟"><a href="#方法一：模拟" class="headerlink" title="方法一：模拟"></a>方法一：模拟</h3><p>难度不大，直接上代码、<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverseStr</span>(<span class="params">self, s: <span class="built_in">str</span>, k: <span class="built_in">int</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        t = <span class="built_in">list</span>(s)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(t), <span class="number">2</span> * k):</span><br><span class="line">            t[i: i + k] = <span class="built_in">reversed</span>(t[i: i + k])</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(t)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># class Solution:</span></span><br><span class="line"><span class="comment">#     def reverseStr(self, s: str, k: int) -&gt; str:</span></span><br><span class="line"><span class="comment">#         kk = 2*k</span></span><br><span class="line"><span class="comment">#         n = len(s)</span></span><br><span class="line"><span class="comment">#         i, j = 0, k-1</span></span><br><span class="line"><span class="comment">#         st = list(s)</span></span><br><span class="line"><span class="comment">#         while i &lt; n:</span></span><br><span class="line"><span class="comment">#             start, end = i, j</span></span><br><span class="line"><span class="comment">#             if j &gt;= n:</span></span><br><span class="line"><span class="comment">#                 end = n-1</span></span><br><span class="line"><span class="comment">#             # print(i, j, start, end, n)</span></span><br><span class="line"><span class="comment">#             while start &lt; end:</span></span><br><span class="line"><span class="comment">#                 st[start], st[end] = st[end], st[start]</span></span><br><span class="line"><span class="comment">#                 start += 1</span></span><br><span class="line"><span class="comment">#                 end -= 1</span></span><br><span class="line"><span class="comment">#             i += kk</span></span><br><span class="line"><span class="comment">#             j += kk</span></span><br><span class="line"><span class="comment">#         return &#x27;&#x27;.join(st)</span></span><br></pre></td></tr></table></figure><br>注释掉的是我的，没注释掉的是官方的。可见对python的有些东西还是不熟悉。</p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/fOVZSe"><img src="https://z3.ax1x.com/2021/08/20/fOVZSe.jpg" alt="通过.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Leetcode简单</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_551. 学生出勤记录 I</title>
    <url>/2021/08/17/Leetcode-551-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95-I/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>551.-学生出勤记录-I<br>难度：简单<br>给你一个字符串 s 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：</p>
<p>‘A’：Absent，缺勤<br>‘L’：Late，迟到<br>‘P’：Present，到场<br>如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：</p>
<p>按 总出勤 计，学生缺勤（’A’）严格 少于两天。<br>学生 不会 存在 连续 3 天或 3 天以上的迟到（’L’）记录。<br>如果学生可以获得出勤奖励，返回 true ；否则，返回 false 。</p>
<p>示例 1：</p>
<p>输入：s = “PPALLP”<br>输出：true<br>解释：学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。<br>示例 2：</p>
<p>输入：s = “PPALLL”<br>输出：false<br>解释：学生最后三天连续迟到，所以不满足出勤奖励的条件。</p>
<p>提示：</p>
<p>1 &lt;= s.length &lt;= 1000<br>s[i] 为 ‘A’、’L’ 或 ‘P’</p>
<p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/student-attendance-record-i">https://leetcode-cn.com/problems/student-attendance-record-i</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>太简单了，略</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul>
<li>python<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def checkRecord(self, s: str) -&gt; bool:</span><br><span class="line">        return s.count(&quot;A&quot;)&lt;2 and s.count(&quot;LLL&quot;)&lt;=0</span><br></pre></td></tr></table></figure></li>
<li>C<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">checkRecord</span><span class="params">(<span class="type">char</span>* s)</span> &#123;</span><br><span class="line">	<span class="type">int</span> absent = <span class="number">0</span>, late = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (*s != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (*s == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			absent++;</span><br><span class="line">			late = <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">if</span> (absent == <span class="number">2</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (*s == <span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			late++;</span><br><span class="line">			<span class="keyword">if</span> (late == <span class="number">3</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			late = <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		s++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/f4KPi9"><img src="https://z3.ax1x.com/2021/08/17/f4KPi9.png" alt="551. 学生出勤记录 I.png"></a><br><a href="https://imgtu.com/i/f4h6TP"><img src="https://z3.ax1x.com/2021/08/17/f4h6TP.jpg" alt="551. 学生出勤记录 IC语言"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode简单</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_552. 学生出勤记录 II</title>
    <url>/2021/08/19/Leetcode-552-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95-II/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>552. 学生出勤记录 II<br>难度：困难<br>可以用字符串表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：</p>
<ul>
    <li><code>'A'</code>：Absent，缺勤</li>
    <li><code>'L'</code>：Late，迟到</li>
    <li><code>'P'</code>：Present，到场</li>
</ul>

<p>如果学生能够 <strong>同时</strong> 满足下面两个条件，则可以获得出勤奖励：</p>

<ul>
    <li>按 <strong>总出勤</strong> 计，学生缺勤（<code>'A'</code>）<strong>严格</strong> 少于两天。</li>
    <li>学生 <strong>不会</strong> 存在 <strong>连续</strong> 3 天或 <strong>连续</strong> 3 天以上的迟到（<code>'L'</code>）记录。</li>
</ul>

<p>给你一个整数 <code>n</code> ，表示出勤记录的长度（次数）。请你返回记录长度为 <code>n</code> 时，可能获得出勤奖励的记录情况 <strong>数量</strong> 。答案可能很大，所以返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 的结果。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>n = 2
<strong>输出：</strong>8
<strong>解释：
</strong>有 8 种长度为 2 的记录将被视为可奖励：
"PP" , "AP", "PA", "LP", "PL", "AL", "LA", "LL" 
只有"AA"不会被视为可奖励，因为缺勤次数为 2 次（需要少于 2 次）。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>n = 1
<strong>输出：</strong>3
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>n = 10101
<strong>输出：</strong>183236316
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>
</ul>



<h3 id="方法一和方法二：我的动态规划-排列组合（-泰波纳契数列）"><a href="#方法一和方法二：我的动态规划-排列组合（-泰波纳契数列）" class="headerlink" title="方法一和方法二：我的动态规划+排列组合（+泰波纳契数列）"></a>方法一和方法二：我的动态规划+排列组合（+泰波纳契数列）</h3><p>因为A的情况只有两种：一种是没有A，一种是有A，所以分开考虑。而有A的情况下，A只能有一个，所以考虑将这一个A分别放在字符串的所有位置，这样就将整个字符串分成了左右两个没有A的小部分。若用<code>dp[i]</code>记只有p和L组成的长度为<code>i</code>的字符串当中数量，那么带上A的总数就是将A放在每个位置上的时候<code>dp[A左边长度]*dp[A右边的长度]</code>的总和。而最前面考虑的整个字符串当中没有A的情况即为<code>dp[总长度]</code>。<br>所以接下来就是<code>dp[i]</code>的状态转移方程了。这里再建立两个状态，<code>present[i]</code>和<code>late[i]</code>，分别用于表示长度为<code>i</code>时候以P和L开头（或结尾，其实一样的）的符合条件的数量。于是有状态转移方程：</p>
<ul>
<li><code>present[i] = present[i-1]+late[i-1]</code><br> 因为P可以既可以接在P后边，也可以接在L后边。 </li>
<li><code>late[i] = present[i-1]+present[i-2]</code><br> 因为L可以接在两种情况后边：①恨着P；②只有一个L，这种时候就需要隔着一位是P了。</li>
<li><code>dp[i] = present[i]+late[i]</code><br>这样就可以写代码了。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    dp, late, present = [<span class="number">0</span>]*(n+<span class="number">1</span>), [<span class="number">0</span>]*(n+<span class="number">1</span>), [<span class="number">0</span>]*(n+<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># dp, late, present = &#123;&#125;, &#123;&#125;, &#123;&#125;</span></span><br><span class="line">    present[<span class="number">0</span>] = late[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    present[<span class="number">1</span>] = late[<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    present[<span class="number">2</span>] = late[<span class="number">2</span>] = <span class="number">2</span></span><br><span class="line">    dp[<span class="number">0</span>], dp[<span class="number">1</span>], dp[<span class="number">2</span>] = <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, n+<span class="number">1</span>):</span><br><span class="line">        present[i] = present[i-<span class="number">1</span>]+late[i-<span class="number">1</span>]</span><br><span class="line">        late[i] = present[i-<span class="number">1</span>]+present[i-<span class="number">2</span>]</span><br><span class="line">        dp[i] = (present[i]+late[i]) % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br><span class="line">    <span class="comment"># print(present)</span></span><br><span class="line">    <span class="comment"># print(dp)</span></span><br><span class="line">    ret = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        t = dp[i]*dp[n-<span class="number">1</span>-i]</span><br><span class="line">        ret += t % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br><span class="line">    ret += dp[n]</span><br><span class="line">    <span class="keyword">return</span> ret % (<span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span>)</span><br></pre></td></tr></table></figure>
初始状态可以人工算出。<br>我以为我的思路那么简单清晰易懂，肯定没有问题（虽然确实可以解），但是提交之后超出时间限制了！以为因为中间没有每一步都取模（刚开始的时候没有）会导致大数运算变慢，于是每一步都加上取模运算；以为因为是列表取值慢于是有改成字典；以为网断了（其实并没有），重新连了网——而这些都没有用！<br>后来觉得可能是循环里头<code>[]</code>的取值操作有点多，于是将状态转移方程展开往下写，发现这里竟然有个泰波纳契数列。<br>dp[i]<br>= present[i]+late[i]<br>=present[i-1]+late[i-1]+present[i-1]+present[i-2]<br>=present[i-1]+(present[i-2]+present[i-3]) + present[i-1]+present[i-2]<br>=2<em>present[i-1]+2</em>present[i-2]+present[i-3]<br>于是“改进”了方法的前面部分。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkRecord2</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">19</span></span><br><span class="line">    <span class="comment"># dp = [0]*(n+1)</span></span><br><span class="line">    dp = &#123;&#125;</span><br><span class="line">    dp[<span class="number">0</span>], dp[<span class="number">1</span>], dp[<span class="number">2</span>], dp[<span class="number">3</span>] = <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span></span><br><span class="line"></span><br><span class="line">    a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, n+<span class="number">1</span>):</span><br><span class="line">        dp[i] = a+<span class="number">2</span>*b+<span class="number">2</span>*c</span><br><span class="line">        a, b, c = b, c, a+b+c</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
然而仍然超时。——事实上这种更用时，后面放性能分析。<br><a href="https://imgtu.com/i/fq7VpQ"><img src="https://z3.ax1x.com/2021/08/19/fq7VpQ.jpg" alt="超出时间限制.jpg"></a></li>
</ul>
<h3 id="方法三和方法四：官方的动态规划和我照官方的动态规划"><a href="#方法三和方法四：官方的动态规划和我照官方的动态规划" class="headerlink" title="方法三和方法四：官方的动态规划和我照官方的动态规划"></a>方法三和方法四：官方的动态规划和我照官方的动态规划</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">checkRecord</span>(<span class="params">self, n: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        MOD = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></span><br><span class="line">        <span class="comment"># 长度，A 的数量，结尾连续 L 的数量</span></span><br><span class="line">        dp = [[[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n + <span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 以 P 结尾的数量</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                    dp[i][j][<span class="number">0</span>] = (dp[i][j][<span class="number">0</span>] + dp[i - <span class="number">1</span>][j][k]) % MOD</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 以 A 结尾的数量</span></span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                dp[i][<span class="number">1</span>][<span class="number">0</span>] = (dp[i][<span class="number">1</span>][<span class="number">0</span>] + dp[i - <span class="number">1</span>][<span class="number">0</span>][k]) % MOD</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 以 L 结尾的数量</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">3</span>):</span><br><span class="line">                    dp[i][j][k] = (dp[i][j][k] + dp[i - <span class="number">1</span>][j][k - <span class="number">1</span>]) % MOD</span><br><span class="line">        </span><br><span class="line">        total = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">3</span>):</span><br><span class="line">                total += dp[n][j][k]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> total % MOD</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https://leetcode-cn.com/problems/student-attendance-record-ii/solution/xue-sheng-chu-qin-ji-lu-ii-by-leetcode-s-kdlm/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
<p>借助他前面的讲解，也并没有很看懂，但了解了大概意思，然后理解着自己写了一个。<br>代码前面部分意思是列举所有情况，开头数字是dp下标。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkRecord5</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="comment"># 0 前面没有A，现在要加P  +=[0]+[1]+[2]</span></span><br><span class="line">    <span class="comment"># 1 前面没有A，上一个不是L，现在要加L  +=[0]</span></span><br><span class="line">    <span class="comment"># 2 前面没有A，上一个是L，现在要加L    +=[1]</span></span><br><span class="line">    <span class="comment"># 3 前面有A，现在要加P   +=[6]+[3]+[4]+[5]</span></span><br><span class="line">    <span class="comment"># 4 前面有A，上一个不是L，现在要加L    +=[6]+[3]</span></span><br><span class="line">    <span class="comment"># 5 前面有A，上一个是L，现在要加L     +=[4]</span></span><br><span class="line">    <span class="comment"># 6 现在要加A  +=[0]+[1]+[2]</span></span><br><span class="line">    MOD = <span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line">    <span class="comment"># dp = [[0 for _ in range(7)] for _ in range(n+1)]</span></span><br><span class="line">    <span class="comment"># dp[1] = [1, 1, 0, 0, 0, 0, 1]</span></span><br><span class="line">    <span class="comment"># for i in range(2, n+1):</span></span><br><span class="line">    <span class="comment">#     dp[i][0] += (dp[i-1][0]+dp[i-1][1]+dp[i-1][2])% MOD</span></span><br><span class="line">    <span class="comment">#     dp[i][1] += dp[i-1][0]% MOD</span></span><br><span class="line">    <span class="comment">#     dp[i][2] += dp[i-1][1]% MOD</span></span><br><span class="line">    <span class="comment">#     dp[i][3] += (dp[i-1][6]+dp[i-1][3]+dp[i-1][4]+dp[i-1][5])% MOD</span></span><br><span class="line">    <span class="comment">#     dp[i][4] += (dp[i-1][6]+dp[i-1][3])% MOD</span></span><br><span class="line">    <span class="comment">#     dp[i][5] += dp[i-1][4]% MOD</span></span><br><span class="line">    <span class="comment">#     dp[i][6] += (dp[i-1][0]+dp[i-1][1]+dp[i-1][2])% MOD</span></span><br><span class="line">    <span class="comment"># return sum(dp[n])%MOD</span></span><br><span class="line">    dp = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)], [<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)]]</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        a, b = i % <span class="number">2</span>, <span class="number">1</span>-i % <span class="number">2</span></span><br><span class="line">        dp[a][<span class="number">0</span>] += (dp[b][<span class="number">0</span>]+dp[b][<span class="number">1</span>]+dp[b][<span class="number">2</span>]) % MOD</span><br><span class="line">        dp[a][<span class="number">1</span>] += dp[b][<span class="number">0</span>] % MOD</span><br><span class="line">        dp[a][<span class="number">2</span>] += dp[b][<span class="number">1</span>] % MOD</span><br><span class="line">        dp[a][<span class="number">3</span>] += (dp[b][<span class="number">6</span>]+dp[b][<span class="number">3</span>]+dp[b][<span class="number">4</span>]+dp[b][<span class="number">5</span>]) % MOD</span><br><span class="line">        dp[a][<span class="number">4</span>] += (dp[b][<span class="number">6</span>]+dp[b][<span class="number">3</span>]) % MOD</span><br><span class="line">        dp[a][<span class="number">5</span>] += dp[b][<span class="number">4</span>] % MOD</span><br><span class="line">        dp[a][<span class="number">6</span>] += (dp[b][<span class="number">0</span>]+dp[b][<span class="number">1</span>]+dp[b][<span class="number">2</span>]) % MOD</span><br><span class="line">        dp[b] = [<span class="number">0</span>]*<span class="number">7</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(dp[n % <span class="number">2</span>]) % MOD</span><br></pre></td></tr></table></figure><br>这里其实也有两个方法，没注释掉的用上了滚动数组，这里需要注意的是清零的这一步<code>dp[b] = [0]*7</code>操作不能忘了。</p>
<h3 id="方法五：-矩阵快速幂"><a href="#方法五：-矩阵快速幂" class="headerlink" title="方法五： 矩阵快速幂"></a>方法五： 矩阵快速幂</h3><p>有我前面列举过所有情况的基础上，写出矩阵快速幂就并不是那么难了。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">checkRecord6</span>(<span class="params">n</span>):</span><br><span class="line">    mat = [</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">        [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    ]</span><br><span class="line">    MOD = <span class="number">10</span>**<span class="number">9</span>+<span class="number">7</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a, b</span>):</span><br><span class="line">        <span class="comment"># a[r*m] * b[m*c] = ret[r*c]</span></span><br><span class="line">        r, m, c = <span class="built_in">len</span>(a), <span class="built_in">len</span>(a[<span class="number">0</span>]), <span class="built_in">len</span>(b[<span class="number">0</span>])</span><br><span class="line">        ret = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(c)]<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(r)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(r):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">                    ret[i][j] += a[i][k]*b[k][j]</span><br><span class="line">                    ret[i][j] %= MOD</span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">matrixpow</span>(<span class="params">mat, n</span>):</span><br><span class="line">        ret = [[<span class="number">1</span>], [<span class="number">0</span>], [<span class="number">0</span>], [<span class="number">0</span>], [<span class="number">0</span>], [<span class="number">0</span>], [<span class="number">0</span>]]</span><br><span class="line">        <span class="keyword">while</span> n:</span><br><span class="line">            <span class="keyword">if</span> n &amp; <span class="number">1</span>:</span><br><span class="line">                ret = multiply(mat, ret)</span><br><span class="line">            mat = multiply(mat, mat)</span><br><span class="line">            n &gt;&gt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ret</span><br><span class="line">    ret = matrixpow(mat, n)</span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ret:</span><br><span class="line">        ans += i[<span class="number">0</span>] % MOD</span><br><span class="line">    <span class="keyword">return</span> ans % MOD</span><br></pre></td></tr></table></figure></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><h5 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h5><ul>
<li>动态规划通过<br> <a href="https://imgtu.com/i/fqXhEn"><img src="https://z3.ax1x.com/2021/08/19/fqXhEn.jpg" alt="动态规划通过.jpg"></a></li>
<li>矩阵快速幂（官方）<br> <a href="https://imgtu.com/i/fqXjER"><img src="https://z3.ax1x.com/2021/08/19/fqXjER.jpg" alt="矩阵快速幂（官方）.jpg"></a></li>
<li>矩阵快速幂（自己）<br> <a href="https://imgtu.com/i/fqjVUI"><img src="https://z3.ax1x.com/2021/08/19/fqjVUI.jpg" alt="矩阵快速幂（自己）.jpg"></a></li>
</ul>
</li>
<li><h5 id="性能分析"><a href="#性能分析" class="headerlink" title="性能分析"></a>性能分析</h5> 用<code>test = [3, 4, 5, 6, 7, 10101, 100000]</code>分别作为输入，用spyder进行性能分析。<br> <a href="https://imgtu.com/i/fqjXQS"><img src="https://z3.ax1x.com/2021/08/19/fqjXQS.jpg" alt="性能分析.jpg"></a><br> 1、2、3、5分别对应前面的方法一、二、三、四。可见泰波纳契数列的”改进“是个灾难啊。6、7分别对应自己和官方的矩阵快速幂。</li>
<li><h5 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h5> 1.真难！不是题目本身，因为虽然是一道困难提，但我还是比较快地有了方法 ，并且能够正确求解，但是总是超时而不清楚原因再哪实在崩溃！<br> 2.<code>1 &lt;= n &lt;= 10<sup>5</sup></code>，10<sup>5</sup>大约是273多年。</li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode困难</tag>
        <tag>动态规划</tag>
        <tag>快速幂/矩阵快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-688-骑士在棋盘上的概率</title>
    <url>/2022/02/18/Leetcode-688-%E9%AA%91%E5%A3%AB%E5%9C%A8%E6%A3%8B%E7%9B%98%E4%B8%8A%E7%9A%84%E6%A6%82%E7%8E%87/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>688. 骑士在棋盘上的概率<br>难度：中等</p>
<p>在一个&nbsp;<code>n x n</code>&nbsp;的国际象棋棋盘上，一个骑士从单元格 <code>(row, column)</code>&nbsp;开始，并尝试进行 <code>k</code> 次移动。行和列是 <strong>从 0 开始</strong> 的，所以左上单元格是 <code>(0,0)</code> ，右下单元格是 <code>(n - 1, n - 1)</code> 。</p>

<p>象棋骑士有8种可能的走法，如下图所示。每次移动在基本方向上是两个单元格，然后在正交方向上是一个单元格。</p>

<p><img style="height: 300px; width: 300px;" src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/12/knight.png"></p>

<p>每次骑士要移动时，它都会随机从8种可能的移动中选择一种(即使棋子会离开棋盘)，然后移动到那里。</p>

<p>骑士继续移动，直到它走了 <code>k</code> 步或离开了棋盘。</p>

<p>返回 <em>骑士在棋盘停止移动后仍留在棋盘上的概率</em> 。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入:</strong> n = 3, k = 2, row = 0, column = 0
<strong>输出:</strong> 0.0625
<strong>解释:</strong> 有两步(到(1,2)，(2,1))可以让骑士留在棋盘上。
在每一个位置上，也有两种移动可以让骑士留在棋盘上。
骑士留在棋盘上的总概率是0.0625。
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入:</strong> n = 1, k = 0, row = 0, column = 0
<strong>输出:</strong> 1.00000
</pre>

<p>&nbsp;</p>

<p><strong>提示:</strong></p>

<ul>
    <li><code>1 &lt;= n &lt;= 25</code></li>
    <li><code>0 &lt;= k &lt;= 100</code></li>
    <li><code>0 &lt;= row, column &lt;= n</code></li>
</ul>

<h3 id="思路一：广度优先搜索（BFS）"><a href="#思路一：广度优先搜索（BFS）" class="headerlink" title="思路一：广度优先搜索（BFS）"></a>思路一：广度优先搜索（BFS）</h3><p>题目不是很难理解，容易想到BFS。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">	    <span class="keyword">def</span> <span class="title function_">knightProbability</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, row: <span class="built_in">int</span>, column: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        Dirs = [(-<span class="number">1</span>, -<span class="number">2</span>), (<span class="number">1</span>, -<span class="number">2</span>),</span><br><span class="line">                (-<span class="number">2</span>, -<span class="number">1</span>), (<span class="number">2</span>, -<span class="number">1</span>),</span><br><span class="line">                (-<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                (-<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>)]</span><br><span class="line">        q = deque()</span><br><span class="line">        q.append((row, column, k))</span><br><span class="line">        cnt = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> q:</span><br><span class="line">            r, c, kk = q.popleft()</span><br><span class="line">            <span class="comment"># # 取出kk==0，cnt+1</span></span><br><span class="line">            <span class="comment"># # 也就是，走到最后一步再计数</span></span><br><span class="line">            <span class="keyword">if</span> kk == <span class="number">0</span>:</span><br><span class="line">                cnt += <span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> Dirs:</span><br><span class="line">                <span class="keyword">if</span> <span class="number">0</span> &lt;= r + x &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= c + y &lt; n:</span><br><span class="line">                    q.append((r + x, c + y, kk - <span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> cnt / <span class="built_in">pow</span>(<span class="number">8</span>, k)</span><br></pre></td></tr></table></figure>
<p>但这也很容易地超出了时间限制。</p>
<h3 id="思路二：动态规划"><a href="#思路二：动态规划" class="headerlink" title="思路二：动态规划"></a>思路二：动态规划</h3><p>看了一下官解，没想到用的是动态规划。尝试自己写了一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">knightProbability</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, row: <span class="built_in">int</span>, column: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        Dirs = [(-<span class="number">1</span>, -<span class="number">2</span>), (<span class="number">1</span>, -<span class="number">2</span>),</span><br><span class="line">                (-<span class="number">2</span>, -<span class="number">1</span>), (<span class="number">2</span>, -<span class="number">1</span>),</span><br><span class="line">                (-<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">                (-<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>)]</span><br><span class="line">        dp=[[[<span class="number">0</span>]* n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)]<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">1</span>)]</span><br><span class="line">        dp[<span class="number">0</span>][row][column]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(k):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">if</span> dp[step][i][j]&gt;<span class="number">0</span>:</span><br><span class="line">                        <span class="keyword">for</span> di,dj <span class="keyword">in</span> Dirs:</span><br><span class="line">                            ni,nj=i+di,j+dj</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span>&lt;=ni&lt;n <span class="keyword">and</span> <span class="number">0</span>&lt;=nj&lt;n:</span><br><span class="line">                                dp[step+<span class="number">1</span>][ni][nj]+=<span class="number">1</span></span><br><span class="line">        cnt=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            cnt+=<span class="built_in">sum</span>(dp[-<span class="number">1</span>][i])</span><br><span class="line">        <span class="built_in">print</span>(dp[-<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">return</span> cnt/<span class="built_in">pow</span>(<span class="number">8</span>,k)</span><br></pre></td></tr></table></figure>
<p>但是这样出现了错误，原因是在最后一步（<code>step=k-1</code>）的<code>dp[step+1][ni][nj]+=1</code>，加的只是这一步的情况，没有算上之前其实还有很多能到<code>i</code>,<code>j</code>的情况。</p>
<p>将<code>dp[step+1][ni][nj]+=1</code>修改为<code>dp[step + 1][ni][nj] += dp[step][i][j]</code>,成功通过！而且比官解的好！</p>
<p>官解：<br>它的状态值<code>dp[step][i][j]</code>指的是从<code>(i,j)</code>出发第<code>step</code>步后还在棋盘上的概率，状态转移方程是： $ dp[step][i][j] += \frac{1}{8} + \sum_{di,dj} dp[step-1][i+di][j+dj] , (di,dj)\in \{(-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2)\}, 0\leq i,j,i+di,j+dj &lt;n $ 。<br>也不难理解，因为<code>(i,j)</code>下一步有8种可能的走法，那<code>(i+di,j+dj)</code>的概率就是 $\frac{1}{8}$ <code>(i,j)</code>的概率。换个角度讲也就是，有8种可能走到它<code>(i,j)</code>这，那走到<code>(i,j)</code>的概率就是$\sum_{di,dj} dp[step-1][i+di][j+dj]$。<br>那为什么最后只要输出<code>dp[k][row][column]</code>就好了呢？<br>我觉得可以倒过来走，以<code>n=3,k=1,row=0,colmn=0</code>为例，<code>(0,0)</code>在第1步往回走，有<code>0.25</code>的概率留在棋盘上，这就是答案。将初始值全部设为1，遍历所有点进行状态转移方程的计算，所得的结果<code>dp[k][i][j]</code>就是<code>(i,j)</code>走了<code>k</code>步之后仍然留在棋盘上的概率。将<code>k</code>扩展来解释状态转移方程，第<code>k</code>步<code>(i,j)</code>仍然留在棋盘的概率是由第<code>k-1</code>步对应8个点的状态值计算而来，每个点的状态值就是该店走那么多步仍然留在棋盘的概率。<br>当然了，超出棋盘范围的值都是0啦。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">knightProbability</span>(<span class="params">self, n: <span class="built_in">int</span>, k: <span class="built_in">int</span>, row: <span class="built_in">int</span>, column: <span class="built_in">int</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">        dp = [[[<span class="number">0</span>] * n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> step <span class="keyword">in</span> <span class="built_in">range</span>(k + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                    <span class="keyword">if</span> step == <span class="number">0</span>:</span><br><span class="line">                        dp[step][i][j] = <span class="number">1</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">for</span> di, dj <span class="keyword">in</span> ((-<span class="number">2</span>, -<span class="number">1</span>), (-<span class="number">2</span>, <span class="number">1</span>), (<span class="number">2</span>, -<span class="number">1</span>), (<span class="number">2</span>, <span class="number">1</span>), (-<span class="number">1</span>, -<span class="number">2</span>), (-<span class="number">1</span>, <span class="number">2</span>), (<span class="number">1</span>, -<span class="number">2</span>), (<span class="number">1</span>, <span class="number">2</span>)):</span><br><span class="line">                            ni, nj = i + di, j + dj</span><br><span class="line">                            <span class="keyword">if</span> <span class="number">0</span> &lt;= ni &lt; n <span class="keyword">and</span> <span class="number">0</span> &lt;= nj &lt; n:</span><br><span class="line">                                dp[step][i][j] += dp[step - <span class="number">1</span>][ni][nj] / <span class="number">8</span></span><br><span class="line">        <span class="keyword">return</span> dp[k][row][column]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作者：LeetCode-Solution</span></span><br><span class="line"><span class="comment"># 链接：https://leetcode-cn.com/problems/knight-probability-in-chessboard/solution/qi-shi-zai-qi-pan-shang-de-gai-lu-by-lee-2qhk/</span></span><br><span class="line"><span class="comment"># 来源：力扣（LeetCode）</span></span><br><span class="line"><span class="comment"># 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span></span><br></pre></td></tr></table></figure>
<p>我对官解的优化<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def knightProbability(self, n: int, k: int, row: int, column: int) -&gt; float:</span><br><span class="line">        Dirs = ((-2, -1), (-2, 1), (2, -1), (2, 1), (-1, -2), (-1, 2), (1, -2), (1, 2))</span><br><span class="line">        dp = [[[0] * (n + 4) for _ in range(n + 4)] for _ in range(2)]</span><br><span class="line">        for i in range(2, 2 + n):</span><br><span class="line">            for j in range(2, 2 + n):</span><br><span class="line">                dp[0][i][j] = 1</span><br><span class="line">        for step in range(1, k + 1):</span><br><span class="line">            for i in range(2, 2 + n):</span><br><span class="line">                for j in range(2, 2 + n):</span><br><span class="line">                    dp[step % 2][i][j] = 0</span><br><span class="line">                    for di, dj in Dirs:</span><br><span class="line">                        ni, nj = i + di, j + dj</span><br><span class="line">                        dp[step % 2][i][j] += dp[1 - step % 2][ni][nj] / 8</span><br><span class="line">        return dp[k % 2][row + 2][column + 2]</span><br></pre></td></tr></table></figure></p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/H74Hte"><img src="https://s4.ax1x.com/2022/02/18/H74Hte.png" alt="提交记录.png"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>动态规划</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_787. K 站中转内最便宜的航班</title>
    <url>/2021/08/27/Leetcode-787-K-%E7%AB%99%E4%B8%AD%E8%BD%AC%E5%86%85%E6%9C%80%E4%BE%BF%E5%AE%9C%E7%9A%84%E8%88%AA%E7%8F%AD/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>787. K 站中转内最便宜的航班<br>难度：中等</p>
<p>有 <code>n</code> 个城市通过一些航班连接。给你一个数组&nbsp;<code>flights</code> ，其中&nbsp;<code>flights[i] = [from<sub>i</sub>, to<sub>i</sub>, price<sub>i</sub>]</code> ，表示该航班都从城市 <code>from<sub>i</sub></code> 开始，以价格 <code>price<sub>i</sub></code> 抵达 <code>to<sub>i</sub></code>。</p>

<p>现在给定所有的城市和航班，以及出发城市 <code>src</code> 和目的地 <code>dst</code>，你的任务是找到出一条最多经过 <code>k</code>&nbsp;站中转的路线，使得从 <code>src</code> 到 <code>dst</code> 的 <strong>价格最便宜</strong> ，并返回该价格。 如果不存在这样的路线，则输出 <code>-1</code>。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入:</strong> 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
<strong>输出:</strong> 200
<strong>解释:</strong> 
城市航班图如下
<img style="height: 180px; width: 246px;" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png" alt>

从城市 0 到城市 2 在 1 站中转以内的最便宜价格是 200，如图中红色所示。</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入:</strong> 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
<strong>输出:</strong> 500
<strong>解释:</strong> 
城市航班图如下
<img style="height: 180px; width: 246px;" src="https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png" alt>

从城市 0 到城市 2 在 0 站中转以内的最便宜价格是 500，如图中蓝色所示。</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= n &lt;= 100</code></li>
    <li><code>0 &lt;= flights.length &lt;= (n * (n - 1) / 2)</code></li>
    <li><code>flights[i].length == 3</code></li>
    <li><code>0 &lt;= from<sub>i</sub>, to<sub>i</sub> &lt; n</code></li>
    <li><code>from<sub>i</sub> != to<sub>i</sub></code></li>
    <li><code>1 &lt;= price<sub>i</sub> &lt;= 10<sup>4</sup></code></li>
    <li>航班没有重复，且不存在自环</li>
    <li><code>0 &lt;= src, dst, k &lt; n</code></li>
    <li><code>src != dst</code></li>
</ul>


<h3 id="方法一-枚举"><a href="#方法一-枚举" class="headerlink" title="方法一: 枚举"></a>方法一: 枚举</h3><h4 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h4><ol>
<li>先创建一个字典，用于存从某一个地方出发，可以到哪些目的地以及花费是多少；</li>
<li>建立两个列表，分别存这一次可以从哪些地方出发，以及到这个地方已经用了的花费；</li>
<li>再建立两个临时列表，分别存在遍历出发地点的列时的目的地，以及到达目的地的的花费；</li>
<li>若遇到了目的地是<code>dst</code>，就将花费记录到另一个<code>ret</code>列表当中；</li>
<li>遍历完一遍出发列表后，<code>k</code>自减，将<code>3</code>中的列表分别赋给<code>2</code>中的列表；</li>
<li>直到<code>k</code>变为负数，输出<code>ret</code>中的最小值，如果没有，输出<code>-1</code>。<h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findCheapestPrice</span>(<span class="params">n, flights, src, dst, k</span>):</span><br><span class="line">    dst_price = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> s, d, p <span class="keyword">in</span> flights:</span><br><span class="line">        dst_price[s].append([d, p])</span><br><span class="line">        <span class="comment">#dst_price[d].append([s, p])</span></span><br><span class="line">    <span class="comment"># print(dst_price)</span></span><br><span class="line">    next_place = [src]</span><br><span class="line">    next_price = [<span class="number">0</span>]</span><br><span class="line">    temp_place = []</span><br><span class="line">    temp_price = []</span><br><span class="line">    kk = k</span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">while</span> k &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> f, p0 <span class="keyword">in</span> <span class="built_in">zip</span>(next_place, next_price):</span><br><span class="line">            <span class="keyword">for</span> d, p <span class="keyword">in</span> dst_price[f]:</span><br><span class="line">                temp_place.append(d)</span><br><span class="line">                temp_price.append(p0+p)</span><br><span class="line">                <span class="comment"># print(f,d,temp_place)</span></span><br><span class="line">                <span class="comment"># print(temp_price)</span></span><br><span class="line">                <span class="keyword">if</span> d == dst:</span><br><span class="line">                    ret.append(p0+p)</span><br><span class="line">        next_place = temp_place</span><br><span class="line">        next_price = temp_price</span><br><span class="line">        <span class="comment"># print(next_place)</span></span><br><span class="line">        <span class="comment"># print(next_price,&quot;***&quot;)</span></span><br><span class="line">        temp_place = []</span><br><span class="line">        temp_price = []</span><br><span class="line">        k -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(ret) <span class="keyword">if</span> ret != [] <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4>可能会出现两个地方来回的情况，造成超级大量的浪费计算。</li>
</ol>
<h3 id="方法二：-回溯"><a href="#方法二：-回溯" class="headerlink" title="方法二： 回溯"></a>方法二： 回溯</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findCheapestPrice</span>(<span class="params">n, flights, src, dst, k</span>):</span><br><span class="line">    dst_price = defaultdict(<span class="built_in">list</span>)</span><br><span class="line">    <span class="keyword">for</span> s, d, p <span class="keyword">in</span> flights:</span><br><span class="line">        dst_price[s].append([d, p])</span><br><span class="line"></span><br><span class="line">    place = [src]</span><br><span class="line">    price = [<span class="number">0</span>]</span><br><span class="line">    ret = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">k, place, price</span>):</span><br><span class="line">        <span class="keyword">if</span> k &lt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="keyword">for</span> d, p0 <span class="keyword">in</span> dst_price[place[-<span class="number">1</span>]]:</span><br><span class="line">            <span class="keyword">if</span> d == dst:</span><br><span class="line">                ret.append(price[-<span class="number">1</span>]+p0)</span><br><span class="line">            place.append(d)</span><br><span class="line">            price.append(price[-<span class="number">1</span>]+p0)</span><br><span class="line">            forward(k-<span class="number">1</span>, place, price)</span><br><span class="line">            place.pop()</span><br><span class="line">            price.pop()</span><br><span class="line">    forward(k, place, price)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(ret) <span class="keyword">if</span> ret != [] <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="方法三：-动态规划"><a href="#方法三：-动态规划" class="headerlink" title="方法三： 动态规划"></a>方法三： 动态规划</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我刚开始的时候想，某次换成之后的最便宜的花费等于换成之前的那么多可能的站里的最便宜的花费加上这一段的花费，然而显然不是这样的，一度认为这一题不能用动态规划来做。而事实上这是错的，因为到某一站的最便宜花费应当等于到上一站的所有可能的站的最便宜花费分别加上这些上一站到这一站的花费之后所有花费当中最便宜的。还是用式子和代码来表示这些狗屁不通的话吧。</p>
<ol>
<li>状态:<code>dp[t][d]</code>表示第<code>t</code>次换乘时到<code>d</code>站的最小花费;</li>
<li>状态转移方程::<code>dp[t][d] = min(dp[t][d], dp[t-1][f]+cost)</code>,<code>cost</code>是<code>f</code>站到<code>d</code>站的花费,所以第<code>t</code>次换乘时到<code>d</code>站的最小花费等于所有能到<code>d</code>站的那些站到<code>d</code>站的最便宜花费加上那些站到<code>d</code>站的花费当中的最小值.</li>
<li>初始状态:<code>d[0][src]=0</code>.<br>其他注意的</li>
<li><code>k</code>次换乘,也就会有<code>k+2</code>个站,,注意相关循环的范围以及<code>dp</code>的设置;</li>
<li><code>float(&quot;inf&quot;)</code>表示无穷大.<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findCheapestPrice</span>(<span class="params">n, flights, src, dst, k</span>):</span><br><span class="line">    dp = [[<span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)]*n <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(k+<span class="number">2</span>)]</span><br><span class="line">    dp[<span class="number">0</span>][src] = <span class="number">0</span></span><br><span class="line">    ret = []</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k+<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">for</span> f, d, cost <span class="keyword">in</span> flights:</span><br><span class="line">            dp[t][d] = <span class="built_in">min</span>(dp[t][d], dp[t-<span class="number">1</span>][f]+cost)</span><br><span class="line">            <span class="keyword">if</span> d == dst <span class="keyword">and</span> dp[t][d] != <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>):</span><br><span class="line">                ret.append(dp[t][d])</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">min</span>(ret) <span class="keyword">if</span> ret != [] <span class="keyword">else</span> -<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findCheapestPrice</span>(<span class="params">n, flights, src, dst, k</span>):</span><br><span class="line">    <span class="comment"># dst_price = defaultdict(list)</span></span><br><span class="line">    <span class="comment"># for s, d, p in flights:</span></span><br><span class="line">    <span class="comment">#     dst_price[s].append([d, p])</span></span><br><span class="line"></span><br><span class="line">    dp = [<span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)]*n</span><br><span class="line">    ans = <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># next_place = [src]</span></span><br><span class="line">    dp[src] = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, k+<span class="number">2</span>):</span><br><span class="line">        g = [<span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>)]*n</span><br><span class="line">        <span class="keyword">for</span> f,d,cost <span class="keyword">in</span> flights:</span><br><span class="line">            g[d]=<span class="built_in">min</span>(g[d],dp[f]+cost)</span><br><span class="line">        <span class="comment"># temp = []</span></span><br><span class="line">        <span class="comment"># for f in next_place:</span></span><br><span class="line">        <span class="comment">#     for d, p in dst_price[f]:</span></span><br><span class="line">        <span class="comment">#         g[d] = min(g[d], dp[f]+p)</span></span><br><span class="line">        <span class="comment">#         temp.append(d)</span></span><br><span class="line">            <span class="keyword">if</span> d == dst:</span><br><span class="line">                ans = <span class="built_in">min</span>(ans, g[d])</span><br><span class="line">        dp = g</span><br><span class="line">        <span class="comment"># next_place = temp</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span> <span class="keyword">if</span> ans == <span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>) <span class="keyword">else</span> ans</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/hAHnSS"><img src="https://z3.ax1x.com/2021/08/24/hAHnSS.jpg" alt="航班换乘提交记录.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>回溯</tag>
        <tag>动态规划</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_57|. 出界的路径数</title>
    <url>/2021/08/20/Leetcode-576-%E5%87%BA%E7%95%8C%E7%9A%84%E8%B7%AF%E5%BE%84%E6%95%B0/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ol>
<li>出界的路径数<br>难度：简单<p>给你一个大小为 <code>m x n</code> 的网格和一个球。球的起始坐标为 <code>[startRow, startColumn]</code> 。你可以将球移到在四个方向上相邻的单元格内（可以穿过网格边界到达网格之外）。你 <strong>最多</strong> 可以移动 <code>maxMove</code> 次球。</p>

</li>
</ol>
<p>给你五个整数 <code>m</code>、<code>n</code>、<code>maxMove</code>、<code>startRow</code> 以及 <code>startColumn</code> ，找出并返回可以将球移出边界的路径数量。因为答案可能非常大，返回对 <code>10<sup>9</sup> + 7</code> <strong>取余</strong> 后的结果。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>
<img style="width: 500px; height: 296px;" src="https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png" alt>
<pre><strong>输入：</strong>m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0
<strong>输出：</strong>6
</pre>

<p><strong>示例 2：</strong></p>
<img style="width: 500px; height: 293px;" src="https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png" alt>
<pre><strong>输入：</strong>m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1
<strong>输出：</strong>12
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= m, n &lt;= 50</code></li>
    <li><code>0 &lt;= maxMove &lt;= 50</code></li>
    <li><code>0 &lt;= startRow &lt; m</code></li>
    <li><code>0 &lt;= startColumn &lt; n</code></li>
</ul>

<h3 id="f方法一：-动态规划"><a href="#f方法一：-动态规划" class="headerlink" title="f方法一： 动态规划"></a>f方法一： 动态规划</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>这一题显然是要用动态规划来做。状态也不难写，<code>dp[move][r][c]</code>表示第<code>move</code>步走到第<code>r</code>行第<code>c</code>列的数量。状态转移方程也不难想到，即<code>dp[move][r][c]</code>等于<code>move-1</code>上一步步第<code>r</code>行第<code>c</code>列上下左右四个数的和，当然这是要在范围内，这里需要一个判断。而我的代码实现当中，是将这一步第<code>r</code>行第<code>c</code>列上下左右四个数加到下一步去。<br>较为复杂的我认为是在对于边界一圈的情况的考虑。如果球走到边界上了，剩余的步数至少还有一步，那他就可以出界，而且有多少种情况能走到边界的这个位置就有多少种出界的情况。但就如题目中的示例那样，边界的不同位置出界的可能i性是不同的。所以，我是在循环当中，先判断这个位置是不是边界以及是哪一种边界，如果是，再判断这个位置上是不是0，如果不是0，说明可以出界，那就将它加到出界总数去，一种边界加一次，这样就解决了边界不同位置有不同出界的可能性。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def findPaths(m, n, maxMove, startRow, startColumn):</span><br><span class="line">    if maxMove == 0:</span><br><span class="line">        return 0</span><br><span class="line">    dp = [[[0 for c in range(n)] for r in range(m)] for move in range(maxMove)]</span><br><span class="line">    outCounts = 0</span><br><span class="line">    dp[0][startRow][startColumn] = 1</span><br><span class="line">    for move in range(maxMove):</span><br><span class="line">        for r in range(m):</span><br><span class="line">            for c in range(n):</span><br><span class="line">                if r == 0 or c == 0 or r == m-1 or c == n-1:</span><br><span class="line">                    t = dp[move][r][c]</span><br><span class="line">                    if t != 0:</span><br><span class="line">                        if r-1 &lt; 0:</span><br><span class="line">                            outCounts += t</span><br><span class="line">                        if c-1 &lt; 0:</span><br><span class="line">                            outCounts += t</span><br><span class="line">                        if r+1 == m:</span><br><span class="line">                            outCounts += t</span><br><span class="line">                        if c+1 == n:</span><br><span class="line">                            outCounts += t</span><br><span class="line">                if move == maxMove-1:</span><br><span class="line">                    continue</span><br><span class="line">                for i, j in [(r-1, c), (r+1, c), (r, c-1), (r, c+1)]:</span><br><span class="line">                    if i &gt;= 0 and i &lt; m and j &gt;= 0 and j &lt; n:</span><br><span class="line">                        dp[move+1][r][c] += dp[move][i][j]</span><br><span class="line"></span><br><span class="line">    return outCounts % (10**9+7)</span><br></pre></td></tr></table></figure>
<h3 id="方法二：-卷积"><a href="#方法二：-卷积" class="headerlink" title="方法二： 卷积"></a>方法二： 卷积</h3><p>大佬都在评论区。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">findPaths</span>(<span class="params">m, n, maxMove, startRow, startColumn</span>):</span><br><span class="line">    <span class="keyword">if</span> maxMove &lt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    a = numpy.zeros((m, n), )</span><br><span class="line">    a[startRow, startColumn] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    b = numpy.zeros((<span class="number">3</span>, <span class="number">3</span>), <span class="built_in">int</span>)</span><br><span class="line">    b[<span class="number">0</span>][<span class="number">1</span>] = b[<span class="number">1</span>][<span class="number">0</span>] = b[-<span class="number">1</span>][<span class="number">1</span>] = b[<span class="number">1</span>][-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># print(a)</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(maxMove):</span><br><span class="line">        ans += (a[:, <span class="number">0</span>].<span class="built_in">sum</span>() + a[:, -<span class="number">1</span>].<span class="built_in">sum</span>() +</span><br><span class="line">                a[<span class="number">0</span>, :].<span class="built_in">sum</span>() + a[-<span class="number">1</span>, :].<span class="built_in">sum</span>()) % <span class="number">1_000_000_007</span></span><br><span class="line">        a = scipy.signal.convolve2d(a, b, <span class="string">&#x27;same&#x27;</span>) % <span class="number">1_000_000_007</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(ans) % <span class="number">1_000_000_007</span></span><br></pre></td></tr></table></figure></p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/fXAdy9"><img src="https://z3.ax1x.com/2021/08/20/fXAdy9.jpg" alt="t提交记录1.jpg"></a><br><a href="https://imgtu.com/i/fXAaQJ"><img src="https://z3.ax1x.com/2021/08/20/fXAaQJ.jpg" alt="提交记录2.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode简单</tag>
        <tag>动态规划</tag>
        <tag>卷积</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_789.逃脱阻碍者</title>
    <url>/2021/08/22/Leetcode-789-%E9%80%83%E8%84%B1%E9%98%BB%E7%A2%8D%E8%80%85/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>789. 逃脱阻碍者<br>难度：中等</p>
<p>你在进行一个简化版的吃豆人游戏。你从 <code>[0, 0]</code> 点开始出发，你的目的地是&nbsp;<code>target = [x<sub>target</sub>, y<sub>target</sub>]</code> 。地图上有一些阻碍者，以数组 <code>ghosts</code> 给出，第 <code>i</code> 个阻碍者从&nbsp;<code>ghosts[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>&nbsp;出发。所有输入均为 <strong>整数坐标</strong> 。</p>

<p>每一回合，你和阻碍者们可以同时向东，西，南，北四个方向移动，每次可以移动到距离原位置 <strong>1 个单位</strong> 的新位置。当然，也可以选择 <strong>不动</strong> 。所有动作 <strong>同时</strong> 发生。</p>

<p>如果你可以在任何阻碍者抓住你 <strong>之前</strong> 到达目的地（阻碍者可以采取任意行动方式），则被视为逃脱成功。如果你和阻碍者同时到达了一个位置（包括目的地）都不算是逃脱成功。</p>

<p>只有在你有可能成功逃脱时，输出 <code>true</code> ；否则，输出 <code>false</code> 。</p>
&nbsp;

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>ghosts = [[1,0],[0,3]], target = [0,1]
<strong>输出：</strong>true
<strong>解释：</strong>你可以直接一步到达目的地 (0,1) ，在 (1, 0) 或者 (0, 3) 位置的阻碍者都不可能抓住你。 
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>ghosts = [[1,0]], target = [2,0]
<strong>输出：</strong>false
<strong>解释：</strong>你需要走到位于 (2, 0) 的目的地，但是在 (1, 0) 的阻碍者位于你和目的地之间。 
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>ghosts = [[2,0]], target = [1,0]
<strong>输出：</strong>false
<strong>解释：</strong>阻碍者可以和你同时达到目的地。 
</pre>

<p><strong>示例 4：</strong></p>

<pre><strong>输入：</strong>ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]
<strong>输出：</strong>false
</pre>

<p><strong>示例 5：</strong></p>

<pre><strong>输入：</strong>ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]
<strong>输出：</strong>true
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;= ghosts.length &lt;= 100</code></li>
    <li><code>ghosts[i].length == 2</code></li>
    <li><code>-10<sup>4</sup> &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup></code></li>
    <li>同一位置可能有 <strong>多个阻碍者</strong> 。</li>
    <li><code>target.length == 2</code></li>
    <li><code>-10<sup>4</sup> &lt;= x<sub>target</sub>, y<sub>target</sub> &lt;= 10<sup>4</sup></code></li>
</ul>


<h3 id="方法：-曼哈顿距离"><a href="#方法：-曼哈顿距离" class="headerlink" title="方法： 曼哈顿距离"></a>方法： 曼哈顿距离</h3><p>刚过十二点，看完题目是懵的，这是要干嘛？没有思路，去看题解，曼哈顿距离又是什么鬼？于是去B站上找一下曼哈顿距离的讲解，知道了就是两个点之间的横坐标距离与纵坐标距离的和。那这和解题有什么关系呢？上床在睡前想了一下，发现其实并不难。<br>题目中的情况虽然看起来很多很复杂，但其实要解决的就是”我“能不能比幽灵更快地到达目的地。因为中途被拦截地情况，也能变为让拦截者到了目的地之后等”我“，结果是一样的。因此，就是要考虑”我“的起点到目的地的曼哈顿距离是不是比所有幽灵到目的地的曼哈顿距离小。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">escapeGhosts</span>(<span class="params">ghosts, target</span>):</span><br><span class="line">    target_x, target_y = target</span><br><span class="line">    L = <span class="built_in">abs</span>(target_x)+<span class="built_in">abs</span>(target_y)</span><br><span class="line">    <span class="keyword">for</span> x, y <span class="keyword">in</span> ghosts:</span><br><span class="line">        l = <span class="built_in">abs</span>(x-target_x)+<span class="built_in">abs</span>(y-target_y)</span><br><span class="line">        <span class="keyword">if</span> l &lt;= L:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><br>还有一行的版本：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">escapeGhosts</span>(<span class="params">self, ghosts: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]], target: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">all</span>([<span class="built_in">abs</span>(target[<span class="number">0</span>])+<span class="built_in">abs</span>(target[<span class="number">1</span>]) &lt; <span class="built_in">abs</span>(ghost[<span class="number">0</span>]-target[<span class="number">0</span>])+<span class="built_in">abs</span>(ghost[<span class="number">1</span>]-target[<span class="number">1</span>]) <span class="keyword">for</span> ghost <span class="keyword">in</span> ghosts])</span><br><span class="line"></span><br><span class="line">作者：luanhz</span><br><span class="line">链接：https://leetcode-cn.com/problems/escape-the-ghosts/solution/wei-jin-zhe-sheng-pythonyi-xing-dai-ma-by-luanz/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>all() 函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。<br>元素除了是 0、空、None、False 外都算 True。</p>
</blockquote>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/hSCRQe"><img src="https://z3.ax1x.com/2021/08/22/hSCRQe.jpg" alt="逃脱阻碍者提交记录.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>曼哈顿距离</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_797. 所有可能的路径</title>
    <url>/2021/08/26/Leetcode-797-%E6%89%80%E6%9C%89%E5%8F%AF%E8%83%BD%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>797. 所有可能的路径<br>难度：中等</p>
<p>给你一个有&nbsp;<code>n</code>&nbsp;个节点的 <strong>有向无环图（DAG）</strong>，请你找出所有从节点 <code>0</code>&nbsp;到节点 <code>n-1</code>&nbsp;的路径并输出（<strong>不要求按特定顺序</strong>）</p>

<p>二维数组的第 <code>i</code> 个数组中的单元都表示有向图中 <code>i</code> 号节点所能到达的下一些节点，空就是没有下一个结点了。</p>

<p>译者注：有向图是有方向的，即规定了 a→b 你就不能从 b→a 。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<p><img style="height: 242px; width: 242px;" src="https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg" alt></p>

<pre><strong>输入：</strong>graph = [[1,2],[3],[3],[]]
<strong>输出：</strong>[[0,1,3],[0,2,3]]
<strong>解释：</strong>有两条路径 0 -&gt; 1 -&gt; 3 和 0 -&gt; 2 -&gt; 3
</pre>

<p><strong>示例 2：</strong></p>

<p><img style="height: 301px; width: 423px;" src="https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg" alt></p>

<pre><strong>输入：</strong>graph = [[4,3,1],[3,2,4],[3],[4],[]]
<strong>输出：</strong>[[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>graph = [[1],[]]
<strong>输出：</strong>[[0,1]]
</pre>

<p><strong>示例 4：</strong></p>

<pre><strong>输入：</strong>graph = [[1,2,3],[2],[3],[]]
<strong>输出：</strong>[[0,1,2,3],[0,2,3],[0,3]]
</pre>

<p><strong>示例 5：</strong></p>

<pre><strong>输入：</strong>graph = [[1,3],[2],[3],[]]
<strong>输出：</strong>[[0,1,2,3],[0,3]]
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
    <li><code>n == graph.length</code></li>
    <li><code>2 &lt;= n &lt;= 15</code></li>
    <li><code>0 &lt;= graph[i][j] &lt; n</code></li>
    <li><code>graph[i][j] != i</code>（即，不存在自环）</li>
    <li><code>graph[i]</code> 中的所有元素 <strong>互不相同</strong></li>
    <li>保证输入为 <strong>有向无环图（DAG）</strong></li>
</ul>


<h3 id="方法一：-回溯-深度优先搜索（DFS）"><a href="#方法一：-回溯-深度优先搜索（DFS）" class="headerlink" title="方法一：  回溯/深度优先搜索（DFS）"></a>方法一：  回溯/深度优先搜索（DFS）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allPathsSourceTarget</span>(<span class="params">self, graph: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        n = <span class="built_in">len</span>(graph)</span><br><span class="line">        ret = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">temp, node</span>):</span><br><span class="line">            <span class="keyword">if</span> node == n-<span class="number">1</span>:</span><br><span class="line">                ret.append(temp[:])</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> graph[node]:</span><br><span class="line">                temp.append(i)</span><br><span class="line">                backtrack(temp, i)</span><br><span class="line">                temp.pop()</span><br><span class="line">        backtrack([<span class="number">0</span>], <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<p>正常的回溯套路，需要注意的是：</p>
<ol>
<li>每个列表<code>apppend</code>的时候到底加的是什么东西；</li>
<li>开头的<code>0</code>的加上；</li>
<li><code>ret.append(temp[:])</code>用这种方式可以解决深浅拷贝的问题。</li>
</ol>
<h3 id="方法二：-宽度优先搜索（BFS）"><a href="#方法二：-宽度优先搜索（BFS）" class="headerlink" title="方法二： 宽度优先搜索（BFS）"></a>方法二： 宽度优先搜索（BFS）</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">allPathsSourceTarget</span>(<span class="params">self, graph: <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]</span>) -&gt; <span class="type">List</span>[<span class="type">List</span>[<span class="built_in">int</span>]]:</span><br><span class="line">        <span class="keyword">from</span> queue <span class="keyword">import</span> Queue</span><br><span class="line">        <span class="comment"># 创建一个先进先出的队列</span></span><br><span class="line">        q = Queue()</span><br><span class="line">        n = <span class="built_in">len</span>(graph)-<span class="number">1</span></span><br><span class="line">        ret = []</span><br><span class="line">        <span class="comment"># 向队列中加入元素</span></span><br><span class="line">        q.put([<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> q.empty():</span><br><span class="line">            <span class="comment"># 取出队列中的元素（因为是先进先出，所以是第一个）</span></span><br><span class="line">            tmp = q.get()</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> graph[tmp[-<span class="number">1</span>]]:</span><br><span class="line">                <span class="keyword">if</span> i == n:</span><br><span class="line">                    ret.append(tmp+[i])</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                q.put(tmp+[i])</span><br><span class="line">        <span class="keyword">return</span> ret</span><br></pre></td></tr></table></figure>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/hKFuX8"><img src="https://z3.ax1x.com/2021/08/26/hKFuX8.md.jpg" alt="提交记录.md.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>回溯</tag>
        <tag>深度优先搜索（DFS）</tag>
        <tag>广度优先搜索（BFS）</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode_881. 救生艇</title>
    <url>/2021/08/26/Leetcode-881-%E6%95%91%E7%94%9F%E8%89%87/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>881. 救生艇<br>难度：中等</p>
<p>第&nbsp;<code>i</code>&nbsp;个人的体重为&nbsp;<code>people[i]</code>，每艘船可以承载的最大重量为&nbsp;<code>limit</code>。</p>

<p>每艘船最多可同时载两人，但条件是这些人的重量之和最多为&nbsp;<code>limit</code>。</p>

<p>返回载到每一个人所需的最小船数。(保证每个人都能被船载)。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>people = [1,2], limit = 3
<strong>输出：</strong>1
<strong>解释：</strong>1 艘船载 (1, 2)
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>people = [3,2,2,1], limit = 3
<strong>输出：</strong>3
<strong>解释：</strong>3 艘船分别载 (1, 2), (2) 和 (3)
</pre>

<p><strong>示例 3：</strong></p>

<pre><strong>输入：</strong>people = [3,5,3,4], limit = 5
<strong>输出：</strong>4
<strong>解释：</strong>4 艘船分别载 (3), (3), (4), (5)</pre>

<p><strong>提示：</strong></p>

<ul>
    <li><code>1 &lt;=&nbsp;people.length &lt;= 50000</code></li>
    <li><code>1 &lt;= people[i] &lt;=&nbsp;limit &lt;= 30000</code></li>
</ul>


<h3 id="方法一：-贪心-排序-双指针"><a href="#方法一：-贪心-排序-双指针" class="headerlink" title="方法一： 贪心=排序+双指针"></a>方法一： 贪心=排序+双指针</h3><p>将<code>people</code>数组排序之后，用双指针的方法来做。要使船的数量尽可能少，那就让一个船上的人尽可能多，也就是让体重大的，尽可能和一个体重轻的坐一个船。两个指针<code>i</code>和<code>j</code>，一个从轻往重走，一个从重往轻走，如果可以一起坐船，两个指针一起动，<code>boats</code>计数自增；如果两个不能一起坐船，那就重的指针移动，计数自增；直到两个指针重合，这时候，计数还需要再自增一次。<br>贪心相当于思想，排序+双指针是具体的实现方法。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">numRescueBoats</span>(<span class="params">people, limit</span>):</span><br><span class="line">    people.sort()</span><br><span class="line">    i, j = <span class="number">0</span>, <span class="built_in">len</span>(people)-<span class="number">1</span></span><br><span class="line">    boats = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">if</span> people[i]+people[j] &gt; limit:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            boats+=<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            boats+=<span class="number">1</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i==j:</span><br><span class="line">            boats+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> boats</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">numRescueBoats</span>(<span class="params">self, people: <span class="type">List</span>[<span class="built_in">int</span>], limit: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        ans = <span class="number">0</span></span><br><span class="line">        people.sort()</span><br><span class="line">        light, heavy = <span class="number">0</span>, <span class="built_in">len</span>(people) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> light &lt;= heavy:</span><br><span class="line">            <span class="keyword">if</span> people[light] + people[heavy] &gt; limit:</span><br><span class="line">                heavy -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                light += <span class="number">1</span></span><br><span class="line">                heavy -= <span class="number">1</span></span><br><span class="line">            ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https://leetcode-cn.com/problems/boats-to-save-people/solution/jiu-sheng-ting-by-leetcode-solution-0nsp/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p>
<h3 id="方法二：-贪心"><a href="#方法二：-贪心" class="headerlink" title="方法二： 贪心"></a>方法二： 贪心</h3><p>这其实使我首先想到的方法，但。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">numRescueBoats</span>(<span class="params">people, limit</span>):</span><br><span class="line">    d = defaultdict(<span class="built_in">int</span>)</span><br><span class="line">    i, j = limit+<span class="number">1</span>, <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> people:</span><br><span class="line">        d[w] += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> i &gt; w:</span><br><span class="line">            i = w</span><br><span class="line">        <span class="keyword">if</span> j &lt; w:</span><br><span class="line">            j = w</span><br><span class="line">    boats = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i &lt; j:</span><br><span class="line">        <span class="keyword">if</span> d[j]==<span class="number">0</span>:</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> d[i] == <span class="number">0</span>:</span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> i+j &gt; limit:</span><br><span class="line">            boats += d[j]</span><br><span class="line">            j -= <span class="number">1</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        m = <span class="built_in">min</span>(d[i], d[j])</span><br><span class="line">        boats += m</span><br><span class="line">        d[i] -= m</span><br><span class="line">        d[j] -= m</span><br><span class="line">        <span class="comment"># i += (1-d[i]/1)</span></span><br><span class="line">        <span class="comment"># # if d[i]==0:</span></span><br><span class="line">        <span class="comment"># #     i-=1</span></span><br><span class="line">        <span class="comment"># j -= (1-d[j]/1)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> i &lt;= limit/<span class="number">2</span>:</span><br><span class="line">        boats += (d[i]+<span class="number">1</span>)//<span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        boats += d[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> boats</span><br></pre></td></tr></table></figure><br>说明：<br>这里的做法是先统计了每种体重的人数，然后再用双指针的方法根据人数来做。<br>每次进入循环的时候，都要先判断对应体重的人数是不是0，这是因为，如果是0而没有先做处理的话，会出现<code>if i+j &gt; limit:</code>依然被执行的情况。<br>以为这种方法会减少时间消耗，然而并没有。</p>
<h3 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h3><p><a href="https://imgtu.com/i/hKF2jK"><img src="https://z3.ax1x.com/2021/08/26/hKF2jK.jpg" alt="救生艇提交记录.jpg"></a></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
        <tag>贪心</tag>
        <tag>双指针</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-838-推多米诺</title>
    <url>/2022/02/21/Leetcode-838-%E6%8E%A8%E5%A4%9A%E7%B1%B3%E8%AF%BA/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>模拟</tag>
        <tag>Leetcode中等</tag>
        <tag>双指针</tag>
        <tag>广度优先搜索（BFS）</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode-969-煎饼排序</title>
    <url>/2022/02/19/Leetcode-969-%E7%85%8E%E9%A5%BC%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>969. 煎饼排序</p>
<p>难度：中等</p>
<p>给你一个整数数组 <code>arr</code> ，请使用 <strong>煎饼翻转</strong><em> </em>完成对数组的排序。</p>

<p>一次煎饼翻转的执行过程如下：</p>

<ul>
   <li>选择一个整数 <code>k</code> ，<code>1 &lt;= k &lt;= arr.length</code></li>
   <li>反转子数组 <code>arr[0...k-1]</code>（<strong>下标从 0 开始</strong>）</li>
</ul>

<p>例如，<code>arr = [3,2,1,4]</code> ，选择 <code>k = 3</code> 进行一次煎饼翻转，反转子数组 <code>[3,2,1]</code> ，得到 <code>arr = [<strong>1</strong>,<strong>2</strong>,<strong>3</strong>,4]</code> 。</p>

<p>以数组形式返回能使 <code>arr</code> 有序的煎饼翻转操作所对应的 <code>k</code> 值序列。任何将数组排序且翻转次数在&nbsp;<code>10 * arr.length</code> 范围内的有效答案都将被判断为正确。</p>

<p>&nbsp;</p>

<p><strong>示例 1：</strong></p>

<pre><strong>输入：</strong>[3,2,4,1]
<strong>输出：</strong>[4,2,4,3]
<strong>解释：</strong>
我们执行 4 次煎饼翻转，k 值分别为 4，2，4，和 3。
初始状态 arr = [3, 2, 4, 1]
第一次翻转后（k = 4）：arr = [<strong>1</strong>, <strong>4</strong>, <strong>2</strong>, <strong>3</strong>]
第二次翻转后（k = 2）：arr = [<strong>4</strong>, <strong>1</strong>, 2, 3]
第三次翻转后（k = 4）：arr = [<strong>3</strong>, <strong>2</strong>, <strong>1</strong>, <strong>4</strong>]
第四次翻转后（k = 3）：arr = [<strong>1</strong>, <strong>2</strong>, <strong>3</strong>, 4]，此时已完成排序。 
</pre>

<p><strong>示例 2：</strong></p>

<pre><strong>输入：</strong>[1,2,3]
<strong>输出：</strong>[]
<strong>解释：
</strong>输入已经排序，因此不需要翻转任何内容。
请注意，其他可能的答案，如 [3，3] ，也将被判断为正确。
</pre>

<p>&nbsp;</p>

<p><strong>提示：</strong></p>

<ul>
   <li><code>1 &lt;= arr.length &lt;= 100</code></li>
   <li><code>1 &lt;= arr[i] &lt;= arr.length</code></li>
   <li><code>arr</code> 中的所有整数互不相同（即，<code>arr</code> 是从 <code>1</code> 到 <code>arr.length</code> 整数的一个排列）</li>
</ul>


<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>一开始觉得有点懵，但稍微想了一下，其实简单，每一次都将未排序的部分中找到最大的那个，然后将它到第一个 的这部分翻转，<br>再将未排序的部分整体翻转，也就是每一次将未排序的最大的那个弄到已排序的开头。<br>这样的操作一共就是<code>2*len(arr)</code>，符合条件。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pancakeSort</span>(<span class="params">self, arr</span>):</span><br><span class="line">        ans = []</span><br><span class="line">        n = <span class="built_in">len</span>(arr)</span><br><span class="line">        m = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> m &lt; n:</span><br><span class="line">            max_i = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n - m):</span><br><span class="line">                <span class="keyword">if</span> arr[i] &gt; arr[max_i]:</span><br><span class="line">                    max_i = i</span><br><span class="line">            arr = arr[max_i::-<span class="number">1</span>] + arr[max_i + <span class="number">1</span>:]</span><br><span class="line">            arr = arr[n - m - <span class="number">1</span>::-<span class="number">1</span>] + arr[n - m::]</span><br><span class="line">            m += <span class="number">1</span></span><br><span class="line">            ans.append(max_i + <span class="number">1</span>)</span><br><span class="line">            ans.append(n - m + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure>
<p>官解想法和我的是一样的。<br>只是实现上不一样。<br>我用的列表切片可真搞我。还有下标和range范围。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pancakeSort</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr), <span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> arr[i] &gt; arr[index]:</span><br><span class="line">                    index = i</span><br><span class="line">            <span class="keyword">if</span> index == n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            m = index</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((m + <span class="number">1</span>) // <span class="number">2</span>):</span><br><span class="line">                arr[i], arr[m - i] = arr[m - i], arr[i]  <span class="comment"># 原地反转</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n // <span class="number">2</span>):</span><br><span class="line">                arr[i], arr[n - <span class="number">1</span> - i] = arr[n - <span class="number">1</span> - i], arr[i]  <span class="comment"># 原地反转</span></span><br><span class="line">            ans.append(index + <span class="number">1</span>)</span><br><span class="line">            ans.append(n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br><span class="line"></span><br><span class="line">作者：LeetCode-Solution</span><br><span class="line">链接：https://leetcode-cn.com/problems/pancake-sorting/solution/jian-bing-pai-xu-by-leetcode-solution-rzzu/</span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure></p>
<p>Python可以用切片，一般的可以用双指针来实现。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pancakeSort</span>(<span class="params">self, arr: <span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        ans = []</span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr), <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            k = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">                <span class="keyword">if</span> arr[i] &gt; arr[k]:</span><br><span class="line">                    k = i</span><br><span class="line">            <span class="keyword">if</span> k == n - <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            i, j = <span class="number">0</span>, k</span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">                i, j = i + <span class="number">1</span>, j - <span class="number">1</span></span><br><span class="line">            i, j = <span class="number">0</span>, n - <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> i &lt; j:</span><br><span class="line">                arr[i], arr[j] = arr[j], arr[i]</span><br><span class="line">                i, j = i + <span class="number">1</span>, j - <span class="number">1</span></span><br><span class="line">            ans.append(k + <span class="number">1</span>)</span><br><span class="line">            ans.append(n)</span><br><span class="line">        <span class="keyword">return</span> ans</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode中等</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的一些内建函数和基本句法</title>
    <url>/2030/02/17/Python%E7%9A%84%E4%B8%80%E4%BA%9B%E5%86%85%E5%BB%BA%E5%87%BD%E6%95%B0%E5%92%8C%E5%9F%BA%E6%9C%AC%E5%8F%A5%E6%B3%95/</url>
    <content><![CDATA[<h3 id="any-和all"><a href="#any-和all" class="headerlink" title="any()和all()"></a><code>any()</code>和<code>all()</code></h3><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p><code>any()</code>函数用来判断给定的迭代参数<code>iterable</code>中是否含有<code>True</code>，如果有（只要有一个），则返回<code>True</code>.<br>函数等价于：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">any</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure></p>
<p><code>all()</code>函数用来判断给定的迭代参数<code>iterable</code>中是否全部是是<code>True</code>，如果是，则返回<code>True</code>。<br>函数等价于：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">all</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><code>any()</code>：只要有一个<code>True</code>，就返回<code>True</code>；<br><code>all()</code>：全部是<code>True</code>，就返回<code>True</code>。<br><strong>注意</strong> ：空元组、空列表返回值为True，这里要特别注意。</p>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><p>示例来自菜鸟教程。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])  <span class="comment"># 列表list，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])   <span class="comment"># 列表list，存在一个为空的元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span>])        <span class="comment"># 列表list,元素全为0,&#x27;&#x27;,false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))  <span class="comment"># 元组tuple，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))   <span class="comment"># 元组tuple，存在一个为空的元素</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>((<span class="number">0</span>, <span class="string">&#x27;&#x27;</span>, <span class="literal">False</span>))        <span class="comment"># 元组tuple，元素全为0,&#x27;&#x27;,false</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>([]) <span class="comment"># 空列表</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">any</span>(()) <span class="comment"># 空元组</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])  <span class="comment"># 列表list，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>])   <span class="comment"># 列表list，存在一个为空的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([<span class="number">0</span>, <span class="number">1</span>，<span class="number">2</span>, <span class="number">3</span>])          <span class="comment"># 列表list，存在一个为0的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))  <span class="comment"># 元组tuple，元素都不为空或0</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;d&#x27;</span>))   <span class="comment"># 元组tuple，存在一个为空的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>((<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))          <span class="comment"># 元组tuple，存在一个为0的元素</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">   </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>([])             <span class="comment"># 空列表</span></span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">all</span>(())             <span class="comment"># 空元组</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><br>下面示例来自CSDN。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">any</span>(x**<span class="number">2</span> == <span class="number">16</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)))</span><br><span class="line"><span class="comment"># True</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode题解</title>
    <url>/2021/08/17/Leetcode%E9%A2%98%E8%A7%A3/</url>
    <content><![CDATA[<p>因为既想在Github上传题解思路和代码，又想在博客上传，但保证两边同步好麻烦，所以这里列一个列表，链接到Github上。</p>
<h3 id="301-400"><a href="#301-400" class="headerlink" title="301-400"></a>301-400</h3><ul>
<li><a href="https://github.com/shengrihui/Leetcode/blob/c396f399bcca39c40923411eabf0306c7d89739f/3/345.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D/345.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%85%83%E9%9F%B3%E5%AD%97%E6%AF%8D.md">345. 反转字符串中的元音字母</a><h3 id="501-600"><a href="#501-600" class="headerlink" title="501~600"></a>501~600</h3></li>
<li><a href="https://github.com/shengrihui/Leetcode/blob/5acbc6232b0a90c9cf3beaaa4972ba3e9174d7ab/5/526.%20%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97/526.%20%E4%BC%98%E7%BE%8E%E7%9A%84%E6%8E%92%E5%88%97.md">526.优美的排列</a></li>
<li>[541. 反转字符串 ](<a href="https://github.com/shengrihui/Leetcode/blob/c5b27e27baac035e0fddb3e64867fab88630da82/5/541.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20II/541.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20II.md">https://github.com/shengrihui/Leetcode/blob/c5b27e27baac035e0fddb3e64867fab88630da82/5/541.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20II/541.%20%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%20II.md</a></li>
<li><a href="https://github.com/shengrihui/Leetcode/blob/96ca3695c85441f9cc189b123944249f5bb81bbc/5/551.%20%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95%20I/551.%20%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95%20I_%E9%A2%98%E8%A7%A3.md">551. 学生出勤记录 I_题解</a></li>
<li><a href="https://github.com/shengrihui/Leetcode/blob/c396f399bcca39c40923411eabf0306c7d89739f/5/552.%20%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95%20II/552.%20%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95%20II.md">552. 学生出勤记录 II</a></li>
</ul>
]]></content>
      <categories>
        <category>Leetcode</category>
      </categories>
      <tags>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>cuda</title>
    <url>/2021/08/29/cuda/</url>
    <content><![CDATA[<p>nvcc -v 查看cuda版本<br>nvidia-smi 查看cuda版本<br>这俩有些区别</p>
<p>pip安装<br>pip3 install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f <a href="https://download.pytorch.org/whl/torch_stable.html">https://download.pytorch.org/whl/torch_stable.html</a></p>
<p>conda<br>NOTE: ‘conda-forge’ channel is required for cudatoolkit 11.1<br>conda install pytorch torchvision torchaudio cudatoolkit=11.1 -c pytorch -c conda-forge</p>
<p><a href="https://pytorch.org/">https://pytorch.org/</a></p>
]]></content>
      <categories>
        <category>一些命令</category>
      </categories>
      <tags>
        <tag>cuda</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>hexo命令.md</title>
    <url>/2021/10/03/hexo%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>B站视频：<a href="https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.999.0.0">https://www.bilibili.com/video/BV1Yb411a7ty?spm_id_from=333.999.0.0</a></p>
<h5 id="安装配置hexo"><a href="#安装配置hexo" class="headerlink" title="安装配置hexo"></a>安装配置hexo</h5><ol>
<li>安装nodejs和npm<br> nodejs网站：nodejs.org<br> 可以用<code>nodejs -v</code> <code>npm -v</code>检查是否安装成功</li>
<li>安装淘宝镜像cnpm<br> <code>npm  insatll -g cnpm --registry=https://registry.npm.taobao.org</code><br> <code>-g</code>全局安装<br> <code>cnpm -v</code>检查是否安装成功</li>
<li>安装hexo框架<br> <code>cnpm install -g hexo-cli</code><br> <code>hexo -v</code></li>
</ol>
<h5 id="搭建博客"><a href="#搭建博客" class="headerlink" title="搭建博客"></a>搭建博客</h5><ol>
<li>新建一个文件夹， 进入该文件夹，<code>hexo init</code></li>
<li>或者 <code>hexo init (名字)</code>;</li>
<li>启动 start/service<br> <code>hexo s</code></li>
<li>清理一下<br> <code>hexo clean</code></li>
<li>生成<br> <code>hexo g</code></li>
<li>安装git插件<br> <code>cnpm install --save hexo-deployer-git</code></li>
<li>上传<br> <code>hexo d</code><br> 简单点可以和生成一起：<code>hexo g -d</code></li>
<li>标签页<br> <code>hexo n page tags</code></li>
</ol>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown语法</title>
    <url>/2021/08/05/markdown%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><blockquote>
<p>Markdown 支持两种形式的标题, [Setext] [1] 和 [atx] [2].<br>Setext 样式的标题使用的等号来表示一级标题, 使用连字符表示二级标题. 例如:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">&gt;This is an H1</span></span><br><span class="line"><span class="section">=============</span></span><br><span class="line">This is an H2</span><br><span class="line">&gt;-------------</span><br></pre></td></tr></table></figure>
<p>任意长度的 = 或 - 都是可以的.<br>Atx 样式的标题每行开头使用 1-6 井号, 对应 1-6 级标题. 例如:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># This is an H1</span></span><br><span class="line"><span class="section">## This is an H2</span></span><br><span class="line"><span class="section">###### This is an H6</span></span><br></pre></td></tr></table></figure>
<p>可选地, 你可以 “关闭” atx 样式的标题. 这纯粹是美化需要 — 如果你认为这样美观一些就用吧. 关&gt;闭标签的井号数量甚至不需要和起始位置的匹配. (起始的井号数量决定了标题的级别.) :</p>
<h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><h3 id="This-is-an-H3"><a href="#This-is-an-H3" class="headerlink" title="This is an H3"></a>This is an H3</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是一级标题</span></span><br><span class="line"><span class="section">## 这是二级标题</span></span><br><span class="line"><span class="section">### 这是三级标题</span></span><br><span class="line"><span class="section">#### 这是四级标题 ##</span></span><br><span class="line"><span class="section">这也是一级标题</span></span><br><span class="line"><span class="section">=========</span></span><br><span class="line"><span class="section">这是二级标题</span></span><br><span class="line"><span class="section">-------</span></span><br></pre></td></tr></table></figure>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h1 id="这也是一级标题"><a href="#这也是一级标题" class="headerlink" title="这也是一级标题"></a>这也是一级标题</h1><h2 id="这是二级标题-1"><a href="#这是二级标题-1" class="headerlink" title="这是二级标题"></a>这是二级标题</h2></blockquote>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="文档-1"><a href="#文档-1" class="headerlink" title="文档"></a>文档</h3><blockquote>
<p>Markdown 使用 email 样式的 &gt; 字符作为块引用. 如果你熟悉 email 消息中的引用段落, 那么你同样可以在 Markdown 中创建块引用. 最好对引用文本采取强制换行并在每一行行首放一个 &gt; :</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line"><span class="quote">&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span></span><br><span class="line"><span class="quote">&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line"><span class="quote">&gt; id sem consectetuer libero luctus adipiscing.</span></span><br></pre></td></tr></table></figure>
<p>Markdown 中可以简便地只在每一个需要强制换行的段落的首行前面加上一个 &gt; :</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,</span></span><br><span class="line">consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.</span><br><span class="line">Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"></span><br><span class="line"><span class="quote">&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse</span></span><br><span class="line">id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
<p>块引用可以嵌套 (例如, 块引用中包含块引用) , 只需添加额外层级的 &gt; 即可:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; This is the first level of quoting.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; &gt; This is nested blockquote.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; Back to the first level.</span></span><br></pre></td></tr></table></figure>
<p>块引用可以包含 Markdown 元素, 包括标题, 列表和代码块:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; ## This is a header.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; 1.   This is the first list item.</span></span><br><span class="line"><span class="quote">&gt; 2.   This is the second list item.</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt; Here&#x27;s some example code:</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;     return shell<span class="emphasis">_exec(&quot;echo $input | $markdown_</span>script&quot;);</span></span><br><span class="line">&gt;、</span><br></pre></td></tr></table></figure>
<p>任何合适的文本编辑器都应该可以很方便的创建 email 样式的块引用. 例如, 用 BBEdit 就可以选取文本然后从 ‘Text’ 菜单中选择 ‘Increase Quote Level’.</p>
</blockquote>
<h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">&gt;这是一级引用</span><br><span class="line">&gt;&gt;这是二级引用</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;这是好多级引用</span><br></pre></td></tr></table></figure>
<h4 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h4><blockquote>
<p>这是一级引用</p>
<blockquote>
<p>这是二级引用</p>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>这是好多级引用</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="文档-2"><a href="#文档-2" class="headerlink" title="文档"></a>文档</h3><blockquote>
<p>Markdown 支持有序列表和无序列表.</p>
<p>无序列表使用星号, 加号, 和连字符 — 这些符号是可互换的 — 最为列表标记:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   Red</span><br><span class="line"><span class="bullet">*</span>   Green</span><br><span class="line"><span class="bullet">*</span>   Blue</span><br></pre></td></tr></table></figure>
<p>等价于:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">+</span>   Red</span><br><span class="line"><span class="bullet">+</span>   Green</span><br><span class="line"><span class="bullet">+</span>   Blue</span><br></pre></td></tr></table></figure>
<p>以及:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span>   Red</span><br><span class="line"><span class="bullet">-</span>   Green</span><br><span class="line"><span class="bullet">-</span>   Blue</span><br></pre></td></tr></table></figure>
<p>有序列表使用数字加句号:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>  Bird</span><br><span class="line"><span class="bullet">2.</span>  McHale</span><br><span class="line"><span class="bullet">3.</span>  Parish</span><br></pre></td></tr></table></figure>
<p>需要注意的是这里的数字序号对于最终生成 HTML 是没有影响的. 这里 Markdown 输出的 HTML 列表是:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>McHale<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Parish<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>即使你把列表写成这样:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>  Bird</span><br><span class="line"><span class="bullet">1.</span>  McHale</span><br><span class="line"><span class="bullet">1.</span>  Parish</span><br></pre></td></tr></table></figure>
<p>甚至这样:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">3.</span> Bird</span><br><span class="line"><span class="bullet">1.</span> McHale</span><br><span class="line"><span class="bullet">8.</span> Parish</span><br></pre></td></tr></table></figure>
<p>你都讲得到相同的 HTML 输出. 重点是, 如果你希望你的 Markdown 源码中的列表序号匹配输出的 HTML 列表序号, 你应该使用正常的序号 . 当然, 如果你想简单点, 也可不必这么做.</p>
<p>即使你使用错误的列表序号, 最终生成的列表仍然会以序号 1 开始. 在未来的版本里, Markdown 可能支持以任意数字作为列表起始序号.</p>
<p>List 标记通常从左边开始, 可以用三个及以上的空格来缩进. List 标记后面应该跟一个以上的空格或者一个水平制表符.</p>
<p>为了使列表更美观, 可以用悬挂缩进来格式化列表项:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line"><span class="code">    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span></span><br><span class="line"><span class="code">    viverra nec, fringilla in, laoreet vitae, risus.</span></span><br><span class="line"><span class="code">*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span></span><br><span class="line"><span class="code">    Suspendisse id sem consectetuer libero luctus adipiscing.</span></span><br><span class="line"><span class="code">    但是这不是必须的:</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span>   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.</span><br><span class="line">Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,</span><br><span class="line">viverra nec, fringilla in, laoreet vitae, risus.</span><br><span class="line"><span class="bullet">*</span>   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.</span><br><span class="line">Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
<p>如果列表项中包含空行, Markdown 会在 HTML 输出中用 </p><p> 来包裹他们. 例如, 下面的输入:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   Bird</span><br><span class="line"><span class="bullet">*</span>   Magic</span><br></pre></td></tr></table></figure>
<p>会输出:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Magic<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   Bird</span><br><span class="line"></span><br><span class="line"><span class="bullet">*</span>   Magic</span><br></pre></td></tr></table></figure>
<p>会输出:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bird<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>Magic<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>列表项可能包含多个段落. 列表项中的每个段落都必须用 4 个空格或一个水平制表符来缩进:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1.</span>  This is a list item with two paragraphs. Lorem ipsum dolor</span><br><span class="line"><span class="code">    sit amet, consectetuer adipiscing elit. Aliquam hendrerit</span></span><br><span class="line"><span class="code">    mi posuere lectus.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">    Vestibulum enim wisi, viverra nec, fringilla in, laoreet</span></span><br><span class="line"><span class="code">    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum</span></span><br><span class="line"><span class="code">    sit amet velit.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">2.</span>  Suspendisse id sem consectetuer libero luctus adipiscing.</span><br></pre></td></tr></table></figure>
<p>同上, 悬挂缩进只是为了更美观, 而非强制要求:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   This is a list item with two paragraphs.</span><br><span class="line"></span><br><span class="line"><span class="code">    This is the second paragraph in the list item. You&#x27;re</span></span><br><span class="line"><span class="code">only required to indent the first line. Lorem ipsum dolor</span></span><br><span class="line"><span class="code">sit amet, consectetuer adipiscing elit.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">*</span>   Another item in the same list.</span><br></pre></td></tr></table></figure>
<p>如果列表项中包含块注释 , 块注释标记 &gt; 需要缩进:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span>   A list item with a blockquote:</span><br><span class="line"></span><br><span class="line"><span class="code">    &gt; This is a blockquote</span></span><br><span class="line"><span class="code">    &gt; inside a list item.</span></span><br></pre></td></tr></table></figure>
<p>如果列表项中有代码块, 代码块需要 双倍 缩进— 8 个空格或者两个水平制表符:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">*</span> A list item with a code block:</span><br><span class="line"></span><br><span class="line"><span class="code">      &lt;code goes here&gt;</span></span><br></pre></td></tr></table></figure>
<p>有时候无意中出发有序列表, 如下面这样的代码:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">1986.</span> What a great season.</span><br></pre></td></tr></table></figure>
<p>即使, 如果一行开头满足 number-period-space 模式. 可以通过转义点号来避免这种情况:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1986\. What a great season.</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>略</p>
<h2 id="代码块和代码"><a href="#代码块和代码" class="headerlink" title="代码块和代码"></a>代码块和代码</h2><h3 id="文档-3"><a href="#文档-3" class="headerlink" title="文档"></a>文档</h3><ul>
<li>代码块<blockquote>
<p>预格式化的代码块用于输出编程语言和标记语言. 不同于普通段落, 代码块中的行会被原样呈现. Markdown 会用 <pre> 和 <code> 标签包围代码块.</code></pre></p>
<p>要在 Markdown 中插入代码块, 只需要将每一行都缩进 4 个空格或者 1 个水平制表符. 例如, 下面的输入:</p>
<pre><code>This is a normal paragraph:

    This is a code block.
</code></pre><p>Markdown 会生成:</p>
<pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;This is a code block.
&lt;/code&gt;&lt;/pre&gt;
</code></pre><p>只有一级缩进 — 4 个空格或者 1 个水平制表符 — 会从代码块中的每一行中移除. 例如:</p>
<pre><code>Here is an example of AppleScript:

tell application &quot;Foo&quot;
    beep
end tell
</code></pre><p>会生成:</p>
<pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;
    beep
end tell
&lt;/code&gt;&lt;/pre&gt;
</code></pre></blockquote>
</li>
<li>代码<blockquote>
<p>要输出一个代码片段, 需要使用重音符号 (`). 不同于预格式的代码块, 代码片段只是在普通段落中标识出代码. 例如:</p>
<pre><code> Use the `printf()` function.
</code></pre><p>会生成:</p>
<pre><code> &lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;
</code></pre><p>要在代码片段中包含字面量的重音符号, 可以使用多个重音符号作为起始和结束标记:</p>
<pre><code> ``There is a literal backtick (`) here.``
</code></pre><p>会生成:</p>
<pre><code> &lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;
</code></pre><p>包含代码片段的重音符号可以包含空格 — 起始标记后一个, 结束标记前一个. 这使你可以在代码片段开始和结束位置使用重音符号的字面量:</p>
<pre><code> A single backtick in a code span: `` ` ``

 A backtick-delimited string in a code span: `` `foo` ``
</code></pre><p>会生成:</p>
<pre><code> &lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;

 &lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;
</code></pre><p>在代码片段中, 英镑符号和尖括号会被转换成相应的字符实体, 这使得包含 HTML 标签很容易. Markdown 会将下面的代码:</p>
<pre><code> Please don&#39;t use any `&lt;blink&gt;` tags.
</code></pre><p> 转成:</p>
<pre><code> &lt;p&gt;Please don&#39;t use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;
</code></pre><p>这样写:</p>
<pre><code> `&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.
</code></pre><p>会生成:</p>
<pre><code> &lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encoded
 equivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;
</code></pre></blockquote>
</li>
</ul>
<h3 id="文档总结和补充"><a href="#文档总结和补充" class="headerlink" title="文档总结和补充"></a>文档总结和补充</h3><ol>
<li>选中写好了的代码，然后tab缩进就好了。</li>
<li>还有一种是通过一对  `` (英文状态下tab键上面那个) 或者 <del>~  (英文状态下shift+tab上面那个) 将代码包起来。三个反撇号和三个波浪号各一行。再第一个```或</del>~后可以加上代码的语言，这样可以有更好的显示效果。</li>
</ol>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><ul>
<li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5>  要加粗的文字左右分别用两个*号包起来</li>
<li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5>  要倾斜的文字左右分别用一个*号包起来</li>
<li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5> 要倾斜和加粗的文字左右分别用三个*号包起来</li>
<li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5>  要加删除线的文字左右分别用两个~~号包起来<h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4>  <strong>这是加粗的文字</strong><br>  <em>这是倾斜的文字</em><br>  <strong><em>这是倾斜加粗的文字</em></strong><br>  <del>这是添加删除线</del><h4 id="效果如下："><a href="#效果如下：" class="headerlink" title="效果如下："></a>效果如下：</h4><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><strong><em>这是倾斜加粗的文字</em></strong><br><del>这是添加删除线</del></li>
</ul>
<h3 id="4-分割线"><a href="#4-分割线" class="headerlink" title="4.  分割线"></a>4.  分割线</h3><p>三个或者三个以上的 - 或者 * 都可以。</p>
<h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><pre><code>---
----
***
****
</code></pre><h4 id="效果-2"><a href="#效果-2" class="headerlink" title="效果"></a>效果</h4><h2 id="—"><a href="#—" class="headerlink" title="—-"></a>—-</h2><hr>
<hr>
<h3 id="5-图片"><a href="#5-图片" class="headerlink" title="5. 图片"></a>5. 图片</h3><h4 id="语法-amp-示例"><a href="#语法-amp-示例" class="headerlink" title="语法&amp;示例"></a>语法&amp;示例</h4><pre><code>本地：
  ![狗]（markdown语法/dog.jpg &quot;狗&quot;）
</code></pre><h4 id="效果-3"><a href="#效果-3" class="headerlink" title="效果"></a>效果</h4><img src="/.io//08/05/markdown%E8%AF%AD%E6%B3%95/dog.jpg" class title="狗">
<p><img src="/.io//dog.jpg" width="256" height="256"></p>
<p> <img src="/.io//08/05/markdown%E8%AF%AD%E6%B3%95/dog.jpg" class title="狗">{:width=”30px” height=”10px”}</p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>next主题配置</title>
    <url>/2021/08/20/next%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="04-正确姿势打开标签页和分类页"><a href="#04-正确姿势打开标签页和分类页" class="headerlink" title="04 正确姿势打开标签页和分类页"></a>04 正确姿势打开标签页和分类页</h4><ol>
<li>命令<code>hexo n page tags</code>,source文件夹中多出一个包含index.html的tags文件夹。这时候博客中的“标签就能打开了。</li>
<li>修改index.html文件。<code>title</code>改为<code>标签</code>，增加一行<code>type: tags</code>（这句不写标签页不会有标签）。</li>
<li>命令：<code>hexo n page categories</code>创建分类页。</li>
<li>修改categories里的index.html ，与之前类似。</li>
</ol>
<h4 id="05-主题样式的更改"><a href="#05-主题样式的更改" class="headerlink" title="05 主题样式的更改"></a>05 主题样式的更改</h4><p>在样式配置文件中修改<code>Schemes</code>项。</p>
<h4 id="04-设置主题头像"><a href="#04-设置主题头像" class="headerlink" title="04 设置主题头像"></a>04 设置主题头像</h4><p>主题配置文件中<code>Avatar</code>项</p>
<h4 id="07-更改作者和标题以及链接"><a href="#07-更改作者和标题以及链接" class="headerlink" title="07 更改作者和标题以及链接"></a>07 更改作者和标题以及链接</h4><h4 id="08-启用侧边栏社交链接"><a href="#08-启用侧边栏社交链接" class="headerlink" title="08 启用侧边栏社交链接"></a>08 启用侧边栏社交链接</h4><ul>
<li>主题配置文件的<code>Social</code>项。</li>
</ul>
<h4 id="09-启用友情链接"><a href="#09-启用友情链接" class="headerlink" title="09 启用友情链接"></a>09 启用友情链接</h4><p>主题配置文件中<code>links_settings</code>项。</p>
<h4 id="10-新建一篇文章"><a href="#10-新建一篇文章" class="headerlink" title="10 新建一篇文章"></a>10 新建一篇文章</h4><ul>
<li><code>hexo n 文章名</code> 新建一篇文章</li>
<li>在文章里添加标签和分类：<br>  tags:<pre><code> - xx
 - xx
    categories:
    xx
</code></pre></li>
</ul>
<h4 id="11-Markdown的使用"><a href="#11-Markdown的使用" class="headerlink" title="11 Markdown的使用"></a>11 Markdown的使用</h4><h4 id="12-开启文章打赏功能"><a href="#12-开启文章打赏功能" class="headerlink" title="12 开启文章打赏功能"></a>12 开启文章打赏功能</h4><p>主题配置文件中<code>reward</code>项。</p>
<h4 id="13-开启订阅公众号"><a href="#13-开启订阅公众号" class="headerlink" title="13 开启订阅公众号"></a>13 开启订阅公众号</h4><p>主题配置文件中<code>wechat Subscriber</code>项。</p>
<h4 id="14-设置头像是圆形可旋转"><a href="#14-设置头像是圆形可旋转" class="headerlink" title="14 设置头像是圆形可旋转"></a>14 设置头像是圆形可旋转</h4><ul>
<li>打开文件<code>..\themes\hexo-theme-next\source\css\_common\outline\sidebar\sidebar-author.sty</code>，对其中的参数进行修改。</li>
<li>在主题配置文件中修改： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># If true, the avatar will be dispalyed in circle.</span><br><span class="line">rounded: true</span><br><span class="line"># If true, the avatar will be rotated with the cursor.</span><br><span class="line">rotated: true</span><br></pre></td></tr></table></figure>
第一个是让头像在圆中显示，第二个是鼠标移上去后旋转。</li>
</ul>
<h4 id="15-首页设置文章阅读全文"><a href="#15-首页设置文章阅读全文" class="headerlink" title="15 首页设置文章阅读全文"></a>15 首页设置文章阅读全文</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt:</span><br><span class="line">  depth: 3  #按层来算，也就是按代码块来算</span><br><span class="line">  excerpt_excludes: []</span><br><span class="line">  more_excludes: []</span><br><span class="line">  hideWholePostExcerpts: true</span><br></pre></td></tr></table></figure>
<h4 id="背景黑色"><a href="#背景黑色" class="headerlink" title="背景黑色"></a>背景黑色</h4><h4 id="fork-Github"><a href="#fork-Github" class="headerlink" title="fork Github"></a>fork Github</h4><p>打开<code>..\themes\hexo-theme-next\layout</code>中的文件<code>_layout.swig</code>。<br>在<a href="https://tholman.com/github-corners/">https://tholman.com/github-corners/</a> 中选一个样式，将代码复制到文件中的<code>&lt;/header&gt;</code>前，并修改称自己的GitHub链接。</p>
<h4 id="搜索功能"><a href="#搜索功能" class="headerlink" title="搜索功能"></a>搜索功能</h4><p>按官方文档的local search来。<a href="http://theme-next.iissnan.com/third-party-services.html">http://theme-next.iissnan.com/third-party-services.html</a></p>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-第五章设备管理</title>
    <url>/2022/07/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%AC%E4%BA%94%E7%AB%A0%E8%AE%BE%E5%A4%87%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<pre><code>设备管理的主要目标是屏蔽I/O设备的硬件特性，向用户提供使用I/O设备的方便接口，充分发挥设备的利用率。 
</code></pre><p>就是提供用户一个按钮，不用考虑硬件具体的。</p>
<pre><code>设备管理的主要功能有：缓冲区的管理、设备分配、设备处理、虚拟设备及实现设备独立性等。
</code></pre><p>缓冲区的管理：只要有（主机和输入输出）速度不一致，就可以有缓冲；<br>设备处理：设备也是一种资源；</p>
<h3 id="5-1-I-O-系-统"><a href="#5-1-I-O-系-统" class="headerlink" title="5.1   I/O  系  统"></a>5.1   I/O  系  统</h3><p>I/O设备——分类<br>　　分类目的：简化设备管理程序，不同的设备对应不同的管理程序，但对于同类设备可利用相同的程序或少量的修改即可。<br>1.数据传输速率:低速设备、中速设备、高速设备。<br>2.数据的传输单位：块设备、字符设备。<br>3.设备的共享属性：独占设备、共享设备、虚拟设备。 </p>
<p>设备控制器<br>链接CPU和设备，接受CPU的指令，控制设备，让CPU不那么繁忙。</p>
<p>I/O通道：一种特殊的处理机，只有输入输出指令，没有内存，与CPU共享内存。</p>
<ul>
<li>字节多路通道(Byte Multiplexor Channel)<br>  <img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220613/字    节多路通道.49vsqc7gr940.webp" alt="字节多路通道"><br>  时间片轮转，一次一个子通道传输一个字节的数据，然后下一个子通道。</li>
<li>数组选择通道(Block Selector Channel)<br>  和上一个相比，一个子通道会独占主通道，传输完为止。</li>
<li>数组多路通道(Block Multiplexor Channel)</li>
</ul>
<p>“瓶颈”问题<br>通道也是硬件，硬件价格高。<br>解决一个设备只能一个通道的问题，可以通过增加通路的方式。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220613/瓶颈问题.1clfcfk7eo00.webp" alt="瓶颈问题"></p>
<p>小总结<br>最开始是I/O设备、CPU直接连设备总线，后来加入设备管理器、通道，就是为了减少CPU繁忙的事务。</p>
<h3 id="5-2-I-O控制方式"><a href="#5-2-I-O控制方式" class="headerlink" title="5.2   I/O控制方式"></a>5.2   I/O控制方式</h3><p>所谓I/O控制方式是指CPU何时以及如何去驱动I/O设备、如何控制I/O设备与主机之间进行数据传输。<br>主要区别在于I/O过程中的CPU干预程度。</p>
<h4 id="程序I-O方式"><a href="#程序I-O方式" class="headerlink" title="程序I/O方式"></a>程序I/O方式</h4><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220613/程序I/O方式.208g81f7jmf4.webp" alt="O方式"></p>
<p>在这个过CPU始终在等待外设准备好，直到设备的标志位为0。</p>
<p>在该方式中，CPU之所以要不断地测试I/O设备的状态，就是因为在CPU中无中断机构 使I/O设备无法向CPU报告它已完成了一个字符的输入操作。<br>意思就是，CPU要一直盯着外设的状态，CPU不能在这段时间去干别的事情。】</p>
<h4 id="中断驱动I-O控制方式"><a href="#中断驱动I-O控制方式" class="headerlink" title="中断驱动I/O控制方式"></a>中断驱动I/O控制方式</h4><p>在程序I/O方式的基础上加入中断驱动。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/中断驱动.7i0z1rf2m3k0.webp" alt="中断驱动"></p>
<p>CPU将中断位置为1，就相当于手机调到了响铃的状态，外设讲数据传输好了，或者寄存器满了，就通知CPU来处理。<br>CPU和外设传输数据是并行的。<br>因为数据是存在寄存器上，单位是字节，所以非常容易发生中断。</p>
<h4 id="直接存储器访问DMA控制方式"><a href="#直接存储器访问DMA控制方式" class="headerlink" title="直接存储器访问DMA控制方式"></a>直接存储器访问DMA控制方式</h4><p>该方式的特点是：<br>① 数据传输的基本单位是数据块，即在CPU与I/O设备之间，每次传送至少一个数据块；<br>② 所传送的数据是从设备直接送入内存的，或者相反；<br>③ 仅在传送一个或多个数据块的开始和结束时，才需CPU干预，整块数据的传送是在控制器的控制下完成的。<br>可见，DMA方式较之中断驱动方式，又是成百倍地减少了CPU对I/O的干预，进一步提高了CPU与I/O设备的并行操作程度。 </p>
<p>DMA控制器的组成：<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/DMA组成.6iiwsem01b00.webp" alt="DMA组成"></p>
<p>控制器中需要4个寄存器：</p>
<ol>
<li>) 命令/状态寄存器CR。用于接收从CPU发来的I/O命令或有关控制信息， 或设备的状态。</li>
<li>内存地址寄存器MAR。在输入时，它存放把数据从设备传送到内存的起始目标地址；在输出时，它存放由内存到设备的内存源地址。</li>
<li>数据寄存器DR。用于暂存从设备到内存，或从内存到设备的数据。</li>
<li>数据计数器DC。 存放本次CPU要读或写的字(节)数。 </li>
</ol>
<p>缺点：<br>1）可能会引起内存地址的冲突；<br>2）需要DMA控制器硬件支持。</p>
<h4 id="I-O通道控制方式"><a href="#I-O通道控制方式" class="headerlink" title="I/O通道控制方式"></a>I/O通道控制方式</h4><p>这是对DMA的进一步扩展。</p>
<p>通道程序</p>
<ol>
<li>操作码。规定了指令所执行的操作，如读、写操作。</li>
<li>内存地址。标明字符送入内存和从内存取出时的内存首址。</li>
<li>计数。本条指令所要读或写数据的字节数。</li>
<li>通道程序结束位P。表示通道程序是否结束。P=1表示本条指令时通道程序的最后一条指令。</li>
<li>记录结束标志R。R=0表明本通道指令与下一条指令所处理的数据是属于同一个记录；R=1表示这是处理某记录的最后一条指令。</li>
</ol>
<p>与DMA的区别：<br>1）没有计数寄存器、内存地址寄存器，连接有通道设备控制器，有指令执行机构。<br>2）传送数据完全由通道指令来控制，一次可以连续传送多个数据块。<br>3）DMA只和一个设备相连，通道可控制多台设备。 </p>
<h3 id="5-3-缓冲管理"><a href="#5-3-缓冲管理" class="headerlink" title="5.3 缓冲管理"></a>5.3 缓冲管理</h3><p>引入缓冲的原因：</p>
<ul>
<li>缓和CPU与I/O设备间速度不匹配的矛盾。</li>
<li>减少对CPU的中断频率， 放宽对CPU中断响应时间的限制。</li>
<li>提高CPU和I/O设备之间的并行性。 </li>
</ul>
<p>不同的缓冲方式：</p>
<ul>
<li>单缓冲</li>
<li>双缓冲</li>
<li>循环缓冲</li>
<li>缓冲池</li>
<li>用户层软件</li>
</ul>
<h3 id="5-4-I-O软件"><a href="#5-4-I-O软件" class="headerlink" title="5.4 I/O软件"></a>5.4 I/O软件</h3><p>I/O软件的层次<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/I/O软件.6h7xyqv5qiw0.webp" alt="O软件"></p>
<ul>
<li>硬件</li>
<li>中断处理程序</li>
<li>设备驱动程序</li>
<li>设备独立性软件</li>
<li></li>
</ul>
<h3 id="5-5-设备分配"><a href="#5-5-设备分配" class="headerlink" title="5.5 设备分配"></a>5.5 设备分配</h3><p>分配：设备、控制器和通道<br>需要记录与它们相关的信息。包括：资源标识、物理连接情况、占有进程、等待进程等。<br>具体实现时，可以将其分为设备控制块、控制器控制块和通道控制块。<br>这些控制块中包含的信息在不同的系统中会有所不同。</p>
<h4 id="各种数据结构："><a href="#各种数据结构：" class="headerlink" title="各种数据结构："></a>各种数据结构：</h4><ul>
<li>设备控制表DCT</li>
<li>设备表控制器SD控制表COCT</li>
<li>通道控制表CHCT</li>
<li>系统T<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/设备分配个数据结构之间的关系.3116o8gehxs0.webp" alt="设备分配个数据结构之间的关系"></li>
</ul>
<h4 id="设备分配时应考虑的因素"><a href="#设备分配时应考虑的因素" class="headerlink" title="设备分配时应考虑的因素"></a>设备分配时应考虑的因素</h4><ul>
<li>设备的固有属性<ul>
<li>独享设备</li>
<li>共享设备</li>
<li>虚拟设备</li>
</ul>
</li>
<li>设备分配算法<ul>
<li>先来先服务</li>
<li>优先级高者优先</li>
</ul>
</li>
<li>设备分配中的安全性<ul>
<li>安全分配方式 </li>
<li>不安全分配方式 </li>
</ul>
</li>
</ul>
<h4 id="SPOOLing技术"><a href="#SPOOLing技术" class="headerlink" title="SPOOLing技术"></a>SPOOLing技术</h4><p>SPOOLing组成六部分：<br>输入、输出进程（模拟外围机），输入、输出井（两个磁盘），输入、输出缓冲（缓存数据）。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/SPOOLing组成.kileux4v63k.webp" alt="SPOOLing组成"></p>
<p>共享打印机的运用<br>共享打印机技术已被广泛地用于多用户系统和局域网络中。<br>当用户进程请求打印输出时， SPOOLing系统同意为它打印输出， 但并不真正立即把打印机分配给该用户进程， 而只为它做两件事：<br>① 由输出进程在输出井中为之申请一个空闲磁盘块区， 并将要打印的数据送入其中；<br>② 输出进程再为用户进程申请一张空白的用户请求打印表，并将用户的打印要求填入其中， 再将该表挂到请求打印队列上。 </p>
<h3 id="5-6-磁盘存储器管理"><a href="#5-6-磁盘存储器管理" class="headerlink" title="5.6  磁盘存储器管理"></a>5.6  磁盘存储器管理</h3><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220416/磁盘结构.14w904dm23ek.webp" alt="磁盘结构"></p>
<p>数据存储在某个盘片的某个盘面的某个磁道的某个扇区上。</p>
<p>类型有：固定头磁盘、移动头磁盘。</p>
<h4 id="磁盘访问时间"><a href="#磁盘访问时间" class="headerlink" title="磁盘访问时间"></a>磁盘访问时间</h4><ol>
<li>寻道时间<br> 该时间是启动磁臂的时间s与磁头移动n条磁道所花费的时间之和， 即 Ts=m×n+s</li>
<li>旋转延迟 </li>
<li>传输时间 </li>
</ol>
<h4 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h4><ol>
<li>先来先服务FCFS</li>
<li>最短寻道时间优先SSTF：每次都找最近的。优点：平均最短。缺点：有些进程会“饥饿”。</li>
<li>扫描(SCAN)算法 。来回扫描。缺点：电梯，刚走，来人。</li>
<li>循环扫描(CSCAN)算法 。和扫描相比，只往一个方向。</li>
<li>……</li>
</ol>
<h4 id="磁盘高速缓存"><a href="#磁盘高速缓存" class="headerlink" title="磁盘高速缓存"></a>磁盘高速缓存</h4><p>将内存作为磁盘高速缓存，逻辑上是磁盘的，物理上是内存的。</p>
<h3 id="本章重点掌握"><a href="#本章重点掌握" class="headerlink" title="本章重点掌握"></a>本章重点掌握</h3><p>4种控制方式<br>引入缓冲原因<br>I/O软件层次，独立性<br>四种调度算法</p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-第六章文件管理</title>
    <url>/2022/07/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%AC%E5%85%AD%E7%AB%A0%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="6-1-文件和文件系统"><a href="#6-1-文件和文件系统" class="headerlink" title="6.1 文件和文件系统"></a>6.1 文件和文件系统</h3><p>文件：有结构文件，无结构文件。<br>有结构文件：数据项，记录。<br>无结构文件：字符流。<br>文件的属性和类型<br>文件系统和文件系统模型 。文件系统：是操作系统中负责管理和存取文件的程序模块。<br>文件操作</p>
<h3 id="6-2-文件的逻辑结构"><a href="#6-2-文件的逻辑结构" class="headerlink" title="6.2 文件的逻辑结构"></a>6.2 文件的逻辑结构</h3><p>对文件逻辑结构的基本要求：提高检索速度；便于修改；降低文件的存储费用。</p>
<h4 id="文件逻辑结构的类型"><a href="#文件逻辑结构的类型" class="headerlink" title="文件逻辑结构的类型"></a>文件逻辑结构的类型</h4><ul>
<li>有结构文件：指由一个以上的记录构成的文件，故又称为记录式文件。<ul>
<li>根据记录长度：定长记录和变长记录</li>
<li>根据记录的组织方式：顺序文件、索引文件和索引顺序文件</li>
</ul>
</li>
<li>无结构文件：指由字符流构成的文件，故又称为流式文件。</li>
</ul>
<h4 id="顺序文件"><a href="#顺序文件" class="headerlink" title="顺序文件"></a>顺序文件</h4><p>串结构：按时间网后跟上。<br>顺序结构：按记录的某个顺序。<br>优点：管理简单，系统开销小；适用于大批量数据的存取，此时顺序文件的存取效率是所有逻辑文件中最高的；顺序文件是唯一的一种同时适合在磁盘和磁带中存储的文件。<br>缺点：顺序文件的顺序查找效率低和更新性能差。</p>
<h4 id="索引文件"><a href="#索引文件" class="headerlink" title="索引文件"></a>索引文件</h4><p>对顺序文件定长可以随机读写，不定唱的只能顺序读写。<br>因此加上索引。</p>
<h4 id="索引顺序文件"><a href="#索引顺序文件" class="headerlink" title="索引顺序文件"></a>索引顺序文件</h4><p>文件本身非常大，索引表也会非常大，因此对文件分组索引，有索引顺序文件。<br>还可以多级索引。</p>
<h3 id="6-3-外存分配方式"><a href="#6-3-外存分配方式" class="headerlink" title="6.3 外存分配方式"></a>6.3 外存分配方式</h3><p>内存中以字节为单位存，外存中以盘块存。</p>
<h4 id="连续分配"><a href="#连续分配" class="headerlink" title="连续分配"></a>连续分配</h4><p>放：要求为每一个文件分配一组相邻接的盘块。<br>找：文件目录。<br>优点：<br>顺序访问容易；支持直接存取；顺序访问速度快（顺序存放也一般会在相邻的磁道上，磁头移动较少距离；可以随机存取）。<br>缺点：<br>要求有连续的存储空间，有碎片；<br>必须事先知道文件的长度。</p>
<h4 id="链接分配"><a href="#链接分配" class="headerlink" title="链接分配"></a>链接分配</h4><p>放：离散的放。<br>隐式链接：将下一个盘块的地址存在上一个盘块中。缺点：就只能顺序找下去；一处断了，就完了，可靠性较差。目录里记录文件、开始盘块号、结束盘块号。<br>显式链接：显式地存放在内存的一张链接表（文件分配表，FAT）。<strong>FAT表在整个磁盘仅设置一张。</strong><br>显式和隐式相比，在内存中，快依稀嗯，但依然是顺序的，还占空间。</p>
<h4 id="索引分配"><a href="#索引分配" class="headerlink" title="索引分配"></a>索引分配</h4><p>索引分配是为每个文件分配一个利用专门的索引结点（索引块），用于存放该文件所对应的所有盘块号，在建立文件时只需在为之建立的目录项中填上指向该索引块的指针即可。<br>索引分配方式支持直接访问。当要读文件的第i个盘块时，可以方便地直接从索引块中找到第i个盘块的盘块号。不会产生外部碎片。<br>索引分配索引——多级索引。<br>索引分配索引——混合分配</p>
<h3 id="6-5-文件存储空间的管理"><a href="#6-5-文件存储空间的管理" class="headerlink" title="6.5 文件存储空间的管理"></a>6.5 文件存储空间的管理</h3><h4 id="空闲表法"><a href="#空闲表法" class="headerlink" title="空闲表法"></a>空闲表法</h4><p>优点：具有较高的分配速度，可减少访问磁盘的I/O频率。<br>缺点：为了获得足够大的连续存储区，需定时进行碎片整理。因而，空闲表法不适于文件频繁进行动态增长和缩短的文件系统，且要求用户在分配前知道文件长度。</p>
<h4 id="空闲链表法"><a href="#空闲链表法" class="headerlink" title="空闲链表法"></a>空闲链表法</h4><p>空闲盘块链：将磁盘上的所有空闲空间，以盘块为单位拉成一条链。<br>空闲盘区链。</p>
<h4 id="位示图法"><a href="#位示图法" class="headerlink" title="位示图法"></a>位示图法</h4><p>基本思想：位示图中用二进制位状态表示磁盘中一个盘块的使用情况，可用“0”表示对应的盘块空闲；“1”表示被分配。<br>位示图中的行号、列号和盘块号都从0开始编号，m行n列位示图中的m×n个位数可表示m×n块盘块的使用情况。<br>分配：顺序找位示图，找到一个或一组0，然后算出对应的盘块号，放完修改位示图。<br>回收：修改位示图</p>
<h4 id="成组链接法"><a href="#成组链接法" class="headerlink" title="成组链接法"></a>成组链接法</h4><h3 id="6-4-目录管理"><a href="#6-4-目录管理" class="headerlink" title="6.4 目录管理"></a>6.4 目录管理</h3><h3 id="6-6-文件共享与文件保护"><a href="#6-6-文件共享与文件保护" class="headerlink" title="6.6 文件共享与文件保护"></a>6.6 文件共享与文件保护</h3>]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统-第四章存储器管理</title>
    <url>/2022/07/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%AD%98%E5%82%A8%E5%99%A8%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="4-1-存储器概述"><a href="#4-1-存储器概述" class="headerlink" title="4.1  存储器概述"></a>4.1  存储器概述</h2><h3 id="内存和外存，计算机的存储结构"><a href="#内存和外存，计算机的存储结构" class="headerlink" title="内存和外存，计算机的存储结构"></a>内存和外存，计算机的存储结构</h3><p>　　内存是CPU直接存取指令和数据的存储器。任何一个程序（包括应用程序和OS本身）必须被装入内存，才可能被执行。尽管RAM芯片集成度越来越高，价格不断降低，由于其需求量大，整体价格仍较昂贵，而且受CPU寻址能力的限制，内存容量仍有限。因此，对主存的管理和有效利用仍然是当今操作系统十分重要的内容。内存区域被分为两大区域：系统空间，用户进程空间。本章主要讲述用户区域的管理方法和基本技术。<br>　　外存主要用于存放数据和文件，在设备管理部分进行介绍。<br>　　目前，计算机系统均采用层次结构的存储子系统，以便在容量、速度和价格等因素中取得平衡点，获得较好的性能价格比。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220604/OS-4-存储层次.m30izxlmk1s.webp" alt="OS-4-存储层次"></p>
<h3 id="存储管理任务"><a href="#存储管理任务" class="headerlink" title="存储管理任务"></a>存储管理任务</h3><ol>
<li><h4 id="内存分配和回收"><a href="#内存分配和回收" class="headerlink" title="内存分配和回收"></a>内存分配和回收</h4><p> 存储器管理模块需要记录内存的使用情况，为每道申请内存的进程分配内存空间，使它们“各得其所”。<br> <strong>静态分配</strong>：在目标模块装入内存时一次分配进程所需的内存空间，它不允许进程在运行过程中再申请内存空间。<br> <strong>动态分配</strong>：在目标模块装入内存时分配进程所需的基本内存空间，并允许进程在运行过程中申请附加的内存空间。<br> 进程执行结束后，操作系统回收系统或用户释放的内存空间，提高内存利用率。</p>
<p> 静态分配就是一次性全部装入，动态分配需要虚拟存储技术，可以多次装入。</p>
</li>
<li><h4 id="地址变换"><a href="#地址变换" class="headerlink" title="地址变换"></a>地址变换</h4><p> 静态地址重定位和动态地址重定位。<br>静态地址重定位就是在程序装入内存的时候，一次性计算好所有逻辑地址对应的物理地址，因此他不能移动。<br>动态地址重定位就是在程序运行的时候，遇到了一个逻辑地址，就将它与寄存器中值（起始物理地址）相加计算出物理地址。<br>两者主要区别就在于时间的不同，动态地址充定位还需要硬件的支持。</p>
</li>
<li><h4 id="内存保护"><a href="#内存保护" class="headerlink" title="内存保护"></a>内存保护</h4></li>
<li><h4 id="内存扩充"><a href="#内存扩充" class="headerlink" title="内存扩充"></a>内存扩充</h4></li>
</ol>
<h2 id="4-2-程序的装入和链接"><a href="#4-2-程序的装入和链接" class="headerlink" title="4.2  程序的装入和链接"></a>4.2  程序的装入和链接</h2><h3 id="三种装入方式"><a href="#三种装入方式" class="headerlink" title="三种装入方式"></a>三种装入方式</h3><h4 id="绝对装入"><a href="#绝对装入" class="headerlink" title="绝对装入"></a>绝对装入</h4><p>逻辑地址=物理地址，不需要地址重定位。<br>这种方式不适合多道程序。</p>
<h4 id="可重定位装入"><a href="#可重定位装入" class="headerlink" title="可重定位装入"></a>可重定位装入</h4><p>必须得进行地址映射。<br>对应静态重定位，需要连续的地址空间。</p>
<h4 id="动态运行时装入"><a href="#动态运行时装入" class="headerlink" title="动态运行时装入"></a>动态运行时装入</h4><p>需要寄存器。</p>
<h3 id="三种链接方式"><a href="#三种链接方式" class="headerlink" title="三种链接方式"></a>三种链接方式</h3><h4 id="静态链接"><a href="#静态链接" class="headerlink" title="静态链接"></a>静态链接</h4><p>在装入前进行链接。<br>缺点：如果只修改了一个模块，整个程序都要重新链接；有些模块重复链接，不能实现共享；造成内存浪费；处理器呀资源也浪费，链接的时候需要，装入的时候有需要；有些模块运行的时候不要要也链接进来，浪费空间。<br>优点：简单，易于实现。</p>
<h4 id="装入时动态链接"><a href="#装入时动态链接" class="headerlink" title="装入时动态链接"></a>装入时动态链接</h4><p>优点：便于模块的修改和更新，可以实现共享。<br>缺点：装入的结构依然是静态的。</p>
<h4 id="运行时动态装入"><a href="#运行时动态装入" class="headerlink" title="运行时动态装入"></a>运行时动态装入</h4><p>优点：减少内存和处理机的浪费。<br>缺点：管理难度大。</p>
<h2 id="4-3-连续分配方式"><a href="#4-3-连续分配方式" class="headerlink" title="4.3  连续分配方式"></a>4.3  连续分配方式</h2><p>连续分配方式，是指为一个用户分配一个连续的存储空间。<br>连续分配方式可进一步分为：</p>
<ul>
<li>单一连续分配</li>
<li>固定分区分配</li>
<li>动态分区分配</li>
<li>动态重定位分区分配</li>
</ul>
<h3 id="单一连续分配"><a href="#单一连续分配" class="headerlink" title="单一连续分配"></a>单一连续分配</h3><ul>
<li>只能用在单用户、单任务的操作系统</li>
<li>将内存分为系统区和用户区，系统区仅提供给OS使用；用户区提供给用户作业使用，一次只允许一个作业进入内存，内存利用率极低。</li>
<li>可以采用三种程序装入方式之一</li>
<li>存储保护机制：“界地址寄存器”</li>
<li>不支持多道程序运行环境，不能有效地利用系统资源</li>
</ul>
<h3 id="固定分区分配"><a href="#固定分区分配" class="headerlink" title="固定分区分配"></a>固定分区分配</h3><ul>
<li>基本思想：将内存区域划分成若干个大小固定的区域，每个区域称为一个分区，每个分区存放一道进程对应的程序和数据，使进程在内存中占用一个连续的区域，而且进程只能在所在分区内运行。</li>
<li>划分分区的方法<ul>
<li>分区大小相等。</li>
<li>分区大小不等。</li>
</ul>
</li>
<li>需要数据结构——分区说明表，包括区号、分区长度、起始地址、状态。</li>
<li>分配算法：<ul>
<li>分区说明表不同的排序方法 </li>
<li>可以按地址从高到低或者从低到高找到合适的分区，</li>
<li>按分区的长度排序，按分区长度从大到小寻找，可以节省检索时间如果比这个进城需要长度更大的分区都没有了，那说明分配不了了；</li>
<li>也可以按分区长度从小到大寻找，可以更好利用；</li>
</ul>
</li>
<li>地址变换你可以静态，也可以动态。</li>
<li>浪费存储空间，会有很多内碎片。 </li>
<li>分区总数限制了并发的度。</li>
</ul>
<h3 id="动态分区分配"><a href="#动态分区分配" class="headerlink" title="动态分区分配"></a>动态分区分配</h3><ul>
<li>每次进程需要多少就分配多少</li>
<li>也需要一定的分配算法，检索空闲分区表或空闲分区链<ul>
<li>首次适应算法（first fit）<br>  基本思想：总是从内存的某一端（一般从低地址端）开始查找，选择一个超过进程申请大        小的空闲分区。<br>  为此，可以将空闲分区表中登记的空闲分区按照其起始地址由小到大的次序排列，系统查        找空闲分区时，从表头开始查找，取第一个满足要求的分区分配给进程。<br>  若找到的空闲分区恰好与进程申请的存储空间大小相等，或分配给该进程后，仅剩下一个        非常小的空间（小于系统设置的阀值），则将该分区全部分给申请进程。<br>  否则，系统将该分区划分成两个分区，一个分区的长度等于进程申请的空间大小，并将其        分配给申请进程。然后，将另一个子分区链接到空闲分区链表中。<br>  优点：尽量使用低地址空间，因而在高地址的空间可能会保留较大的空闲分区。所以，大        进程申请的存储空间大都能在高地址端得到满足。<br>  缺点：由于每次只简单的使用找到的第一个分区，结果可能导致较大的空闲分区不断地分割为较小的空闲分区。</li>
<li>循环首次适应算法（next fit）<br>  循环首次适应算法，能记住上次分配分区的位置，下一次实施分配时，从上一次分配位置        之后开始查找，选择一个大小足够的空闲分区。<br>  该算法常常会导致内存中缺乏大分区，因为它会均衡的利用空闲分区，包括分割较大的空        闲分区，从而使得大进程无法装入内存。</li>
<li>最佳适应算法（best fit）<br>  总是选择满足申请要求且长度最小的空闲空间。<br>  为了提高查找效率，可以将所有空闲分区按照长度由小到大的次序依次排列在空闲分区表        中。<br>  为进程分配存储空间时，从表头开始查找，第一个满足进程申请存储空间大小的分区就是        最合适的分区。<br>  优点：尽量不分割大的空闲分区<br>  缺点：可能形成大量较小的、难以再分配的分区。<br>  最佳适应算法并非是最好的算法。</li>
<li>最坏适应算法<br>  最佳是从小到大，最坏就是从大到小。</li>
<li><strong>总结一下</strong><br>  首次适应就是每次从地址从小到大找；循环首次适应从上一次的地址之后找；最佳适应就是找到大小最合适的。</li>
</ul>
</li>
<li>有外碎片</li>
<li>分区回收：如果要回收的分区和空闲区相邻，就合并。</li>
<li>地址变换可以采用动态地址重定位。</li>
<li>分区保护。</li>
</ul>
<h3 id="动态重定位分区分配"><a href="#动态重定位分区分配" class="headerlink" title="动态重定位分区分配"></a>动态重定位分区分配</h3><p>什么时候进行紧凑？<br>和动态分配分区的区别就是加入紧凑技术。</p>
<h3 id="对换"><a href="#对换" class="headerlink" title="对换"></a>对换</h3><h3 id="四种连续分配方式小总结"><a href="#四种连续分配方式小总结" class="headerlink" title="四种连续分配方式小总结"></a>四种连续分配方式小总结</h3><p>整体思路就是不断提高内存的资源利用率。单一连续分配只能让一个进城使用，于是有了固定分区分配。固定分区分配会有比较多的内碎片，有了动态分区分配，让每个进程按需分配。再加上动态地址重定位技术和紧凑技术，有动态重定位分区分配进一步提高内存利用率。</p>
<h2 id="4-4-基本分页存储管理方式"><a href="#4-4-基本分页存储管理方式" class="headerlink" title="4.4  基本分页存储管理方式"></a>4.4  基本分页存储管理方式</h2><pre><code>将一个进程的逻辑地址空间分成若干个大小相等的片，称为页面或页，并为各页加以编号，从0开始，如第0页、第1页等。
把内存空间分成与页面相同大小的若干个存储块，称为(物理)块或页框(frame)， 也同样为它们加以编号，如0＃块、1＃块等等。
这样在为进程分配内存时，可以将进程中的若干个页分别装入到多个可以不相邻的物理块中。
</code></pre><ul>
<li>碎片问题。只有最后一页可能会存在碎片。</li>
<li>页面大小的选择。太小：映射多，页表大，碎片少；太大：碎片大，页表短。512字节到8K。</li>
<li>原来一维的逻辑地址，可以分为（页号，页内地址）。</li>
<li>页表：记录页号和块号之间的映射关系。经常访问。常驻内存。一个进程一个页表，进程多少页，页表就有多长。</li>
<li>地址变换机构<ul>
<li>一个进程的页表的地址会放在寄存器当中。单处理机试运行一个进城，所以寄存器里就放当    前进程的页表的地址。其他进程的防灾PCB中。</li>
<li>基本的地址变换机构<ul>
<li>页表寄存器当中存页表的起始地址和页表长度。</li>
<li>有一个逻辑地址，先拿它对页面大小取整，得到页号。比如：逻辑地址2500，页面大        小为1K，那他的页号就是<code>2500/1k</code>取整等于2.一般化为二进制，2500化为二进制后        （根据系统有效地址长度来，这里假如是16位），1K是10位，那搞6位就是页号，后面的            10位就是页内地址。</li>
<li>如果算出来的页号在页表长度范围内，就好，如果超出，就中断。</li>
<li>根据页号和页表起始地址、页表每一项的长度，在页表中找到块号。</li>
<li>因为块大小和页面大小一样大，所以可以算出块的物理起始地址，在加上业内地址，            就得到了物理地址。在二进制表示中，就是将块号和业内地址进行拼接。</li>
</ul>
</li>
<li>基本的地址变换机构，在地址变换的过程中访问了两次内存，一次是访问页表，一次是访问    物理地址获取数据。</li>
</ul>
</li>
<li>快表。因为程序在运行的时候，在一段时间内，只会访问部分的数据，所以可以将一部分数    据放在缓存当中，增加访问地址的速度。如果快表里没有，再去内存页表里找。</li>
<li>两级和多级页表。如果页表特别长，超过了一个页面的大小，那就采用两级或多级页表。</li>
<li>页面共享。可重入代码(Reentrant Code)又称为“纯代码”(Pure Code) ，是一种允许    多个进程同时访问的代码。为使各个进程所执行的代码完全相同，绝对不允许可重入代码在执行    中有任何改变。因此，可重入代码是一种不允许任何进程对它进行修改的共享代码。为了保证可    重入代码不被修改，每个进程中都配以局部数据区，把进程执行中改变的代码拷贝到该数据区。    为了实现对共享页面的合理访问，系统可在进程的页表中增加一些控制位，用于说明各个页面的    访问控制信息，如可读、可写或可执行等。</li>
<li>优缺点：<ul>
<li>优点：<br>  一个程序不必连续存放，消除了外碎片；<br>  程序的逻辑页放置策略简单。</li>
<li>缺点：<br>  采用动态地址映射进行地址变换，增加了计算机成本，降低了程序执行速度；<br>  页表的建立和管理也需要一定的系统开销；<br>  每个进程平均拥有半页的内碎片；<br>  如果共享内容跨页存放，则不易于实现共享；<br>  程序需要全部装入内存，增加了内存的存储压力。</li>
</ul>
</li>
</ul>
<h2 id="4-5-基本分段存储管理方式"><a href="#4-5-基本分段存储管理方式" class="headerlink" title="4.5  基本分段存储管理方式"></a>4.5  基本分段存储管理方式</h2><p>引入：方便编程；信息共享；信息保护；动态增长；动态链接。<br>页的大小是系统来划分的，段是由用户来划分的。<br>数据结构——段表。段号，段长，基址。需要判断两次越界，段号有没有越界，段内地址有没有越界。也是访问两次内存。<br>分段比分页更好信息共享。<br>段页式存储管理方式。程序依然按段分，存储的时候按页分。每一个段对应一个页表。会三次访问内存：访问段表，访问页表，访问物理地址。</p>
<h2 id="4-6-虚拟存储器的基本概念"><a href="#4-6-虚拟存储器的基本概念" class="headerlink" title="4.6  虚拟存储器的基本概念"></a>4.6  虚拟存储器的基本概念</h2><p>常规存储器的特征有一次性和驻留性，带来的问题有：</p>
<ol>
<li><p>有的作业很大，可能不能一次性装入内存当中；</p>
</li>
<li><p>要运行的作业很多，但因为容量有限，一次只能装入比较少的进程。</p>
</li>
</ol>
<p>解决方法：从屋里上加大内存容量；从逻辑上增加容量。</p>
<p>虚拟存储技术广泛使用是在20世纪70年代初以后<br>其基本思想：是用软硬件技术把内存与外存这两级存储器当成一级存储器来用，从而给用户提供了一个比实际内存大得多的虚拟存储器。虚拟存储管理只要求把进程在最近一段时间内的执行部分装入内存。<br>好处：用户编程时几乎不用考虑内存限制，给用户编程带来极大的方便；有利于在主存中同时存放多道进程，为提高系统并发程度奠定了基础。</p>
<p>虚拟存储技术的理论依据——局部性原理<br>时间局部性：一条指令在执行后一段时间后可能会再次执行；<br>空间局部性：某个存储单元被访问了，一段时间后，它附近的存储单元也可能会被访问到。</p>
<p>所以什么事虚拟存储器？<br>所谓虚拟存储器，是指具有请求调入功能和置换功能，能从逻辑上对内存容量加以扩充的一种存储器系统。其逻辑容量由内存容量和外存容量之和所决定，其运行速度接近于内存速度，而每位的成本却又接近于外存。可见，虚拟存储技术是一种性能非常优越的存储器管理技术，故被广泛地应用于大、 中、 小型机器和微型机中。  </p>
<p>虚拟存储器的实现方法<br>硬件支持：必须要有辅存；页表（段）机制；缺页中断机制；地址变换机构。<br>软件支持：必须是离散分配的管理方式上。<br>请求分页（分段）系统，就是分页（分段）分配方式的基础上，加入请求调页（段）和页面（段）置换功能。</p>
<p>虚拟存储器</p>
<ul>
<li>多次性</li>
<li>对换性</li>
<li>虚拟性<br>三者的关系：虚拟性是以多次性和对换性为基础的；而多次性和对换性又必须建立在离散分配的基础上。</li>
</ul>
<h2 id="4-7-请求分页存储管理方式"><a href="#4-7-请求分页存储管理方式" class="headerlink" title="4.7  请求分页存储管理方式"></a>4.7  请求分页存储管理方式</h2><p>当一个进程要求运行时，不是把整个进程的程序代码和数据全部装入内存，只需将当前要运行的那部分程序代码和数据所对应的页装入内存，便可启动运行。以后在进程运行的过程中，当需要访问某些页时，由系统自动地将需要的页从外存中调入内存。如果内存没有足够的空闲物理块，将暂不运行的页调出内存，以便装入新的页。<br>内存中的页称为“实页”，把在外存中页称为“虚页”。</p>
<h3 id="硬件支持——页表"><a href="#硬件支持——页表" class="headerlink" title="硬件支持——页表"></a>硬件支持——页表</h3><ul>
<li>页号</li>
<li>物理块号</li>
<li>状态位P<br>  用于指示该页是否已调入内存，供程序访问时参考</li>
<li>访问字段A<br>  用于记录本页在一段时间内被访问的次数，或记录本页最近已有多长时间未被访问过，供选择    换出页面时参考。</li>
<li>修改位M<br>  表示该页在调入内存后是否被修改过，供置换页面时参考。</li>
<li>外存地址<br>  用于指出该页在外存上的地址，通常是物理块号，供调入该页时参考。</li>
</ul>
<h3 id="硬件支持——缺页中断机构"><a href="#硬件支持——缺页中断机构" class="headerlink" title="硬件支持——缺页中断机构"></a>硬件支持——缺页中断机构</h3><p><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/20220605/image.1llv58a5eyao.webp" alt="缺页中断机构流程图"><br>步骤的前面和基本分页一样，当要找的页面不在内存当中，就要从外存申请调入；如果内存足够，就直接调入；如果内存不够，就还要考虑置换。置换的时候，如果换出去的页被修改了，那要保证外存中是最新的。</p>
<h3 id="虚拟存储系统的软件支持"><a href="#虚拟存储系统的软件支持" class="headerlink" title="虚拟存储系统的软件支持"></a>虚拟存储系统的软件支持</h3><ul>
<li>驻留集管理（Resident Set Management）<br>  进程的驻留集指，虚拟存储系统中，每个进程驻留在内存中的页面的集合，或进程分到的物理    页框的集合。<br>  驻留集管理主要解决的问题是，系统应当为每个活跃进程分配多少个页框。<br>  分配给每个活跃进程的页框数越少，放置在内存的进程就会越多，减少了因为交换（这里应该是进程从挂起到就绪的交换）儿造成的的处理机开销。但是会增加缺页中断的概率。分配给每个活跃进程的页框数越少，因为局部性原理，不会显著减少缺页中断的概率，而且有些进城可能不需要那么大的物理快，会造成浪费。<br>  分配策略：<pre><code>  +  固定分配策略（Fixed-Allocation Policy）
            平均分、按比例分、优先级分。
        + 可变分配策略（Variable-Allocation Policy）
</code></pre></li>
<li>放置策略（Placement Policy）<br>  <strong>主要是分段</strong><br>  解决的问题：系统应当在内存的什么位置为活跃进程分配页框？<br>  一般地，对于一个分页系统或段页式系统，将进程的一个页面装入哪一个页框无关紧要。<br>  对于分段系统，需要考虑将一个程序段装入哪一个合适的分区中，可采用的分配算法包括首次    适应法、循环首次适应法、最佳适应法等。</li>
<li>获取策略（Fetch Policy）<br>  解决的问题：系统应当在何时把一个页面装入内存（调入页面的时机）？<ul>
<li>请求调页（Demand Paging）<br>  用到的时候请求调用。</li>
<li>预调页（Prepaging）<br>  先进行预判。</li>
</ul>
</li>
<li>置换策略（Replacement Policy）<br>  置换的范围：全局置换，局部置换。全局就是所有的，局部就是只能和自己的进程换。如果驻    留集的分配策略是固定的，那就只能用局部置换；如果是可变的，那就都可以。<br>  置换算法。好坏的评价：避免抖动，抖动就是刚换出去又换进来。</li>
<li>清除策略（Cleaning Policy）</li>
<li>负载控制（Load Control）</li>
</ul>
<h2 id="4-8-页面置换算法"><a href="#4-8-页面置换算法" class="headerlink" title="4.8  页面置换算法"></a>4.8  页面置换算法</h2><h3 id="最佳置换算法"><a href="#最佳置换算法" class="headerlink" title="最佳置换算法"></a>最佳置换算法</h3><h3 id="先进先出-FIFO"><a href="#先进先出-FIFO" class="headerlink" title="先进先出(FIFO)"></a>先进先出(FIFO)</h3><h3 id="最近最久未使用-LRU"><a href="#最近最久未使用-LRU" class="headerlink" title="最近最久未使用(LRU)"></a>最近最久未使用(LRU)</h3><h3 id="Clock置换算法"><a href="#Clock置换算法" class="headerlink" title="Clock置换算法"></a>Clock置换算法</h3><ul>
<li>系统会分配给进程一定数量的物理快，会有个指针循环遍历访问这些物理快。</li>
<li>页面会有个访问位，在第一次装入物理快和每次被访问过这个页面后，访问位都会置为1；</li>
<li>指针循环遍历的时候遇到访问位是1的就将它改为0.并指向下一个（指针始终都是指向下一位）；第一次遇到访问位是0的，就选择换出。</li>
<li>如果没有发生缺页中断，就是要访问的这个页面在内存中，就指针不动，访问了的那个页面的访问位置为1.</li>
</ul>
<h2 id="4-9-请求分段存储管理方式"><a href="#4-9-请求分段存储管理方式" class="headerlink" title="4.9  请求分段存储管理方式"></a>4.9  请求分段存储管理方式</h2><p>​    </p>
]]></content>
      <categories>
        <category>操作系统</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2022/07/11/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例2-2：创建一个Student数据库，</span></span><br><span class="line"><span class="comment">该数据库的主文件逻辑名称为Student_data，</span></span><br><span class="line"><span class="comment">物理文件名为Student.mdf，初始大小为10MB，</span></span><br><span class="line"><span class="comment">最大尺寸为无限大，增长速度为10%；</span></span><br><span class="line"><span class="comment">数据库的日志文件逻辑名称为Student_log，</span></span><br><span class="line"><span class="comment">物理文件名为Student.ldf，初始大小为1MB，</span></span><br><span class="line"><span class="comment">最大尺寸为100MB，增长速度为1MB。 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Create</span> database Student</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line"><span class="keyword">primary</span></span><br><span class="line">(</span><br><span class="line">	name <span class="operator">=</span> Student_data,   <span class="comment">--逻辑文件名</span></span><br><span class="line">	filename <span class="operator">=</span> <span class="string">&#x27;E:\Student.mdf&#x27;</span>,  <span class="comment">--物理文件名</span></span><br><span class="line">	size <span class="operator">=</span> <span class="number">10</span>MB,  <span class="comment">--初始大小</span></span><br><span class="line">	filegrowth <span class="operator">=</span> <span class="number">10</span><span class="operator">%</span>, <span class="comment">--增长速度</span></span><br><span class="line">	MaxSize <span class="operator">=</span> UNLIMITED  <span class="comment">--最大尺寸</span></span><br><span class="line">)</span><br><span class="line">Log <span class="keyword">on</span> </span><br><span class="line">(</span><br><span class="line">	name <span class="operator">=</span> Student_log,</span><br><span class="line">	filename <span class="operator">=</span> <span class="string">&#x27;E:\Student.ldf&#x27;</span>, </span><br><span class="line">	size <span class="operator">=</span> <span class="number">1</span>MB,</span><br><span class="line">	filegrowth <span class="operator">=</span> <span class="number">1</span>MB,</span><br><span class="line">	maxsize <span class="operator">=</span> <span class="number">100</span>MB</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use Student</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Student</span><br><span class="line">(</span><br><span class="line">	Stu_id <span class="type">char</span>(<span class="number">8</span>) <span class="keyword">primary</span> key, <span class="comment">--字符型  主键约束</span></span><br><span class="line">	Stu_name <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">not</span> <span class="keyword">null</span>, <span class="comment">--字符型 非空约束</span></span><br><span class="line">	Stu_age tinyint,				<span class="comment">--整型</span></span><br><span class="line">	Stu_sex <span class="type">char</span>(<span class="number">2</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">constraint</span> sex <span class="keyword">check</span>(Stu_sex <span class="keyword">in</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">	     <span class="comment">-- 字符型  非空约束  约束/限制  约束名字   检查Stu_sex 是不是（）里的值</span></span><br><span class="line">	Score <span class="type">decimal</span>(<span class="number">5</span>,<span class="number">2</span>),  <span class="comment">--浮点型</span></span><br><span class="line">	College <span class="type">char</span>(<span class="number">50</span>) <span class="keyword">default</span> <span class="string">&#x27;信息工程学院&#x27;</span>,  <span class="comment">--默认约束</span></span><br><span class="line">	Tel <span class="type">varchar</span>(<span class="number">11</span>) <span class="keyword">unique</span> <span class="keyword">check</span>(len(Tel)<span class="operator">=</span><span class="number">11</span>),</span><br><span class="line">	  <span class="comment">--  字符型   唯一性约束 检查约束长度是否为11</span></span><br><span class="line">	Birthday datetime ,<span class="comment">--日期型</span></span><br><span class="line">	</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="创建表并修改列的相关信息"><a href="#创建表并修改列的相关信息" class="headerlink" title="创建表并修改列的相关信息"></a>创建表并修改列的相关信息</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> database Garage</span><br><span class="line"></span><br><span class="line"><span class="comment">--创建表</span></span><br><span class="line">use Garage</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> householder  <span class="comment">--户主信息表</span></span><br><span class="line">(</span><br><span class="line">	h_name <span class="type">char</span>(<span class="number">20</span>), <span class="comment">--户主姓名</span></span><br><span class="line">	h_house_id <span class="type">char</span>(<span class="number">11</span>),   <span class="comment">---房号</span></span><br><span class="line">	h_id <span class="type">varchar</span>(<span class="number">18</span>) <span class="keyword">constraint</span> ID_card <span class="keyword">check</span>(len(h_id)<span class="operator">=</span><span class="number">18</span>), <span class="comment">--身份证号码</span></span><br><span class="line">	h_age tinyint, <span class="comment">--年龄</span></span><br><span class="line">	h_tel <span class="type">char</span>(<span class="number">11</span>) <span class="keyword">constraint</span> tel <span class="keyword">check</span>(len(h_tel)<span class="operator">=</span><span class="number">11</span>), <span class="comment">--电话号码</span></span><br><span class="line">	h_car_num tinyint ,  <span class="comment">--拥有的车辆数量</span></span><br><span class="line">	p_id <span class="type">varchar</span>(<span class="number">4</span>) <span class="keyword">unique</span>,  <span class="comment">--车位号</span></span><br><span class="line">	birthday datetime <span class="comment">--户主生日</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> Parkong_lot  <span class="comment">--车位信息</span></span><br><span class="line">(</span><br><span class="line">	p_id <span class="type">varchar</span>(<span class="number">4</span>)  ,  <span class="comment">--车位号</span></span><br><span class="line">	h_id <span class="type">char</span>(<span class="number">11</span>), <span class="comment">--哪一户的车位</span></span><br><span class="line">	p_length <span class="type">float</span>,<span class="comment">--车位长</span></span><br><span class="line">	p_width <span class="type">float</span>,   <span class="comment">--车位宽</span></span><br><span class="line">	car_id <span class="type">varchar</span>(<span class="number">8</span>)    <span class="comment">--车牌号</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--增加列和删除列</span></span><br><span class="line"><span class="comment">--use Garage</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot </span><br><span class="line"><span class="keyword">add</span> car_id_2 <span class="type">varchar</span>(<span class="number">9</span>),car_id_3 <span class="type">varchar</span>(<span class="number">9</span>)</span><br><span class="line"><span class="keyword">exec</span> sp_help Parkong_lot <span class="comment">--表名！</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder </span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> h_car_num</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">drop</span> <span class="keyword">column</span> p_length,p_width</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">add</span> P_type <span class="type">int</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--修改列数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">alter</span> <span class="keyword">column</span> car_id_2 <span class="type">varchar</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">alter</span> <span class="keyword">column</span> car_id_3 <span class="type">varchar</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">exec</span> sp_help Parkong_lot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--添加约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">alter</span> <span class="keyword">column</span> p_id <span class="type">varchar</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">add</span> <span class="keyword">constraint</span> pk_lotid <span class="keyword">primary</span> key(p_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--添加带约束的列</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">alter table householder</span></span><br><span class="line"><span class="comment">add constraint h_pk primary key(aaa)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">alter table householder</span></span><br><span class="line"><span class="comment">drop constraint h_pk</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--添加检查约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> h_h_id <span class="keyword">check</span>(len(h_house_id)<span class="operator">=</span><span class="number">11</span>)</span><br><span class="line"><span class="comment">--删除约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> h_h_id</span><br><span class="line"><span class="comment">--添加唯一性约束</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> h_id_unique <span class="keyword">unique</span>(h_house_id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">column</span> h_house_id <span class="type">char</span>(<span class="number">9</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> h_id_unique</span><br></pre></td></tr></table></figure>
<h4 id="总结一点"><a href="#总结一点" class="headerlink" title="总结一点"></a>总结一点</h4><ul>
<li>添加列<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span> 列名<span class="number">1</span> 数据类型<span class="number">1</span>,列名<span class="number">2</span> 数据类型<span class="number">2</span></span><br><span class="line"><span class="keyword">exec</span> sp_help 表名！</span><br></pre></td></tr></table></figure>
  add后面没有colunm</li>
<li>删除列<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">column</span> 列名</span><br></pre></td></tr></table></figure></li>
<li>修改列数据类型<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">alter</span> <span class="keyword">column</span> 列名 新数据类型</span><br><span class="line"><span class="keyword">exec</span> sp_help Parkong_lot</span><br></pre></td></tr></table></figure></li>
<li>添加主键约束<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">alter</span> <span class="keyword">column</span> p_id <span class="type">varchar</span>(<span class="number">4</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> Parkong_lot <span class="keyword">add</span> <span class="keyword">constraint</span> pk_lotid <span class="keyword">primary</span> key(p_id)</span><br></pre></td></tr></table></figure>
  要先变成not null才能再变成主键。</li>
<li>添加检查约束/唯一性约束<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名</span><br><span class="line"><span class="keyword">add</span> <span class="keyword">constraint</span> h_h_id（约束名字） <span class="keyword">check</span>(len(h_house_id)<span class="operator">=</span><span class="number">11</span>)</span><br><span class="line">								约束类型<span class="keyword">check</span><span class="operator">/</span><span class="keyword">unique</span>（对那个列约束）</span><br></pre></td></tr></table></figure></li>
<li>删除约束<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> householder</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">constraint</span> h_h_id</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> ... <span class="keyword">as</span> ...</span><br><span class="line"><span class="keyword">from</span> ...</span><br><span class="line"><span class="keyword">where</span> ...</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ... </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ...</span><br></pre></td></tr></table></figure>
<h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> top <span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> top <span class="number">10</span> <span class="keyword">percent</span></span><br></pre></td></tr></table></figure>
<h3 id="like-语句"><a href="#like-语句" class="headerlink" title="like 语句"></a>like 语句</h3><ul>
<li>% 0-n个字符</li>
<li>_  单个字符</li>
<li>[ ] 在方括号里列出的任意字符</li>
<li><sup><a href="#fn_" id="reffn_"></a></sup> 任意没有在方括号内出现的字符<h3 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ... <span class="keyword">desc</span><span class="comment">--倒序</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ... <span class="keyword">asc</span> <span class="comment">--正序（默认）</span></span><br></pre></td></tr></table></figure>
二次排序，中间逗号隔开</li>
</ul>
<h3 id="一些函数"><a href="#一些函数" class="headerlink" title="一些函数"></a>一些函数</h3><p>获取当前时间getdate()<br>year() month() day()某个时间的年、月、日</p>
<h3 id="快速建表"><a href="#快速建表" class="headerlink" title="快速建表"></a>快速建表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*** 新建表 ***/</span></span><br><span class="line"><span class="comment">/*select *</span></span><br><span class="line"><span class="comment">into st </span></span><br><span class="line"><span class="comment">from SubjectTable</span></span><br><span class="line"><span class="comment">where 1=2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">into</span> teacher_new</span><br><span class="line"><span class="keyword">from</span> Teacher</span><br></pre></td></tr></table></figure>
<p>用where 1=2 就创建了一个没有内容但结构一样的表。</p>
<h3 id="建表的时候比避免重名"><a href="#建表的时候比避免重名" class="headerlink" title="建表的时候比避免重名"></a>建表的时候比避免重名</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if <span class="keyword">exists</span>(<span class="keyword">select</span> [TABLE_NAME]</span><br><span class="line">	<span class="keyword">from</span> [INFORMATION_SCHEMA].[TABLES]</span><br><span class="line">	<span class="keyword">where</span> [TABLE_NAME]<span class="operator">=</span><span class="string">&#x27;place&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> place</span><br><span class="line">go</span><br><span class="line"><span class="keyword">select</span> 上课校区</span><br><span class="line">	,上课楼宇</span><br><span class="line">	,上课教室</span><br><span class="line"><span class="keyword">into</span> place</span><br><span class="line"><span class="keyword">from</span> SubjectTable</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 上课校区</span><br><span class="line">	,上课楼宇</span><br><span class="line">	,上课教室</span><br></pre></td></tr></table></figure>
<h3 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h3><p>insert into 表名(字段1,…) 内容<br>内容可以是：values(……) 也可以是select的结果。</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表</span><br><span class="line"><span class="keyword">set</span> 字段<span class="operator">=</span>。。</span><br><span class="line"><span class="keyword">where</span> ...</span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span></span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line"><span class="keyword">where</span> 。。。没有就是删除全部</span><br></pre></td></tr></table></figure>
<h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="创建带检查的视图"><a href="#创建带检查的视图" class="headerlink" title="创建带检查的视图"></a>创建带检查的视图</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line">		<span class="keyword">from</span> [INFORMATION_SCHEMA].[VIEWS] </span><br><span class="line">		<span class="keyword">where</span> [TABLE_NAME]<span class="operator">=</span><span class="string">&#x27;st_200611&#x27;</span>)</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> st_200611</span><br><span class="line">go</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> st_200611</span><br><span class="line"><span class="keyword">as</span> </span><br><span class="line"><span class="keyword">select</span> 上课班级</span><br><span class="line">	,课程名</span><br><span class="line">	,教师姓名</span><br><span class="line">	,学期</span><br><span class="line"><span class="keyword">from</span> SubjectTable</span><br><span class="line"><span class="keyword">where</span> 上课班级<span class="operator">=</span><span class="string">&#x27;200611&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="keyword">check</span> option</span><br></pre></td></tr></table></figure>
<h3 id="插入更新删除"><a href="#插入更新删除" class="headerlink" title="插入更新删除"></a>插入更新删除</h3><p>如果有检查，插入的数据必须符合建立视图时候的where条件。<br>如果没有检查，插入了不符合视图条件的数据，源表能插入，但视图里仍然没有。<br>更新删除了视图中的数据，源表也会同步。<br>删除有些不一样：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> 视图</span><br><span class="line"><span class="keyword">where</span>。。。</span><br></pre></td></tr></table></figure></p>
<h4 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> st_200611</span><br><span class="line"><span class="keyword">with</span> ENCRYPTION</span><br></pre></td></tr></table></figure>
<p>加入 with encryption<br>再去[INFORMATION_SCHEMA].[VIEWS]中[VIEW_DEFINITION]中查看<br>没有一些代码。</p>
<h3 id="数据库编程"><a href="#数据库编程" class="headerlink" title="数据库编程"></a>数据库编程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@xx</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@xx</span><span class="operator">=</span>..</span><br></pre></td></tr></table></figure>
<p>while<br>if<br>print</p>
<h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">性别 <span class="operator">=</span> <span class="keyword">case</span> [Stu_sex]</span><br><span class="line"><span class="keyword">when</span> <span class="string">&#x27;男&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;男生&#x27;</span></span><br><span class="line"><span class="keyword">when</span> <span class="string">&#x27;女&#x27;</span> <span class="keyword">then</span> <span class="string">&#x27;女生&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">      ,....</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">,[Score等级] <span class="operator">=</span> <span class="keyword">case</span> </span><br><span class="line"><span class="keyword">when</span> [Score]<span class="operator">&gt;=</span><span class="number">90</span> <span class="keyword">and</span> [Score]<span class="operator">&lt;=</span><span class="number">100</span> <span class="keyword">then</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">when</span> [Score]<span class="operator">&gt;=</span><span class="number">80</span> <span class="keyword">and</span> [Score]<span class="operator">&lt;</span><span class="number">90</span> <span class="keyword">then</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">when</span> [Score]<span class="operator">&gt;=</span><span class="number">70</span> <span class="keyword">and</span> [Score]<span class="operator">&lt;</span><span class="number">80</span> <span class="keyword">then</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">when</span> [Score]<span class="operator">&gt;=</span><span class="number">60</span> <span class="keyword">and</span> [Score]<span class="operator">&lt;</span><span class="number">70</span> <span class="keyword">then</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">when</span> [Score]<span class="operator">&lt;</span><span class="number">60</span> <span class="keyword">then</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> cur <span class="keyword">cursor</span> <span class="keyword">scroll</span>   <span class="comment">--声明一个游标，名字是cur，scroll表示可以往前往后，对应的是FORWARD_ONLY 只能往前</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student <span class="comment">-- for数据范围</span></span><br><span class="line"><span class="keyword">open</span> cur   <span class="comment">--打开游标</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">first</span> <span class="keyword">from</span> cur  <span class="comment">--提取第一个  fetch ... from  游标</span></span><br><span class="line"><span class="keyword">fetch</span> <span class="keyword">last</span> <span class="keyword">from</span> cur  <span class="comment">--提取最后一个</span></span><br><span class="line"><span class="keyword">fetch</span> absolute <span class="number">2</span> <span class="keyword">from</span> cur  <span class="comment">--提取全部的第2个</span></span><br><span class="line"><span class="keyword">fetch</span> prior <span class="keyword">from</span> cur  <span class="comment">--当前的上一个</span></span><br><span class="line"><span class="keyword">fetch</span> next <span class="keyword">from</span> cur   <span class="comment">--当前的下一个</span></span><br><span class="line"><span class="keyword">fetch</span> relative <span class="number">-1</span> <span class="keyword">from</span> cur    <span class="comment">--当前的第-1个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">close</span> cur  <span class="comment">--关闭游标</span></span><br><span class="line"><span class="keyword">deallocate</span> cur  <span class="comment">--释放游标</span></span><br></pre></td></tr></table></figure>
<p>实现遍历输出名字：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> cur3 <span class="keyword">cursor</span> <span class="keyword">scroll</span></span><br><span class="line"><span class="keyword">for</span> <span class="keyword">select</span> Stu_name <span class="keyword">from</span> Student</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@num</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@num</span><span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> Student)</span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@i</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@i</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable">@name</span> <span class="type">varchar</span>(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">open</span> cur3</span><br><span class="line">while <span class="variable">@i</span><span class="operator">&lt;=</span><span class="variable">@num</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">	<span class="keyword">fetch</span> absolute <span class="variable">@i</span> <span class="keyword">from</span> cur3 <span class="keyword">into</span> <span class="variable">@name</span></span><br><span class="line">	print <span class="variable">@name</span></span><br><span class="line">	<span class="keyword">set</span> <span class="variable">@i</span><span class="operator">=</span><span class="variable">@i</span><span class="operator">+</span><span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">close</span> cur3</span><br><span class="line"><span class="keyword">deallocate</span> cur3</span><br></pre></td></tr></table></figure></p>
<h3 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h3><h4 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span> <span class="keyword">Procedure</span>  过程名</span><br><span class="line"><span class="keyword">As</span></span><br><span class="line">   代码</span><br></pre></td></tr></table></figure>
<p>例如：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span>  <span class="keyword">Procedure</span>   od_sp      <span class="comment">--存储过程名</span></span><br><span class="line"><span class="keyword">As</span>  </span><br><span class="line">   <span class="keyword">Select</span> <span class="operator">*</span>  <span class="keyword">from</span>   orders  </span><br><span class="line">   <span class="keyword">Where</span>   orderid<span class="operator">&lt;</span><span class="number">10250</span></span><br></pre></td></tr></table></figure><br>调用：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> od_sp</span><br></pre></td></tr></table></figure></p>
<h4 id="带默认值参数"><a href="#带默认值参数" class="headerlink" title="带默认值参数"></a>带默认值参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> s_age <span class="variable">@a</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student</span><br><span class="line">	<span class="keyword">where</span> Stu_age<span class="operator">&lt;</span><span class="variable">@a</span></span><br></pre></td></tr></table></figure>
<p>调用：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> s_age <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<h4 id="带默认值参数-1"><a href="#带默认值参数-1" class="headerlink" title="带默认值参数"></a>带默认值参数</h4><p>先看ppt的写法<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Create</span>  <span class="keyword">Procedure</span>    CheckFreight     <span class="variable">@result</span>   <span class="type">int</span>  <span class="operator">=</span>   <span class="keyword">null</span></span><br><span class="line"><span class="keyword">As</span></span><br><span class="line">     IF    <span class="variable">@result</span>  <span class="keyword">IS</span>  <span class="keyword">NULL</span></span><br><span class="line">         <span class="keyword">Begin</span></span><br><span class="line">           <span class="keyword">select</span>   <span class="operator">*</span>   <span class="keyword">from</span>  [<span class="keyword">order</span>  details]</span><br><span class="line">           <span class="keyword">where</span> Freight <span class="operator">&lt;</span> <span class="number">30</span></span><br><span class="line">         <span class="keyword">End</span></span><br><span class="line">     <span class="keyword">Else</span></span><br><span class="line">          <span class="keyword">Begin</span></span><br><span class="line">             <span class="keyword">select</span>   <span class="operator">*</span>    <span class="keyword">from</span>  [<span class="keyword">order</span> details]</span><br><span class="line">             <span class="keyword">where</span>   Freight <span class="operator">&lt;</span>  <span class="variable">@result</span></span><br><span class="line">           <span class="keyword">End</span></span><br></pre></td></tr></table></figure><br>再是我的写法：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> s_age2 <span class="variable">@a</span> <span class="type">int</span><span class="operator">=</span><span class="keyword">null</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student</span><br><span class="line">	<span class="keyword">where</span> Stu_age<span class="operator">&lt;</span><span class="keyword">case</span> <span class="variable">@a</span></span><br><span class="line">					<span class="keyword">when</span> <span class="keyword">null</span> <span class="keyword">then</span> <span class="number">20</span></span><br><span class="line">					<span class="keyword">else</span> <span class="variable">@a</span></span><br><span class="line">					<span class="keyword">end</span></span><br></pre></td></tr></table></figure><br>调用：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">exec</span> s_age2      <span class="comment">-- 使用默认参数</span></span><br><span class="line"><span class="keyword">exec</span> s_age2  <span class="number">19</span>  <span class="comment">-- 设定参数</span></span><br></pre></td></tr></table></figure></p>
<h4 id="带输出的参数"><a href="#带输出的参数" class="headerlink" title="带输出的参数"></a>带输出的参数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> s_age3 <span class="variable">@a</span> <span class="type">int</span> ,<span class="variable">@sum</span> <span class="type">int</span> output</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Student</span><br><span class="line">	<span class="keyword">where</span> Stu_age<span class="operator">&lt;</span> <span class="variable">@a</span></span><br><span class="line">	<span class="keyword">set</span> <span class="variable">@sum</span><span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> Student</span><br><span class="line">	<span class="keyword">where</span> Stu_age<span class="operator">&lt;</span> <span class="variable">@a</span>)</span><br></pre></td></tr></table></figure>
<p>调用：<br><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> <span class="variable">@s</span> <span class="type">int</span></span><br><span class="line"><span class="keyword">exec</span> s_age3 <span class="number">20</span>,<span class="variable">@s</span> output</span><br><span class="line">print ...<span class="comment">--打印需要的信息</span></span><br></pre></td></tr></table></figure><br>在调用的时候，得先声明变量，并且<code>exec</code>的时候也要加上<code>output</code>。</p>
<h3 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h3><h4 id="概念和说明"><a href="#概念和说明" class="headerlink" title="概念和说明"></a>概念和说明</h4><p>一、定义<br>    由于对表的修改操作而触发执行的一段预先定义的一段程序。<br>二、种类<br>    对任一表而言：insert , update , delete<br>三、Inserted表和Deleted表<br>    为每个触发器创建，与表结构一致，存于内存，用户不能不能修改，可以查询。<br>    Deleted表:存放执行Delete和Update而从表中删除的行。<br>    Inserted表:存放执行Inserte和Update而向表中插入的行。</p>
<h4 id="Delete触发器"><a href="#Delete触发器" class="headerlink" title="Delete触发器"></a>Delete触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> stu_delete</span><br><span class="line">	<span class="keyword">on</span> Student</span><br><span class="line">	after <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> deleted</span><br></pre></td></tr></table></figure>
<p>注意最后是<code>from deleted</code><br>在有删除操作的时候会自动执行，显示删除掉的数据。</p>
<h4 id="Update触发器"><a href="#Update触发器" class="headerlink" title="Update触发器"></a>Update触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> stu_update</span><br><span class="line">	<span class="keyword">on</span> Student</span><br><span class="line">	after <span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	if <span class="keyword">update</span>(Stu_id)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        raiserror(<span class="string">&#x27;数据不能被修改&#x27;</span>,<span class="number">10</span>,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">rollback</span>  transaction</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	<span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> inserted</span><br><span class="line">	<span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>在更新数据的额时候会触发</p>
<h4 id="insert触发器"><a href="#insert触发器" class="headerlink" title="insert触发器"></a>insert触发器</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> stu_insert</span><br><span class="line">	<span class="keyword">on</span> Student</span><br><span class="line">	after <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> inserted</span><br></pre></td></tr></table></figure>
<h4 id="每次操作都对某个数据更新"><a href="#每次操作都对某个数据更新" class="headerlink" title="每次操作都对某个数据更新"></a>每次操作都对某个数据更新</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> stu_srh</span><br><span class="line">	<span class="keyword">on</span> Student</span><br><span class="line">	after <span class="keyword">insert</span>,<span class="keyword">delete</span>,<span class="keyword">update</span></span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">	<span class="keyword">update</span> Student</span><br><span class="line">	<span class="keyword">set</span> Score<span class="operator">=</span>Score<span class="operator">+</span><span class="number">0.1</span></span><br><span class="line">	<span class="keyword">where</span> Stu_name<span class="operator">=</span><span class="string">&#x27;盛日辉&#x27;</span></span><br><span class="line">	<span class="keyword">select</span> Stu_name,</span><br><span class="line">			Stu_id,</span><br><span class="line">			Score</span><br><span class="line">	<span class="keyword">from</span> Student</span><br><span class="line">	<span class="keyword">where</span> Stu_name<span class="operator">=</span><span class="string">&#x27;盛日辉&#x27;</span></span><br><span class="line">	</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>-数据库 - SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>欧拉公式</title>
    <url>/2022/02/20/%E6%AC%A7%E6%8B%89%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="欧拉公式"><a href="#欧拉公式" class="headerlink" title="欧拉公式"></a>欧拉公式</h3><p>$ e^{i\theta} = \cos\theta + i\sin\theta$ ，当 $\theta=\pi$ 时，$e^{i\pi} + 1 =0$.</p>
<h3 id="证明一：求导"><a href="#证明一：求导" class="headerlink" title="证明一：求导"></a>证明一：求导</h3><p>设 $f(\theta)=\frac{e^i\theta}{i\sin\theta+\cos\theta}$ ,对 $ f(\theta)$ 求一阶导，</p>
<script type="math/tex; mode=display">
\begin{aligned}
f'(\theta)&=\frac{ie^{i\theta}(i\sin\theta+\cos\theta)-e^{i\theta}(i\cos\theta-\sin\theta)}{(i\sin\theta+\cos\theta)^{2}} \\
&=\frac{-e^{i\theta}\sin\theta+ie^{i\theta}\cos\theta-ie^{i\theta}\cos\theta+e^{i\theta}\sin\theta}{(i\sin\theta+\cos\theta)^{2}} \\
&=0\\
\end{aligned}</script><p>因为 $f’(\theta)=0$ ，所以 $f(\theta)$ 是一个常数。取$\theta=0$:</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(0)&=\frac{e^{i·0}}{i\sin0+\cos0}\\
&=\frac{1}{0+1}\\
&=1\\
\end{aligned}</script><p>所以，$e^{i\theta} = \cos\theta + i\sin\theta$。<br>同时，也容易得到 $e^{i\theta} $ 和 $  \cos\theta + i\sin\theta$ 都不等于0。<br>将 $f(\theta)$ 设为 $f(\theta)=\frac{i\sin\theta+\cos\theta}{e^i\theta}$ 是一样的。</p>
<h3 id="证明二：函数幂级数展开"><a href="#证明二：函数幂级数展开" class="headerlink" title="证明二：函数幂级数展开"></a>证明二：函数幂级数展开</h3><h5 id="泰勒展开式和麦克劳林展开式的简单推导"><a href="#泰勒展开式和麦克劳林展开式的简单推导" class="headerlink" title="泰勒展开式和麦克劳林展开式的简单推导"></a>泰勒展开式和麦克劳林展开式的简单推导</h5><p>将 $f(x)$ 展开为幂级数：</p>
<script type="math/tex; mode=display">
f(x)=a_0+a_1(x-x_0)+a_2(x-x_0)^2+a_3(x-x_0)^3+a_4(x-x_0)^4+a_5(x-x_0)^5+...+a_n(x-x_0)^n+...</script><p>对式子两边求导：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f'(x)&=a_1+2a_2(x-x_0)+3a_3(x-x_0)^2+4a_4(x-x_0)^3+...\\
f''(x)&=2a_2+3·2a_3(x-x_0)+4·3(x-x_0)^2+5a_5(x-x_0)^4+...\\
f'''(x)&=3·2a_3+4·3·2a_4(x-x_0)+5·4a_5(x-x_0)^3+...\\
...\\
\end{aligned}</script><p>令 $x=x_0$ ，计算 $a_0,a_1,a_3….$ ：</p>
<script type="math/tex; mode=display">
\begin{aligned}
f(x_0)=a_0  &,a_0=f(x_0)\\
f'(x_0)=a_1 &,a_1=f'(x_0)\\
f''(x_0)=2a_2 &,a_2=\frac{f'(x_0)}{2!}\\
f'''(x_0)=3·2a_3 &,a_3=\frac{f'''(x_0)}{3!}\\
...\\
f^n(x_0)=n!a_n &,a_n=\frac{f^n(x_0)}{n!}\\
\end{aligned}</script><p>于是，</p>
<script type="math/tex; mode=display">
f(x)=\sum_{n=0}^{\infty}\frac{1}{n!}f^{(n)}(x_0)(x-x_0)^n,x\in U(x_0)</script><p>这就是泰勒级数。它成立的充要条件是它的余项极限是 0：</p>
<script type="math/tex; mode=display">
\lim_{n\to \infty}R_n(x)= \lim_{n\to\infty}\frac{1}{n!}f^{(n)}(x_0)(x-x_0)^n= 0</script><p>取 $x_0=0$ ，有麦克劳林展开式：</p>
<script type="math/tex; mode=display">
f(x)=\sum_{n=0}^{\infty}\frac{1}{n!}f^{(n)}(0)x^n ,x\in (-r,r)</script><h5 id="推导欧拉公式"><a href="#推导欧拉公式" class="headerlink" title="推导欧拉公式"></a>推导欧拉公式</h5><p>根据麦克劳林展开式，我们可以有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\sin x&=x-\frac{x^3}{3!}+\frac{x^5}{5!}-\frac{x^7}{7!}+\frac{x^9}{9!}-...\\
\cos x&=1-\frac{x^2}{2!}+\frac{x^4}{4!}-\frac{x^6}{6!}+\frac{x^8}{8!}-...\\
e^x&=1+x+\frac{x^2}{2!}+\frac{x^3}{3!}+\frac{x^4}{4!}+...
\end{aligned}</script><p>计算 $\sin x+\cos x$ ，得到：</p>
<script type="math/tex; mode=display">
\sin x+\cos x=1+x-\frac{x^2}{2!}-\frac{x^3}{3!}+\frac{x^4}{4!}+\frac{x^5}{5!}-\frac{x^6}{6!}-\frac{x^7}{7!}+\frac{x^8}{8!}+...</script><p>这与 $e^x$ 的区别在于符号上，随着 $x$ 的次数增加，符号的变化规律时 $+,-,-,+$ ，这正好符合虚数单位 $i$ 的符号变化规律。因此，考虑计算 $e^{ix}$ :</p>
<script type="math/tex; mode=display">
\begin{aligned}
e^{ix}&=1+ix+\frac{(ix)^2}{2!}+\frac{(ix)^3}{3!}+\frac{(ix)^4}{4!}+...\\
&=1+ix-\frac{x^2}{2!}-\frac{ix^3}{3!}+\frac{x^4}{4!}+\frac{ix^5}{5!}-\frac{x^6}{6!}-\frac{ix^7}{7!}+\frac{x^8}{8!}...\\
&=1-\frac{x^2}{2!}+\frac{x^4}{4!}-\frac{x^6}{6!}+\frac{x^8}{8!}-...\\
&   +i(x-\frac{x^3}{3!}+\frac{x^5}{5!}-\frac{x^7}{7!}+\frac{x^9}{9!}-...)\\
&=\cos x+i\sin x
\end{aligned}</script><h3 id="应用：解方程-sin-x-2"><a href="#应用：解方程-sin-x-2" class="headerlink" title="应用：解方程 $ \sin x=2 $"></a>应用：解方程 $ \sin x=2 $</h3><p>其实就是想练习一下简单的 Latex 的公式编辑，这个直接放B站链接：<a href="https://www.bilibili.com/video/av32271249/">解方程 $ \sin x=2 $</a></p>
]]></content>
      <categories>
        <category>数学</category>
      </categories>
      <tags>
        <tag>数学</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-相关知识</title>
    <url>/2022/07/11/Hadoop-%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>略。<br>大数据主要解决，海量数据的<strong>采集</strong>、<strong>存储</strong>和<strong>分析计算</strong>问题。</p>
<h4 id="提点"><a href="#提点" class="headerlink" title="提点"></a>提点</h4><p>1.大量（Volume）：数据量大；<br>2.高速（Velocity）：数据产生快，计算速度快；<br>3.多样（Variety）：数据烈性多样，结构化和非结构化；<br>4.低价值密度（Value）：海量数据里真正有价值的不多。</p>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><p>抖音推荐，电商推荐，零售，物流，保险，人工智能+5G+物联网+虚拟与现实……</p>
<h4 id="发展前景"><a href="#发展前景" class="headerlink" title="发展前景"></a>发展前景</h4><p>好。人才紧缺。</p>
<h4 id="大数据部门间业务流程"><a href="#大数据部门间业务流程" class="headerlink" title="大数据部门间业务流程"></a>大数据部门间业务流程</h4><p>产品经理+程序员+前端。<br>大数据内部：还有好多。</p>
<h4 id="大数据生态圈与Hadoop"><a href="#大数据生态圈与Hadoop" class="headerlink" title="大数据生态圈与Hadoop"></a>大数据生态圈与Hadoop</h4><h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h4 id="Hadoop是什么"><a href="#Hadoop是什么" class="headerlink" title="Hadoop是什么"></a>Hadoop是什么</h4><h4 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h4><h4 id="三大发行版本"><a href="#三大发行版本" class="headerlink" title="三大发行版本"></a>三大发行版本</h4><h4 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h4><p>1.高可靠性：不容易错，错了有备份；<br>2.高扩展性：任意临时加服务器；<br>3.高效性：并行计算；<br>4.高容错性：自动讲错了的任务重新分配。</p>
<h4 id="Hadoop组成"><a href="#Hadoop组成" class="headerlink" title="==Hadoop组成=="></a>==Hadoop组成==</h4><h5 id="Hadoop-1-X-组成"><a href="#Hadoop-1-X-组成" class="headerlink" title="Hadoop 1.X 组成"></a>Hadoop 1.X 组成</h5><ul>
<li>Commin辅助工具</li>
<li>HDFS 数据存储</li>
<li>MapReduce 计算+资源调度<h5 id="Hadoop-2-X-组成"><a href="#Hadoop-2-X-组成" class="headerlink" title="Hadoop 2.X 组成"></a>Hadoop 2.X 组成</h5></li>
<li>Commin辅助工具</li>
<li>HDFS 数据存储</li>
<li>Yarn 资源调度</li>
<li>MapReduce 计算<h5 id="Hadoop-3-X"><a href="#Hadoop-3-X" class="headerlink" title="Hadoop 3.X"></a>Hadoop 3.X</h5>Hadoop 3.X 在组成上没有变化。<br><img src="https://cdn.jsdelivr.net/gh/shengrihui/Image-hosting@master/Hadoop不同版本呢组成.44jhx6qkvxu0.webp" alt="Hadoop不同版本呢组成"></li>
</ul>
<h4 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h4><p>Hadoop Distributed FIle System 分布式文件系统。</p>
<h4 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h4><h4 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h4><h4 id="HDFS-Yarn-Mapduce三者来联系"><a href="#HDFS-Yarn-Mapduce三者来联系" class="headerlink" title="HDFS/Yarn/Mapduce三者来联系"></a>HDFS/Yarn/Mapduce三者来联系</h4>]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop-配置（极简版）</title>
    <url>/2022/07/11/Hadoop-%E9%85%8D%E7%BD%AE%EF%BC%88%E6%9E%81%E7%AE%80%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h3 id="模板虚拟机环境准备"><a href="#模板虚拟机环境准备" class="headerlink" title="模板虚拟机环境准备"></a>模板虚拟机环境准备</h3><h4 id="VMware安装"><a href="#VMware安装" class="headerlink" title="VMware安装"></a>VMware安装</h4><h4 id="Xfpt与Xshell安装"><a href="#Xfpt与Xshell安装" class="headerlink" title="Xfpt与Xshell安装"></a>Xfpt与Xshell安装</h4><h4 id="电脑虚拟化准备好"><a href="#电脑虚拟化准备好" class="headerlink" title="电脑虚拟化准备好"></a>电脑虚拟化准备好</h4><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><ul>
<li>cpu、内存根据自己电脑改；</li>
<li>网络用NAT模式；</li>
<li>硬盘尽量大（50GB或40GB）；</li>
<li>其他默认。<h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4></li>
<li>软件选择：最小安装/GNOME桌面</li>
<li>安装位置：<ul>
<li>我要配置分区-&gt;完成；</li>
<li>添加<code>/boot</code>分区，是系统启动时需要的内存，1G，修改文件类型为<code>ext4</code>;</li>
<li>添加<code>swap</code>分区，是内存不够时用硬盘冒充内存，4G;</li>
<li>添加<code>/</code>根目录，剩余所有空间。</li>
</ul>
</li>
<li>关闭KDUMP。这是假如系统崩了，备份用的一块区域，学习阶段不开。</li>
<li>打开以太网，设置主机名为`hadoop100’。</li>
<li>默认安全策略。</li>
<li>开始安装。</li>
<li>设置简单的root密码。</li>
<li>重启。</li>
<li>重启后，创建个普通用户，其他默认走就行。</li>
</ul>
<h4 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h4><h5 id="VM网络设置"><a href="#VM网络设置" class="headerlink" title="VM网络设置"></a>VM网络设置</h5><h5 id="Windows设置"><a href="#Windows设置" class="headerlink" title="Windows设置"></a>Windows设置</h5><h5 id="CentOS设置"><a href="#CentOS设置" class="headerlink" title="CentOS设置"></a>CentOS设置</h5><ol>
<li>切到root用户 <code>su root</code>，输入密码；</li>
<li><code>vim /etc/sysconfig/network-scripts/ifcfg-ens33</code>进入网络配置的文件；</li>
<li>将<code>BOOTPROTO=&quot;dhcp&quot;</code>修改为<code>BOOTPROTO=&quot;static&quot;</code>，也就是设置静态IP；</li>
<li>在最后增加：<br> IPADDR=192.168.100.100<br> GATEWAY=192.168.100.2<br> DNS1=192.168.100.2<br>分别是IP地址，网关，域名。</li>
<li>修改主机名：<code>vim /etc/hostname</code>，写上主机名。</li>
<li>配置主机名称映射：<code>vim /etc/hosts</code>，在后面假如：<br> 192.168.100.100 hadoop100<br> 192.168.100.101 hadoop101<br> 192.168.100.102 hadoop102<br> 192.168.100.103 hadoop103<br> 192.168.100.104 hadoop104<br> 192.168.100.105 hadoop105<br> 192.168.100.106 hadoop106<br> 192.168.100.107 hadoop107<br> 192.168.100.108 hadoop108</li>
<li><code>reboot</code>命令重启。</li>
<li>以root权限登录。</li>
<li>检查ip地址与主机名是否配置好：<ol>
<li><code>ifconfig</code>命令查看IP地址；</li>
<li><code>ping www.baidu.com</code>看能否ping成功。</li>
<li><code>hostname</code>查看主机名。<h4 id="用Xshell进行远程链接"><a href="#用Xshell进行远程链接" class="headerlink" title="用Xshell进行远程链接"></a>用Xshell进行远程链接</h4></li>
</ol>
</li>
<li>用Xshell链接</li>
<li>主机映射<h4 id="安装一些包和关闭防火墙和一些其他设置"><a href="#安装一些包和关闭防火墙和一些其他设置" class="headerlink" title="安装一些包和关闭防火墙和一些其他设置"></a>安装一些包和关闭防火墙和一些其他设置</h4></li>
<li><code>yum install -y epel-release</code>提供需要的包</li>
<li><code>yum install -y net-tools</code>网络</li>
<li></li>
<li><code>systemctl stop firewalld</code>关闭防火墙</li>
<li><code>systemctl disable firewalld.service</code>开机时关闭防火墙</li>
<li>给永辉root权限</li>
</ol>
<h3 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h3><h3 id="在hadoop102上安装jdk和环境配置"><a href="#在hadoop102上安装jdk和环境配置" class="headerlink" title="在hadoop102上安装jdk和环境配置"></a>在hadoop102上安装jdk和环境配置</h3><h3 id="在hadoop102上安装hadoop和环境配置"><a href="#在hadoop102上安装hadoop和环境配置" class="headerlink" title="在hadoop102上安装hadoop和环境配置"></a>在hadoop102上安装hadoop和环境配置</h3><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">#1. 判断参数个数</span><br><span class="line">if [ $# -lt 1 ]</span><br><span class="line">then</span><br><span class="line"> echo Not Enough Arguement!</span><br><span class="line"> exit;</span><br><span class="line">fi</span><br><span class="line">#2. 遍历集群所有机器</span><br><span class="line">for host in hadoop102 hadoop103 hadoop104</span><br><span class="line">do</span><br><span class="line"> echo ==================== $host ====================</span><br><span class="line"> #3. 遍历所有目录，挨个发送</span><br><span class="line"> for file in $@</span><br><span class="line"> do</span><br><span class="line"> #4. 判断文件是否存在</span><br><span class="line"> if [ -e $file ]</span><br><span class="line"> then</span><br><span class="line"> #5. 获取父目录</span><br><span class="line"> pdir=$(cd -P $(dirname $file); pwd)</span><br><span class="line"> #6. 获取当前文件的名称</span><br><span class="line"> fname=$(basename $file)</span><br><span class="line"> ssh $host &quot;mkdir -p $pdir&quot;</span><br><span class="line"> rsync -av $pdir/$fname $host:$pdir</span><br><span class="line"> else</span><br><span class="line"> echo $file does not exists!</span><br><span class="line"> fi</span><br><span class="line"> done</span><br><span class="line">done</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>大数据</category>
        <category>Hadoop</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>django学习</title>
    <url>/2022/07/11/django%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure>
<p>安装完之后在环境目录<code>D:\Users\11200\anaconda3\envs\web</code>下会有：</p>
<pre><code>- python.exe
- Scripts
    - pip.exe
    - django-admin.exe
- Lib
    - 内置模块
    - site-packages
        - 第三方模块 
        - django
</code></pre><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h4><ol>
<li>进入终端</li>
<li>进入想把项目放在的目录下</li>
<li>执行命令<code>django-admin startproject 项目名</code><br> <code>django-admin</code>要进入这个环境当中。</li>
</ol>
<h4 id="pycharm创建"><a href="#pycharm创建" class="headerlink" title="pycharm创建"></a>pycharm创建</h4><p>选好解释器，删除<code>templates</code>文件夹，将57行改为<code>&#39;DIRS&#39;: [],</code>，为了和终端创建的保持一致。</p>
<h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><pre><code>└─test01
    │  manage.py        【项目管理，启动项目、创建app、数据库管理】
    │
    └─test01            【与项目同名】
            asgi.py     【接受网络请求】【异步】
            settings.py 【配置文件】
            urls.py     【URL与函数的对应关系】
            wsgi.py     【接受网络请求】【同步】
            __init__.py
</code></pre><h3 id="APP"><a href="#APP" class="headerlink" title="APP"></a>APP</h3><p>app可以理解成一个大项目里的一些小模块功能，每个app可以有自己独立的数据库、函数、HTML模板等。</p>
<h4 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h4><p>在终端中，当前环境下，项目目录下执行命令：<br><code>python manage.py startapp app01(app名)</code></p>
<h4 id="app目录结构"><a href="#app目录结构" class="headerlink" title="app目录结构"></a>app目录结构</h4><pre><code>E:.
│  manage.py
│
├─app01
│  │  admin.py         【固定，不用动】django默认提供了后台admin的功能。
│  │  apps.py          【固定，不用动】app启动类
│  │  models.py        对数据库进行操作。
│  │  tests.py         【固定，不用动】单元测试用
│  │  views.py         函数。
│  │  __init__.py
│  │
│  └─migrations       【固定，不用动】对数据库字段进行修改做记录的
│          __init__.py
│
└─test01
    │ ...
    │
    └─__pycache__
            settings.cpython-310.pyc
            __init__.cpython-310.pyc
</code></pre><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><h4 id="注册app"><a href="#注册app" class="headerlink" title="注册app"></a>注册app</h4><p>在<code>settings.py</code>中的<code>INSTALLED_APPS</code>里加入<code>app01.apps.App01Config</code>，这是一个类名，在<code>app01(要注册的app名字）</code>里的<code>apps.py</code>里。</p>
<h4 id="编写URL和视图函数之间的关系（urls-py"><a href="#编写URL和视图函数之间的关系（urls-py" class="headerlink" title="编写URL和视图函数之间的关系（urls..py)"></a>编写URL和视图函数之间的关系（urls..py)</h4><p>注释掉默认的，写上自己的。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index),</span><br></pre></td></tr></table></figure><br>地址名 -&gt; 函数名<br>需要导入<code>views</code><br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> app01 <span class="keyword">import</span> views</span><br></pre></td></tr></table></figure></p>
<h4 id="4-3-编写视图函数（views-py"><a href="#4-3-编写视图函数（views-py" class="headerlink" title="4.3 编写视图函数（views.py)"></a>4.3 编写视图函数（views.py)</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render,HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;hello world 欢迎使用&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>选哟一个默认参数<code>request</code></li>
</ul>
<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><ul>
<li>终端<br>  命令：<code>python manage.py runserver</code></li>
<li>PyCharm<br>  本质也是知名上面的命令。<br>结果：<br><img src="https://git.poker/shengrihui/Image-hosting/blob/master/20220712/django-helloworld.50q4giyh4e00.webp?raw=true" alt="django-helloworld"></li>
</ul>
<h4 id="templates模板"><a href="#templates模板" class="headerlink" title="templates模板"></a>templates模板</h4><p>在函数里返回HTML文件：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">user_list</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&quot;user_list.html&quot;</span>)</span><br></pre></td></tr></table></figure></p>
<ul>
<li>参数1：传入的request；</li>
<li>需要返回的HTML文件；</li>
</ul>
<p>如何寻找HTML文件？</p>
<ol>
<li>如果按照pycharm默认生成的格式，会有限到项目的根目录下去找；</li>
<li>将根目录下的templates删了，按照app注册的顺序，一个个去app目录下的templates目录下去找。</li>
</ol>
<h4 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h4><p>在开发过程中，一般将：</p>
<ul>
<li>图片</li>
<li>CSS</li>
<li>js<br>作为静态文件。<br>需要在app目录下创建<code>static</code>目录，在这个目录下，再创建一些目录：<ul>
<li>css</li>
<li>img</li>
<li>js</li>
<li>plugins</li>
</ul>
</li>
</ul>
<p>例子：<br>user_list.html<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表555<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &quot;</span><span class="attr">img</span>/<span class="attr">cat1.jpg</span>&quot; %&#125;&quot; <span class="attr">alt</span>=<span class="string">&quot;mao&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;没有图片&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>在最开始的地方加入<code>&#123;% load static %&#125;</code>，这样就可以用第一种写法，也hi是推荐的写法。</li>
<li>如果用第二种写法，就要将<code>settings.py</code>里的<code>STATIC_URL = &#39;static/&#39;</code>改为<code>STATIC_URL = &#39;/static/&#39;</code>，不然<code>static</code>目录得要放在项目目录下了而不是app目录下。</li>
<li>注意单引号和双引号。花括号外面没有双引号虽然也可以，的那还是加上好。</li>
</ul>
<h3 id="5-模板语法"><a href="#5-模板语法" class="headerlink" title="5. 模板语法"></a>5. 模板语法</h3><h4 id="5-1-最常用的"><a href="#5-1-最常用的" class="headerlink" title="5.1 最常用的"></a>5.1 最常用的</h4><p>视图函数<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">tpl</span>(<span class="params">request</span>):</span><br><span class="line">    name = <span class="string">&quot;韩超&quot;</span></span><br><span class="line">    roles = [<span class="string">&quot;管理员&quot;</span>, <span class="string">&quot;CEO&quot;</span>, <span class="string">&quot;保安&quot;</span>]</span><br><span class="line">    user_info = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;一号&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">10000</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;CTO&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    data_list = [</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;一号&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">10000</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;CTO&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;二号&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">20000</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;CEO&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&quot;三号&quot;</span>, <span class="string">&quot;salary&quot;</span>: <span class="number">30000</span>, <span class="string">&quot;role&quot;</span>: <span class="string">&quot;COO&quot;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;tpl.html&quot;</span>,</span><br><span class="line">                  &#123;<span class="string">&quot;n1&quot;</span>: name, <span class="string">&quot;n2&quot;</span>: roles, <span class="string">&quot;n3&quot;</span>: user_info, <span class="string">&quot;n4&quot;</span>: data_list&#125;)</span><br></pre></td></tr></table></figure><br>页面代码<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>模板语法的学习<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; n1 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&#123;# 列表#&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; n2 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; n2.0 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; n2.1 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; n2.2 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--for循环--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% for item in n2 %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">&#123;#字典#&#125;</span><br><span class="line">&#123;&#123; n3 &#125;&#125;</span><br><span class="line">&#123;&#123; n3.name &#125;&#125;</span><br><span class="line">&#123;&#123; n3.salary &#125;&#125;</span><br><span class="line">&#123;&#123; n3.role &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for item in n3.keys %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% for item in n3.values %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% for k,v in n3.items %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123; k &#125;&#125;:&#123;&#123; v &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">&#123;#列表里面套字典#&#125;</span><br><span class="line">&#123;&#123; n4.0 &#125;&#125;</span><br><span class="line">&#123;&#123; n4.q.name &#125;&#125;</span><br><span class="line">&#123;% for item in n4 %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; item.name &#125;&#125; &#123;&#123; item.salary &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;#if语句#&#125;</span><br><span class="line">&#123;% if n1 == &quot;韩超&quot; %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;#elif#&#125;</span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><br>结果：<br><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220714/django-模板语法学习效果.anxe0b8tyg4.webp" alt="django-模板语法学习效果"><br>注意：</p>
<ol>
<li>if语句里的 <code>==</code>前后得要有空格；</li>
<li><code>&#123;&#123; &#125;&#125;</code>两个花括号，取出其中的内容，<code>&#123;% %&#125;</code>花括号加百分号，是类似python的语法。</li>
</ol>
<h4 id="模板的流程"><a href="#模板的流程" class="headerlink" title="模板的流程"></a>模板的流程</h4><p><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220714/django-模板流程.6ea6ybxrr5c0.webp" alt="django-模板流程"><br>模板的语法是django开发的，用户浏览器发起请求后，django会经过<code>urls.py</code>和<code>views.py</code>找到对应的视图函数以及返回的html文件，将htnl的内容以字符串的方式都进来，然后替换掉其中的模板语法，再泛函给用户浏览器。</p>
<h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>视频教程用的是中国联通新闻中心的数据，但是我爬不下来，所以用了疫情的数据。</p>
<h5 id="视图函数"><a href="#视图函数" class="headerlink" title="视图函数"></a>视图函数</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">epidemic</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">import</span> requests</span><br><span class="line">    res = requests.get(<span class="string">&quot;https://api.inews.qq.com/newsqa/v1/query/pubished/daily/list?province=%E6%B5%99%E6%B1%9F&quot;</span>)</span><br><span class="line">    data_json = res.json()</span><br><span class="line">    <span class="comment"># print(data_json)</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&quot;epidemic.html&quot;</span>, &#123;<span class="string">&quot;data&quot;</span>: data_json[<span class="string">&#x27;data&#x27;</span>]&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="HTML代码"><a href="#HTML代码" class="headerlink" title="HTML代码"></a>HTML代码</h5><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% load myfilter %&#125;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>疫情数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>疫情数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;solid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>省份<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>新增确证<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>新增无症状<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>新增治愈<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>新增死亡<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>月<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% for item in data %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.province &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.newConfirm &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.wzz &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.newHeal &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.newDead &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; item.year &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            &#123;% with item.date|split:&quot;.&quot; as details %&#125;</span><br><span class="line">                &#123;% for p in details %&#125;</span><br><span class="line">                    <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; p &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                &#123;% endfor %&#125;</span><br><span class="line">            &#123;% endwith %&#125;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h5><p>在app目录下创建<code>templatetags</code>文件夹，在该文件夹下创建<code>__init__.py</code>和<code>myfilter.py</code>两个文件，<code>myfilter</code>名字当然随便。其中<code>myfilter.py</code>的内容为：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> Library</span><br><span class="line"></span><br><span class="line">register = Library()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@register.filter(<span class="params">name=<span class="string">&quot;split&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">split</span>(<span class="params">value, key</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Returns the value turned into a list.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> value.split(key)</span><br></pre></td></tr></table></figure><br>在HTML的开始<code>&#123;% load myfilter %&#125;</code>，这样在HTML中就可以使用<code>split</code>方法了，用法建上面代码。</p>
<h5 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h5><p><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220715/django-疫情数据.5e408op1l3k0.webp" alt="django-疫情数据"></p>
<h4 id="在手机（其他主机）上查看"><a href="#在手机（其他主机）上查看" class="headerlink" title="在手机（其他主机）上查看"></a>在手机（其他主机）上查看</h4><ol>
<li>在<code>settings.py</code>中将<code>ALLOWED_HOSTS</code>改为<code>[&#39;*&#39;]</code>，表示任何主机都可以访问，否则会拒绝访问；</li>
<li>在终端执行命令<code>python manage.py runserver 0.0.0.0:8000</code>，得是这个ip；</li>
<li>关闭系统防火墙，或者允许程序访问；</li>
<li>在手机（其他主机）上通过地址访问<code>192.168.10.9:8000/epidemic</code>。</li>
<li>在本机上查看依然是用<code>127.0.0.1:8000/</code><br><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220715/django-手机查看.6j6n2abejrg0.webp" alt="django-手机查看"></li>
</ol>
<h3 id="请求和响应"><a href="#请求和响应" class="headerlink" title="请求和响应"></a>请求和响应</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">something</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># request是一个对象，封装了用户请求发来的数据</span></span><br><span class="line">    <span class="comment"># 1.请求方式 GET/POST</span></span><br><span class="line">    <span class="built_in">print</span>(request.method)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.URL传递参数</span></span><br><span class="line">    <span class="built_in">print</span>(request.GET)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3.在请求体中传数据</span></span><br><span class="line">    <span class="built_in">print</span>(request.POST)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4.HttpResponse(&quot;something&quot;)，返回一个字符串给请求者</span></span><br><span class="line">    <span class="comment"># return HttpResponse(&quot;something&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 5.读取HTML文件 + 渲染 -&gt; 字符串返还给用户</span></span><br><span class="line">    <span class="comment"># return render(request,&#x27;something.html&#x27;,&#123;&quot;title&quot;:&quot;AAA&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6.重定向</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>三个请求：method，GET，POST<br>三个响应：字符串，页面，重定向</p>
<h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用户登录</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>)</span><br><span class="line">    <span class="comment"># print(request.POST)</span></span><br><span class="line">    username = request.POST.get(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    password = request.POST.get(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(username, password)</span><br><span class="line">    <span class="keyword">if</span> username == <span class="string">&quot;root&quot;</span> <span class="keyword">and</span> password == <span class="string">&quot;123&quot;</span>:</span><br><span class="line">        <span class="comment"># return HttpResponse(&quot;登录成功！&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return HttpResponse(&quot;你是坏人！&quot;)</span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&quot;login.html&quot;</span>, &#123;<span class="string">&quot;error_msg&quot;</span>: <span class="string">&quot;用户名或密码错误&quot;</span>&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;/login/&quot;</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123; error_msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol>
<li>表单提交数据后依然返回到<code>login</code>这个函数，但是请求方式变为了<code>POST</code>，所以可以通过请求方式的不同来做出不同的处理，<code>GET</code>就返回登陆页面，<code>Post</code>可以获得填写的数据；</li>
<li>在表单里需要写上<code>&#123;% csrf_token %&#125;</code>,，可以理解为django会做一个token的判断，如果不对，django会阻拦。 </li>
</ol>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>当然可以用<code>pymysql</code>这样的库，但django用了ORM的框架。<br>ORM的框架：<br><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220715/django-ORM框架.mhvs1zu4how.webp" alt="django-ORM框架"></p>
<h4 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h4><p><code>pip install mysqlclient</code></p>
<h4 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h4><p>ORM可以做两件事：</p>
<ul>
<li>创建、修改和删除数据库中的表，但不能创建数据库。</li>
<li>操作表中的数据。</li>
</ul>
<ol>
<li>创建数据库<br> 在命令行连接Mysql，创建数据库<code>django_test02</code><br> MySQL数据库的版本要在5.6以上</li>
<li>djangoo连接数据库<br> 在<code>settings.py</code>中， <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">       <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">           <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django_test02&#x27;</span>,  <span class="comment"># 数据库的名字</span></span><br><span class="line">           <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;PORT&#x27;</span>: <span class="number">3306</span>,</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3. django操作表（创建表）</span><br><span class="line">在`models.py`中</span><br><span class="line">~~~ python</span><br><span class="line">from django.db import models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Create your models here.</span><br><span class="line"></span><br><span class="line">class UserInfo(models.Model):</span><br><span class="line">    name = models.CharField(max_length=32)</span><br><span class="line">    password = models.CharField(max_length=64)</span><br><span class="line">    age = models.IntegerField()</span><br></pre></td></tr></table></figure>
django底层会执行这样的sql语句，创建的表名是app名加下划线加类名的小写，还会自动生成一个id字段。<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> app01_userinfo(</span><br><span class="line">    id <span class="type">bigint</span> auto_increment <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">32</span>),</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">64</span>),</span><br><span class="line">    age <span class="type">int</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
执行命令：<br> python manage.py makemigrations<br> python manage.py migrate</li>
</ol>
<p><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220717/django-数据库操作命令.3p5u1y107ha0.webp" alt="django-数据库操作命令"></p>
<p><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220717/django-数据库建表结果.6cqk71vmqow0.webp" alt="django-数据库建表结果"><br>在生成的时候，会把django默认给的app里的models.py都生成。</p>
<ol>
<li>django操作表（删除表或字段）<br>直接将不要了的表或字段注释或去掉，然后重新执行命令。</li>
<li>django操作表（新增字段）<br>在执行命令的时候，</li>
</ol>
<ul>
<li>给一个值；</li>
<li>退出，在字段中加入<code>default=</code>；</li>
<li>允许空值<code>numm=True,blank=True</code>。 <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">size = models.IntegerField()</span><br><span class="line">age2 = models.IntegerField(default=<span class="number">18</span>)</span><br><span class="line">data = models.IntegerField(null=<span class="literal">True</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol>
<li>django操作表中的数据<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据库操作</span></span><br><span class="line"><span class="keyword">from</span> app01.models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">orm</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="comment"># ######## 1. 新增数据 ########</span></span><br><span class="line">    <span class="comment"># Department.objects.create(title=&quot;运维部&quot;)</span></span><br><span class="line">    <span class="comment"># Department.objects.create(title=&quot;IT部&quot;)</span></span><br><span class="line">    <span class="comment"># Department.objects.create(title=&quot;编辑部&quot;)</span></span><br><span class="line">    <span class="comment"># UserInfo.objects.create(name=&quot;盛日辉&quot;,password=&#x27;123&#x27;,age=18)</span></span><br><span class="line">    <span class="comment"># UserInfo.objects.create(name=&quot;特朗普&quot;,password=&#x27;666&#x27;,age=76)</span></span><br><span class="line">    <span class="comment"># UserInfo.objects.create(name=&quot;拜登&quot;,password=&#x27;555&#x27;,age=80)</span></span><br><span class="line">    <span class="comment"># UserInfo.objects.create(name=&quot;小艺&quot;,password=&#x27;1233&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ######## 2. 删除数据 ########</span></span><br><span class="line">    <span class="comment"># Department.objects.filter(id=4).delete()  # 删除id=3的一条</span></span><br><span class="line">    <span class="comment"># Department.objects.filter(id__gt=3).delete()  # 删除id&gt;3的数据，双下划线</span></span><br><span class="line">    <span class="comment"># Department.objects.all().delete()  # 删除所有</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ######## 3. 查询数据 ########</span></span><br><span class="line">    <span class="comment"># QuerySet类型的数据</span></span><br><span class="line">    <span class="comment"># 可以理解成数据列表，每一项都是一行</span></span><br><span class="line">    <span class="comment"># data_list = UserInfo.objects.all()</span></span><br><span class="line">    <span class="comment"># print(data_list)</span></span><br><span class="line">    <span class="comment"># &lt;QuerySet [&lt;UserInfo: UserInfo object (1)&gt;, &lt;UserInfo: UserInfo object (2)&gt;, &lt;UserInfo: UserInfo object (3)&gt;, &lt;UserInfo: UserInfo object (4)&gt;]&gt;</span></span><br><span class="line">    <span class="comment"># 打印每一行的信息</span></span><br><span class="line">    <span class="comment"># for obj in data_list:</span></span><br><span class="line">    <span class="comment">#     print(obj.id, obj.name,obj.password,obj.age)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># obj_list = UserInfo.objects.filter(id=1)  # 返回的虽然只有一个，但也是QuerySet</span></span><br><span class="line">    <span class="comment"># obj = UserInfo.objects.filter(id=1).first()  # 只取第一个</span></span><br><span class="line">    <span class="comment"># print(obj.id, obj.name, obj.password, obj.age)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># ######## 4. 更新数据 ########</span></span><br><span class="line">    <span class="comment"># 先找到数据，再update</span></span><br><span class="line">    <span class="comment"># UserInfo.objects.all().update(age=0)</span></span><br><span class="line">    UserInfo.objects.<span class="built_in">filter</span>(name=<span class="string">&quot;特朗普&quot;</span>).update(age=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;成功&quot;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="案例：用户管理"><a href="#案例：用户管理" class="headerlink" title="案例：用户管理"></a>案例：用户管理</h4><ol>
<li>用户信息展示<br>视图函数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 案例：用户管理</span></span><br><span class="line"><span class="comment"># 用户列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_list</span>(<span class="params">request</span>):</span><br><span class="line">    data_list = UserInfo.objects.<span class="built_in">all</span>()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;info_list.html&#x27;</span>, &#123;<span class="string">&#x27;data_list&#x27;</span>: data_list&#125;)</span><br></pre></td></tr></table></figure>
前端：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户管理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>INFO列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/info/add/&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for obj in data_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>添加用户<br>视图函数：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_add</span>(<span class="params">request</span>):</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;info_add.html&#x27;</span>)</span><br><span class="line">    <span class="comment"># 获取提交的数据</span></span><br><span class="line">    user = request.POST.get(<span class="string">&#x27;user&#x27;</span>)</span><br><span class="line">    pwd = request.POST.get(<span class="string">&#x27;pwd&#x27;</span>)</span><br><span class="line">    age = request.POST.get(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 写入数据库</span></span><br><span class="line">    UserInfo.objects.create(name=user, password=pwd, age=age)</span><br><span class="line">    <span class="comment"># return render(request, &quot;info_list.html&quot;)  # 结果是没有数据，模板部分没有获取到数据</span></span><br><span class="line">    <span class="comment"># info_list(request)  # 报大错</span></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/info/list/&quot;</span>)  <span class="comment"># 必须还得是重定向</span></span><br></pre></td></tr></table></figure>
前端：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>&#123;#向这个页面发请求，可以不屑action#&#125;</span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>删除用户<br>想法是通过地址发起GET请求<code>http://127.0.0.1:8000/info/delete/?nid=1</code>，获得<code>nid</code>，然后在视图函数中进行数据库删除操作。<br>进一步，在表格中增加一列，“删除”的<code>a</code>标签，其中的<code>href</code>就是发起的<code>GET</code>请求的地址。执行<code>delete</code>的函数后，重定向到用户列表。<br>视图函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">info_delete</span>(<span class="params">request</span>):</span><br><span class="line">    nid = request.GET.get(<span class="string">&#x27;nid&#x27;</span>)</span><br><span class="line">    UserInfo.objects.<span class="built_in">filter</span>(<span class="built_in">id</span>=nid).delete()</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/info/list/&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>前端页面修改：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    &#123;% for obj in data_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.id &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.password &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; obj.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/info/delete/?nid=&#123;&#123; obj.id &#125;&#125;&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>效果<br>用户列表页面<br><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220718/django-用户管理案例用户列表页面.27y7u1x097b4.webp" alt="django-用户管理案例用户列表页面"><br>添加用户页面<br><img src="https://cdn.staticaly.com/gh/shengrihui/Image-hosting@master/20220718/django-用户管理案例添加用户页面.5tjn08y6gec0.webp" alt="django-用户管理案例添加用户页面"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>python</category>
        <category>django</category>
      </categories>
      <tags>
        <tag>django</tag>
        <tag>web框架</tag>
      </tags>
  </entry>
</search>
